(()=>{var l={890:(l,t,e)=>{"use strict";e.d(t,{Z:()=>o});var n=e(15),i=e.n(n),a=e(645),r=e.n(a)()(i());r.push([l.id,"body {\n    margin: 0 auto;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n}\n\n.editor-ui {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.editor-ui.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n#editor-controls {\n    position: fixed;\n    top: 50px;\n    right: 50px;\n    background-color: chocolate;\n    padding: 1px;\n}\n\n.editor-controls__action {\n    display: block;\n    padding: 5px 0;\n    background-color: #ccc;\n    font-size: 20px;\n    text-align: center;\n    width: 45px;\n}\n\n.editor-controls__action.active {\n    border-style: inset;\n}\n\n#editor-info {\n    position: fixed;\n    top: 50px;\n    right: 200px;\n    background-color: chocolate;\n    padding: 1px;\n}\n\n.editor-info__component {\n    border: 1px solid #999;\n    padding: 5px;\n    background-color: #ccc;\n    display: none;\n}\n\n.editor-info__component.active {\n    display: block;\n}\n\n.editor-info__component + .editor-info__component {\n    border-top: 0;\n}\n\n.editor-info__label {\n    font-weight: bold;\n    text-transform: capitalize;\n}\n\n.game {\n    width: 100vw;\n    height: 100vh;\n}\n\n.view {\n    display: block;\n    float: left;\n    width: 80%;\n    height: 80%;\n}\n\n.details {\n    display: block;\n    float: right;\n    width: 20%;\n    height: 100%;\n}\n\n.console {\n    position: fixed;\n    display: block;\n    left: 15%;\n    bottom: 0;\n    width: 65%;\n    height: 20%;\n    background-color: #eee;\n    transition: height 1s ease;\n}\n\n.console.full {\n    height: 80%;\n}\n\n.console.collapsed {\n    height: 35px;\n}\n\n.messages {\n    display:flex;\n    flex-direction:column-reverse;\n    height: calc(100% - 10px);\n    overflow-y: scroll;\n    padding: 5px;\n}\n\n.messages__inn {\n\n}\n\n.message {\n    font-size: 2.2vh;\n}\n\n.message__text {\n\n}\n\n.message__bold {\n    font-weight: bold;\n}\n\n.message__italics {\n    font-style: italic;\n}\n\n.message__amount {\n    margin-left: 1em;\n}\n\n#character-info {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 15%;\n    height: 20%;\n    font-family: Arial, serif;\n    font-weight: bold;\n    font-size: 15vh;\n    text-align: center;\n    color: #c00;\n    background-color: #aaa;\n}\n\n.character-info__health {\n    position: absolute;\n    top: 5%;\n    bottom: 5%;\n    left: 0;\n    right: 0;\n}\n\n.character-info__healthbg {\n    position: absolute;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    color: #ffe0e0;\n    display: flex;\n    flex-direction: column-reverse;\n    overflow: hidden;\n}\n\n.character-info__healthfg {\n    position: absolute;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    z-index: 20;\n    display: flex;\n    flex-direction: column-reverse;\n    overflow: hidden;\n}\n\n.character-info__healthtext {\n    position: absolute;\n    top: 38%;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    font-size: 3vh;\n    color: #000;\n    z-index: 30;\n    text-shadow: 1px 1px 3px #eee;\n}\n\n.details {\n    padding: 10px 15px;\n    box-sizing: border-box;\n    font-size: 2vh;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,WAAW;IACX,2BAA2B;IAC3B,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,cAAc;IACd,sBAAsB;IACtB,eAAe;IACf,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,YAAY;IACZ,2BAA2B;IAC3B,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,UAAU;IACV,WAAW;AACf;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,cAAc;IACd,SAAS;IACT,SAAS;IACT,UAAU;IACV,WAAW;IACX,sBAAsB;IACtB,0BAA0B;AAC9B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;;AAEA;;AAEA;IACI,gBAAgB;AACpB;;AAEA;;AAEA;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,OAAO;IACP,UAAU;IACV,WAAW;IACX,yBAAyB;IACzB,iBAAiB;IACjB,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,UAAU;IACV,OAAO;IACP,QAAQ;AACZ;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,OAAO;IACP,QAAQ;IACR,WAAW;IACX,cAAc;IACd,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,OAAO;IACP,QAAQ;IACR,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,SAAS;IACT,cAAc;IACd,WAAW;IACX,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,cAAc;AAClB",sourcesContent:["body {\n    margin: 0 auto;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n}\n\n.editor-ui {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.editor-ui.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n#editor-controls {\n    position: fixed;\n    top: 50px;\n    right: 50px;\n    background-color: chocolate;\n    padding: 1px;\n}\n\n.editor-controls__action {\n    display: block;\n    padding: 5px 0;\n    background-color: #ccc;\n    font-size: 20px;\n    text-align: center;\n    width: 45px;\n}\n\n.editor-controls__action.active {\n    border-style: inset;\n}\n\n#editor-info {\n    position: fixed;\n    top: 50px;\n    right: 200px;\n    background-color: chocolate;\n    padding: 1px;\n}\n\n.editor-info__component {\n    border: 1px solid #999;\n    padding: 5px;\n    background-color: #ccc;\n    display: none;\n}\n\n.editor-info__component.active {\n    display: block;\n}\n\n.editor-info__component + .editor-info__component {\n    border-top: 0;\n}\n\n.editor-info__label {\n    font-weight: bold;\n    text-transform: capitalize;\n}\n\n.game {\n    width: 100vw;\n    height: 100vh;\n}\n\n.view {\n    display: block;\n    float: left;\n    width: 80%;\n    height: 80%;\n}\n\n.details {\n    display: block;\n    float: right;\n    width: 20%;\n    height: 100%;\n}\n\n.console {\n    position: fixed;\n    display: block;\n    left: 15%;\n    bottom: 0;\n    width: 65%;\n    height: 20%;\n    background-color: #eee;\n    transition: height 1s ease;\n}\n\n.console.full {\n    height: 80%;\n}\n\n.console.collapsed {\n    height: 35px;\n}\n\n.messages {\n    display:flex;\n    flex-direction:column-reverse;\n    height: calc(100% - 10px);\n    overflow-y: scroll;\n    padding: 5px;\n}\n\n.messages__inn {\n\n}\n\n.message {\n    font-size: 2.2vh;\n}\n\n.message__text {\n\n}\n\n.message__bold {\n    font-weight: bold;\n}\n\n.message__italics {\n    font-style: italic;\n}\n\n.message__amount {\n    margin-left: 1em;\n}\n\n#character-info {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 15%;\n    height: 20%;\n    font-family: Arial, serif;\n    font-weight: bold;\n    font-size: 15vh;\n    text-align: center;\n    color: #c00;\n    background-color: #aaa;\n}\n\n.character-info__health {\n    position: absolute;\n    top: 5%;\n    bottom: 5%;\n    left: 0;\n    right: 0;\n}\n\n.character-info__healthbg {\n    position: absolute;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    color: #ffe0e0;\n    display: flex;\n    flex-direction: column-reverse;\n    overflow: hidden;\n}\n\n.character-info__healthfg {\n    position: absolute;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    z-index: 20;\n    display: flex;\n    flex-direction: column-reverse;\n    overflow: hidden;\n}\n\n.character-info__healthtext {\n    position: absolute;\n    top: 38%;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    font-size: 3vh;\n    color: #000;\n    z-index: 30;\n    text-shadow: 1px 1px 3px #eee;\n}\n\n.details {\n    padding: 10px 15px;\n    box-sizing: border-box;\n    font-size: 2vh;\n}"],sourceRoot:""}]);const o=r},645:l=>{"use strict";l.exports=function(l){var t=[];return t.toString=function(){return this.map((function(t){var e=l(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(l,e,n){"string"==typeof l&&(l=[[null,l,""]]);var i={};if(n)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(i[r]=!0)}for(var o=0;o<l.length;o++){var s=[].concat(l[o]);n&&i[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:l=>{"use strict";function t(l,t){(null==t||t>l.length)&&(t=l.length);for(var e=0,n=new Array(t);e<t;e++)n[e]=l[e];return n}l.exports=function(l){var e,n,i=(n=4,function(l){if(Array.isArray(l))return l}(e=l)||function(l,t){var e=l&&("undefined"!=typeof Symbol&&l[Symbol.iterator]||l["@@iterator"]);if(null!=e){var n,i,a=[],r=!0,o=!1;try{for(e=e.call(l);!(r=(n=e.next()).done)&&(a.push(n.value),!t||a.length!==t);r=!0);}catch(l){o=!0,i=l}finally{try{r||null==e.return||e.return()}finally{if(o)throw i}}return a}}(e,n)||function(l,e){if(l){if("string"==typeof l)return t(l,e);var n=Object.prototype.toString.call(l).slice(8,-1);return"Object"===n&&l.constructor&&(n=l.constructor.name),"Map"===n||"Set"===n?Array.from(l):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(l,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],r=i[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),m="/*# ".concat(s," */"),h=r.sources.map((function(l){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(l," */")}));return[a].concat(h).concat([m]).join("\n")}return[a].join("\n")}},466:function(l){var t;l.exports=((t=function(){function l(l){return i.appendChild(l.dom),l}function e(l){for(var t=0;t<i.children.length;t++)i.children[t].style.display=t===l?"block":"none";n=l}var n=0,i=document.createElement("div");i.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",i.addEventListener("click",(function(l){l.preventDefault(),e(++n%i.children.length)}),!1);var a=(performance||Date).now(),r=a,o=0,s=l(new t.Panel("FPS","#0ff","#002")),m=l(new t.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var h=l(new t.Panel("MB","#f08","#201"));return e(0),{REVISION:16,dom:i,addPanel:l,showPanel:e,begin:function(){a=(performance||Date).now()},end:function(){o++;var l=(performance||Date).now();if(m.update(l-a,200),l>r+1e3&&(s.update(1e3*o/(l-r),100),r=l,o=0,h)){var t=performance.memory;h.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return l},update:function(){a=this.end()},domElement:i,setMode:e}}).Panel=function(l,t,e){var n=1/0,i=0,a=Math.round,r=a(window.devicePixelRatio||1),o=80*r,s=48*r,m=3*r,h=2*r,c=3*r,q=15*r,u=74*r,d=30*r,p=document.createElement("canvas");p.width=o,p.height=s,p.style.cssText="width:80px;height:48px";var x=p.getContext("2d");return x.font="bold "+9*r+"px Helvetica,Arial,sans-serif",x.textBaseline="top",x.fillStyle=e,x.fillRect(0,0,o,s),x.fillStyle=t,x.fillText(l,m,h),x.fillRect(c,q,u,d),x.fillStyle=e,x.globalAlpha=.9,x.fillRect(c,q,u,d),{dom:p,update:function(s,f){n=Math.min(n,s),i=Math.max(i,s),x.fillStyle=e,x.globalAlpha=1,x.fillRect(0,0,o,q),x.fillStyle=t,x.fillText(a(s)+" "+l+" ("+a(n)+"-"+a(i)+")",m,h),x.drawImage(p,c+r,q,u-r,d,c,q,u-r,d),x.fillRect(c+u-r,q,r,d),x.fillStyle=e,x.globalAlpha=.9,x.fillRect(c+u-r,q,r,a((1-s/f)*d))}}},t)},379:(l,t,e)=>{"use strict";var n,i=function(){var l={};return function(t){if(void 0===l[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(l){e=null}l[t]=e}return l[t]}}(),a=[];function r(l){for(var t=-1,e=0;e<a.length;e++)if(a[e].identifier===l){t=e;break}return t}function o(l,t){for(var e={},n=[],i=0;i<l.length;i++){var o=l[i],s=t.base?o[0]+t.base:o[0],m=e[s]||0,h="".concat(s," ").concat(m);e[s]=m+1;var c=r(h),q={css:o[1],media:o[2],sourceMap:o[3]};-1!==c?(a[c].references++,a[c].updater(q)):a.push({identifier:h,updater:p(q,t),references:1}),n.push(h)}return n}function s(l){var t=document.createElement("style"),n=l.attributes||{};if(void 0===n.nonce){var a=e.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(l){t.setAttribute(l,n[l])})),"function"==typeof l.insert)l.insert(t);else{var r=i(l.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var m,h=(m=[],function(l,t){return m[l]=t,m.filter(Boolean).join("\n")});function c(l,t,e,n){var i=e?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(l.styleSheet)l.styleSheet.cssText=h(t,i);else{var a=document.createTextNode(i),r=l.childNodes;r[t]&&l.removeChild(r[t]),r.length?l.insertBefore(a,r[t]):l.appendChild(a)}}function q(l,t,e){var n=e.css,i=e.media,a=e.sourceMap;if(i?l.setAttribute("media",i):l.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),l.styleSheet)l.styleSheet.cssText=n;else{for(;l.firstChild;)l.removeChild(l.firstChild);l.appendChild(document.createTextNode(n))}}var u=null,d=0;function p(l,t){var e,n,i;if(t.singleton){var a=d++;e=u||(u=s(t)),n=c.bind(null,e,a,!1),i=c.bind(null,e,a,!0)}else e=s(t),n=q.bind(null,e,t),i=function(){!function(l){if(null===l.parentNode)return!1;l.parentNode.removeChild(l)}(e)};return n(l),function(t){if(t){if(t.css===l.css&&t.media===l.media&&t.sourceMap===l.sourceMap)return;n(l=t)}else i()}}l.exports=function(l,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var e=o(l=l||[],t);return function(l){if(l=l||[],"[object Array]"===Object.prototype.toString.call(l)){for(var n=0;n<e.length;n++){var i=r(e[n]);a[i].references--}for(var s=o(l,t),m=0;m<e.length;m++){var h=r(e[m]);0===a[h].references&&(a[h].updater(),a.splice(h,1))}e=s}}}},142:(l,t,e)=>{"use strict";var n=e(379),i=e.n(n),a=e(890);i()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;const r=100,o=1e3,s=1001,m=1002,h=1003,c=1006,q=1008,u=1012,d=1014,p=1015,x=1016,f=1020,_=1022,g=1023,v=1026,y=1027,b=2300,w=2301,M=2302,z=2400,S=2401,E=2402,T=3e3,A=7680,L=35044,C=35048,R="300 es";class P{addEventListener(l,t){void 0===this._listeners&&(this._listeners={});const e=this._listeners;void 0===e[l]&&(e[l]=[]),-1===e[l].indexOf(t)&&e[l].push(t)}hasEventListener(l,t){if(void 0===this._listeners)return!1;const e=this._listeners;return void 0!==e[l]&&-1!==e[l].indexOf(t)}removeEventListener(l,t){if(void 0===this._listeners)return;const e=this._listeners[l];if(void 0!==e){const l=e.indexOf(t);-1!==l&&e.splice(l,1)}}dispatchEvent(l){if(void 0===this._listeners)return;const t=this._listeners[l.type];if(void 0!==t){l.target=this;const e=t.slice(0);for(let t=0,n=e.length;t<n;t++)e[t].call(this,l);l.target=null}}}const I=[];for(let l=0;l<256;l++)I[l]=(l<16?"0":"")+l.toString(16);let D=1234567;const N=Math.PI/180,O=180/Math.PI;function B(){const l=4294967295*Math.random()|0,t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(I[255&l]+I[l>>8&255]+I[l>>16&255]+I[l>>24&255]+"-"+I[255&t]+I[t>>8&255]+"-"+I[t>>16&15|64]+I[t>>24&255]+"-"+I[63&e|128]+I[e>>8&255]+"-"+I[e>>16&255]+I[e>>24&255]+I[255&n]+I[n>>8&255]+I[n>>16&255]+I[n>>24&255]).toUpperCase()}function F(l,t,e){return Math.max(t,Math.min(e,l))}function k(l,t){return(l%t+t)%t}function H(l,t,e){return(1-e)*l+e*t}function U(l){return 0==(l&l-1)&&0!==l}function G(l){return Math.pow(2,Math.floor(Math.log(l)/Math.LN2))}var V=Object.freeze({__proto__:null,DEG2RAD:N,RAD2DEG:O,generateUUID:B,clamp:F,euclideanModulo:k,mapLinear:function(l,t,e,n,i){return n+(l-t)*(i-n)/(e-t)},inverseLerp:function(l,t,e){return l!==t?(e-l)/(t-l):0},lerp:H,damp:function(l,t,e,n){return H(l,t,1-Math.exp(-e*n))},pingpong:function(l,t=1){return t-Math.abs(k(l,2*t)-t)},smoothstep:function(l,t,e){return l<=t?0:l>=e?1:(l=(l-t)/(e-t))*l*(3-2*l)},smootherstep:function(l,t,e){return l<=t?0:l>=e?1:(l=(l-t)/(e-t))*l*l*(l*(6*l-15)+10)},randInt:function(l,t){return l+Math.floor(Math.random()*(t-l+1))},randFloat:function(l,t){return l+Math.random()*(t-l)},randFloatSpread:function(l){return l*(.5-Math.random())},seededRandom:function(l){return void 0!==l&&(D=l%2147483647),D=16807*D%2147483647,(D-1)/2147483646},degToRad:function(l){return l*N},radToDeg:function(l){return l*O},isPowerOfTwo:U,ceilPowerOfTwo:function(l){return Math.pow(2,Math.ceil(Math.log(l)/Math.LN2))},floorPowerOfTwo:G,setQuaternionFromProperEuler:function(l,t,e,n,i){const a=Math.cos,r=Math.sin,o=a(e/2),s=r(e/2),m=a((t+n)/2),h=r((t+n)/2),c=a((t-n)/2),q=r((t-n)/2),u=a((n-t)/2),d=r((n-t)/2);switch(i){case"XYX":l.set(o*h,s*c,s*q,o*m);break;case"YZY":l.set(s*q,o*h,s*c,o*m);break;case"ZXZ":l.set(s*c,s*q,o*h,o*m);break;case"XZX":l.set(o*h,s*d,s*u,o*m);break;case"YXY":l.set(s*u,o*h,s*d,o*m);break;case"ZYZ":l.set(s*d,s*u,o*h,o*m);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}});class W{constructor(l=0,t=0){this.x=l,this.y=t}get width(){return this.x}set width(l){this.x=l}get height(){return this.y}set height(l){this.y=l}set(l,t){return this.x=l,this.y=t,this}setScalar(l){return this.x=l,this.y=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y)}copy(l){return this.x=l.x,this.y=l.y,this}add(l,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(l,t)):(this.x+=l.x,this.y+=l.y,this)}addScalar(l){return this.x+=l,this.y+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this}sub(l,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(l,t)):(this.x-=l.x,this.y-=l.y,this)}subScalar(l){return this.x-=l,this.y-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this}multiply(l){return this.x*=l.x,this.y*=l.y,this}multiplyScalar(l){return this.x*=l,this.y*=l,this}divide(l){return this.x/=l.x,this.y/=l.y,this}divideScalar(l){return this.multiplyScalar(1/l)}applyMatrix3(l){const t=this.x,e=this.y,n=l.elements;return this.x=n[0]*t+n[3]*e+n[6],this.y=n[1]*t+n[4]*e+n[7],this}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(l){return this.x*l.x+this.y*l.y}cross(l){return this.x*l.y-this.y*l.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(l){return Math.sqrt(this.distanceToSquared(l))}distanceToSquared(l){const t=this.x-l.x,e=this.y-l.y;return t*t+e*e}manhattanDistanceTo(l){return Math.abs(this.x-l.x)+Math.abs(this.y-l.y)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this}equals(l){return l.x===this.x&&l.y===this.y}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l}fromBufferAttribute(l,t,e){return void 0!==e&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=l.getX(t),this.y=l.getY(t),this}rotateAround(l,t){const e=Math.cos(t),n=Math.sin(t),i=this.x-l.x,a=this.y-l.y;return this.x=i*e-a*n+l.x,this.y=i*n+a*e+l.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}W.prototype.isVector2=!0;class j{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(l,t,e,n,i,a,r,o,s){const m=this.elements;return m[0]=l,m[1]=n,m[2]=r,m[3]=t,m[4]=i,m[5]=o,m[6]=e,m[7]=a,m[8]=s,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(l){const t=this.elements,e=l.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],this}extractBasis(l,t,e){return l.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),e.setFromMatrix3Column(this,2),this}setFromMatrix4(l){const t=l.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(l){return this.multiplyMatrices(this,l)}premultiply(l){return this.multiplyMatrices(l,this)}multiplyMatrices(l,t){const e=l.elements,n=t.elements,i=this.elements,a=e[0],r=e[3],o=e[6],s=e[1],m=e[4],h=e[7],c=e[2],q=e[5],u=e[8],d=n[0],p=n[3],x=n[6],f=n[1],_=n[4],g=n[7],v=n[2],y=n[5],b=n[8];return i[0]=a*d+r*f+o*v,i[3]=a*p+r*_+o*y,i[6]=a*x+r*g+o*b,i[1]=s*d+m*f+h*v,i[4]=s*p+m*_+h*y,i[7]=s*x+m*g+h*b,i[2]=c*d+q*f+u*v,i[5]=c*p+q*_+u*y,i[8]=c*x+q*g+u*b,this}multiplyScalar(l){const t=this.elements;return t[0]*=l,t[3]*=l,t[6]*=l,t[1]*=l,t[4]*=l,t[7]*=l,t[2]*=l,t[5]*=l,t[8]*=l,this}determinant(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],a=l[4],r=l[5],o=l[6],s=l[7],m=l[8];return t*a*m-t*r*s-e*i*m+e*r*o+n*i*s-n*a*o}invert(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],a=l[4],r=l[5],o=l[6],s=l[7],m=l[8],h=m*a-r*s,c=r*o-m*i,q=s*i-a*o,u=t*h+e*c+n*q;if(0===u)return this.set(0,0,0,0,0,0,0,0,0);const d=1/u;return l[0]=h*d,l[1]=(n*s-m*e)*d,l[2]=(r*e-n*a)*d,l[3]=c*d,l[4]=(m*t-n*o)*d,l[5]=(n*i-r*t)*d,l[6]=q*d,l[7]=(e*o-s*t)*d,l[8]=(a*t-e*i)*d,this}transpose(){let l;const t=this.elements;return l=t[1],t[1]=t[3],t[3]=l,l=t[2],t[2]=t[6],t[6]=l,l=t[5],t[5]=t[7],t[7]=l,this}getNormalMatrix(l){return this.setFromMatrix4(l).invert().transpose()}transposeIntoArray(l){const t=this.elements;return l[0]=t[0],l[1]=t[3],l[2]=t[6],l[3]=t[1],l[4]=t[4],l[5]=t[7],l[6]=t[2],l[7]=t[5],l[8]=t[8],this}setUvTransform(l,t,e,n,i,a,r){const o=Math.cos(i),s=Math.sin(i);return this.set(e*o,e*s,-e*(o*a+s*r)+a+l,-n*s,n*o,-n*(-s*a+o*r)+r+t,0,0,1),this}scale(l,t){const e=this.elements;return e[0]*=l,e[3]*=l,e[6]*=l,e[1]*=t,e[4]*=t,e[7]*=t,this}rotate(l){const t=Math.cos(l),e=Math.sin(l),n=this.elements,i=n[0],a=n[3],r=n[6],o=n[1],s=n[4],m=n[7];return n[0]=t*i+e*o,n[3]=t*a+e*s,n[6]=t*r+e*m,n[1]=-e*i+t*o,n[4]=-e*a+t*s,n[7]=-e*r+t*m,this}translate(l,t){const e=this.elements;return e[0]+=l*e[2],e[3]+=l*e[5],e[6]+=l*e[8],e[1]+=t*e[2],e[4]+=t*e[5],e[7]+=t*e[8],this}equals(l){const t=this.elements,e=l.elements;for(let l=0;l<9;l++)if(t[l]!==e[l])return!1;return!0}fromArray(l,t=0){for(let e=0;e<9;e++)this.elements[e]=l[e+t];return this}toArray(l=[],t=0){const e=this.elements;return l[t]=e[0],l[t+1]=e[1],l[t+2]=e[2],l[t+3]=e[3],l[t+4]=e[4],l[t+5]=e[5],l[t+6]=e[6],l[t+7]=e[7],l[t+8]=e[8],l}clone(){return(new this.constructor).fromArray(this.elements)}}let X;j.prototype.isMatrix3=!0;class Y{static getDataURL(l){if(/^data:/i.test(l.src))return l.src;if("undefined"==typeof HTMLCanvasElement)return l.src;let t;if(l instanceof HTMLCanvasElement)t=l;else{void 0===X&&(X=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),X.width=l.width,X.height=l.height;const e=X.getContext("2d");l instanceof ImageData?e.putImageData(l,0,0):e.drawImage(l,0,0,l.width,l.height),t=X}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",l),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}}let J=0;class Z extends P{constructor(l=Z.DEFAULT_IMAGE,t=Z.DEFAULT_MAPPING,e=1001,n=1001,i=1006,a=1008,r=1023,o=1009,s=1,m=3e3){super(),Object.defineProperty(this,"id",{value:J++}),this.uuid=B(),this.name="",this.image=l,this.mipmaps=[],this.mapping=t,this.wrapS=e,this.wrapT=n,this.magFilter=i,this.minFilter=a,this.anisotropy=s,this.format=r,this.internalFormat=null,this.type=o,this.offset=new W(0,0),this.repeat=new W(1,1),this.center=new W(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new j,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=m,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(l){return this.name=l.name,this.image=l.image,this.mipmaps=l.mipmaps.slice(0),this.mapping=l.mapping,this.wrapS=l.wrapS,this.wrapT=l.wrapT,this.magFilter=l.magFilter,this.minFilter=l.minFilter,this.anisotropy=l.anisotropy,this.format=l.format,this.internalFormat=l.internalFormat,this.type=l.type,this.offset.copy(l.offset),this.repeat.copy(l.repeat),this.center.copy(l.center),this.rotation=l.rotation,this.matrixAutoUpdate=l.matrixAutoUpdate,this.matrix.copy(l.matrix),this.generateMipmaps=l.generateMipmaps,this.premultiplyAlpha=l.premultiplyAlpha,this.flipY=l.flipY,this.unpackAlignment=l.unpackAlignment,this.encoding=l.encoding,this}toJSON(l){const t=void 0===l||"string"==typeof l;if(!t&&void 0!==l.textures[this.uuid])return l.textures[this.uuid];const e={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const n=this.image;if(void 0===n.uuid&&(n.uuid=B()),!t&&void 0===l.images[n.uuid]){let t;if(Array.isArray(n)){t=[];for(let l=0,e=n.length;l<e;l++)n[l].isDataTexture?t.push(Q(n[l].image)):t.push(Q(n[l]))}else t=Q(n);l.images[n.uuid]={uuid:n.uuid,url:t}}e.image=n.uuid}return t||(l.textures[this.uuid]=e),e}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(l){if(300!==this.mapping)return l;if(l.applyMatrix3(this.matrix),l.x<0||l.x>1)switch(this.wrapS){case o:l.x=l.x-Math.floor(l.x);break;case s:l.x=l.x<0?0:1;break;case m:1===Math.abs(Math.floor(l.x)%2)?l.x=Math.ceil(l.x)-l.x:l.x=l.x-Math.floor(l.x)}if(l.y<0||l.y>1)switch(this.wrapT){case o:l.y=l.y-Math.floor(l.y);break;case s:l.y=l.y<0?0:1;break;case m:1===Math.abs(Math.floor(l.y)%2)?l.y=Math.ceil(l.y)-l.y:l.y=l.y-Math.floor(l.y)}return this.flipY&&(l.y=1-l.y),l}set needsUpdate(l){!0===l&&this.version++}}function Q(l){return"undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&l instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&l instanceof ImageBitmap?Y.getDataURL(l):l.data?{data:Array.prototype.slice.call(l.data),width:l.width,height:l.height,type:l.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Z.DEFAULT_IMAGE=void 0,Z.DEFAULT_MAPPING=300,Z.prototype.isTexture=!0;class K{constructor(l=0,t=0,e=0,n=1){this.x=l,this.y=t,this.z=e,this.w=n}get width(){return this.z}set width(l){this.z=l}get height(){return this.w}set height(l){this.w=l}set(l,t,e,n){return this.x=l,this.y=t,this.z=e,this.w=n,this}setScalar(l){return this.x=l,this.y=l,this.z=l,this.w=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setZ(l){return this.z=l,this}setW(l){return this.w=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(l){return this.x=l.x,this.y=l.y,this.z=l.z,this.w=void 0!==l.w?l.w:1,this}add(l,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(l,t)):(this.x+=l.x,this.y+=l.y,this.z+=l.z,this.w+=l.w,this)}addScalar(l){return this.x+=l,this.y+=l,this.z+=l,this.w+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this.z=l.z+t.z,this.w=l.w+t.w,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this.z+=l.z*t,this.w+=l.w*t,this}sub(l,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(l,t)):(this.x-=l.x,this.y-=l.y,this.z-=l.z,this.w-=l.w,this)}subScalar(l){return this.x-=l,this.y-=l,this.z-=l,this.w-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this.z=l.z-t.z,this.w=l.w-t.w,this}multiply(l){return this.x*=l.x,this.y*=l.y,this.z*=l.z,this.w*=l.w,this}multiplyScalar(l){return this.x*=l,this.y*=l,this.z*=l,this.w*=l,this}applyMatrix4(l){const t=this.x,e=this.y,n=this.z,i=this.w,a=l.elements;return this.x=a[0]*t+a[4]*e+a[8]*n+a[12]*i,this.y=a[1]*t+a[5]*e+a[9]*n+a[13]*i,this.z=a[2]*t+a[6]*e+a[10]*n+a[14]*i,this.w=a[3]*t+a[7]*e+a[11]*n+a[15]*i,this}divideScalar(l){return this.multiplyScalar(1/l)}setAxisAngleFromQuaternion(l){this.w=2*Math.acos(l.w);const t=Math.sqrt(1-l.w*l.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=l.x/t,this.y=l.y/t,this.z=l.z/t),this}setAxisAngleFromRotationMatrix(l){let t,e,n,i;const a=.01,r=.1,o=l.elements,s=o[0],m=o[4],h=o[8],c=o[1],q=o[5],u=o[9],d=o[2],p=o[6],x=o[10];if(Math.abs(m-c)<a&&Math.abs(h-d)<a&&Math.abs(u-p)<a){if(Math.abs(m+c)<r&&Math.abs(h+d)<r&&Math.abs(u+p)<r&&Math.abs(s+q+x-3)<r)return this.set(1,0,0,0),this;t=Math.PI;const l=(s+1)/2,o=(q+1)/2,f=(x+1)/2,_=(m+c)/4,g=(h+d)/4,v=(u+p)/4;return l>o&&l>f?l<a?(e=0,n=.707106781,i=.707106781):(e=Math.sqrt(l),n=_/e,i=g/e):o>f?o<a?(e=.707106781,n=0,i=.707106781):(n=Math.sqrt(o),e=_/n,i=v/n):f<a?(e=.707106781,n=.707106781,i=0):(i=Math.sqrt(f),e=g/i,n=v/i),this.set(e,n,i,t),this}let f=Math.sqrt((p-u)*(p-u)+(h-d)*(h-d)+(c-m)*(c-m));return Math.abs(f)<.001&&(f=1),this.x=(p-u)/f,this.y=(h-d)/f,this.z=(c-m)/f,this.w=Math.acos((s+q+x-1)/2),this}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this.z=Math.min(this.z,l.z),this.w=Math.min(this.w,l.w),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this.z=Math.max(this.z,l.z),this.w=Math.max(this.w,l.w),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this.z=Math.max(l.z,Math.min(t.z,this.z)),this.w=Math.max(l.w,Math.min(t.w,this.w)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this.z=Math.max(l,Math.min(t,this.z)),this.w=Math.max(l,Math.min(t,this.w)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z+this.w*l.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this.z+=(l.z-this.z)*t,this.w+=(l.w-this.w)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this.z=l.z+(t.z-l.z)*e,this.w=l.w+(t.w-l.w)*e,this}equals(l){return l.x===this.x&&l.y===this.y&&l.z===this.z&&l.w===this.w}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this.z=l[t+2],this.w=l[t+3],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l[t+2]=this.z,l[t+3]=this.w,l}fromBufferAttribute(l,t,e){return void 0!==e&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=l.getX(t),this.y=l.getY(t),this.z=l.getZ(t),this.w=l.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}K.prototype.isVector4=!0;class $ extends P{constructor(l,t,e){super(),this.width=l,this.height=t,this.depth=1,this.scissor=new K(0,0,l,t),this.scissorTest=!1,this.viewport=new K(0,0,l,t),e=e||{},this.texture=new Z(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.image={},this.texture.image.width=l,this.texture.image.height=t,this.texture.image.depth=1,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:c,this.depthBuffer=void 0===e.depthBuffer||e.depthBuffer,this.stencilBuffer=void 0!==e.stencilBuffer&&e.stencilBuffer,this.depthTexture=void 0!==e.depthTexture?e.depthTexture:null}setTexture(l){l.image={width:this.width,height:this.height,depth:this.depth},this.texture=l}setSize(l,t,e=1){this.width===l&&this.height===t&&this.depth===e||(this.width=l,this.height=t,this.depth=e,this.texture.image.width=l,this.texture.image.height=t,this.texture.image.depth=e,this.dispose()),this.viewport.set(0,0,l,t),this.scissor.set(0,0,l,t)}clone(){return(new this.constructor).copy(this)}copy(l){return this.width=l.width,this.height=l.height,this.depth=l.depth,this.viewport.copy(l.viewport),this.texture=l.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=l.depthBuffer,this.stencilBuffer=l.stencilBuffer,this.depthTexture=l.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}$.prototype.isWebGLRenderTarget=!0,class extends ${constructor(l,t,e){super(l,t);const n=this.texture;this.texture=[];for(let l=0;l<e;l++)this.texture[l]=n.clone()}setSize(l,t,e=1){if(this.width!==l||this.height!==t||this.depth!==e){this.width=l,this.height=t,this.depth=e;for(let n=0,i=this.texture.length;n<i;n++)this.texture[n].image.width=l,this.texture[n].image.height=t,this.texture[n].image.depth=e;this.dispose()}return this.viewport.set(0,0,l,t),this.scissor.set(0,0,l,t),this}copy(l){this.dispose(),this.width=l.width,this.height=l.height,this.depth=l.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=l.depthBuffer,this.stencilBuffer=l.stencilBuffer,this.depthTexture=l.depthTexture,this.texture.length=0;for(let t=0,e=l.texture.length;t<e;t++)this.texture[t]=l.texture[t].clone();return this}}.prototype.isWebGLMultipleRenderTargets=!0,class extends ${constructor(l,t,e){super(l,t,e),this.samples=4}copy(l){return super.copy.call(this,l),this.samples=l.samples,this}}.prototype.isWebGLMultisampleRenderTarget=!0;class ll{constructor(l=0,t=0,e=0,n=1){this._x=l,this._y=t,this._z=e,this._w=n}static slerp(l,t,e,n){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),e.slerpQuaternions(l,t,n)}static slerpFlat(l,t,e,n,i,a,r){let o=e[n+0],s=e[n+1],m=e[n+2],h=e[n+3];const c=i[a+0],q=i[a+1],u=i[a+2],d=i[a+3];if(0===r)return l[t+0]=o,l[t+1]=s,l[t+2]=m,void(l[t+3]=h);if(1===r)return l[t+0]=c,l[t+1]=q,l[t+2]=u,void(l[t+3]=d);if(h!==d||o!==c||s!==q||m!==u){let l=1-r;const t=o*c+s*q+m*u+h*d,e=t>=0?1:-1,n=1-t*t;if(n>Number.EPSILON){const i=Math.sqrt(n),a=Math.atan2(i,t*e);l=Math.sin(l*a)/i,r=Math.sin(r*a)/i}const i=r*e;if(o=o*l+c*i,s=s*l+q*i,m=m*l+u*i,h=h*l+d*i,l===1-r){const l=1/Math.sqrt(o*o+s*s+m*m+h*h);o*=l,s*=l,m*=l,h*=l}}l[t]=o,l[t+1]=s,l[t+2]=m,l[t+3]=h}static multiplyQuaternionsFlat(l,t,e,n,i,a){const r=e[n],o=e[n+1],s=e[n+2],m=e[n+3],h=i[a],c=i[a+1],q=i[a+2],u=i[a+3];return l[t]=r*u+m*h+o*q-s*c,l[t+1]=o*u+m*c+s*h-r*q,l[t+2]=s*u+m*q+r*c-o*h,l[t+3]=m*u-r*h-o*c-s*q,l}get x(){return this._x}set x(l){this._x=l,this._onChangeCallback()}get y(){return this._y}set y(l){this._y=l,this._onChangeCallback()}get z(){return this._z}set z(l){this._z=l,this._onChangeCallback()}get w(){return this._w}set w(l){this._w=l,this._onChangeCallback()}set(l,t,e,n){return this._x=l,this._y=t,this._z=e,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(l){return this._x=l.x,this._y=l.y,this._z=l.z,this._w=l.w,this._onChangeCallback(),this}setFromEuler(l,t){if(!l||!l.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const e=l._x,n=l._y,i=l._z,a=l._order,r=Math.cos,o=Math.sin,s=r(e/2),m=r(n/2),h=r(i/2),c=o(e/2),q=o(n/2),u=o(i/2);switch(a){case"XYZ":this._x=c*m*h+s*q*u,this._y=s*q*h-c*m*u,this._z=s*m*u+c*q*h,this._w=s*m*h-c*q*u;break;case"YXZ":this._x=c*m*h+s*q*u,this._y=s*q*h-c*m*u,this._z=s*m*u-c*q*h,this._w=s*m*h+c*q*u;break;case"ZXY":this._x=c*m*h-s*q*u,this._y=s*q*h+c*m*u,this._z=s*m*u+c*q*h,this._w=s*m*h-c*q*u;break;case"ZYX":this._x=c*m*h-s*q*u,this._y=s*q*h+c*m*u,this._z=s*m*u-c*q*h,this._w=s*m*h+c*q*u;break;case"YZX":this._x=c*m*h+s*q*u,this._y=s*q*h+c*m*u,this._z=s*m*u-c*q*h,this._w=s*m*h-c*q*u;break;case"XZY":this._x=c*m*h-s*q*u,this._y=s*q*h-c*m*u,this._z=s*m*u+c*q*h,this._w=s*m*h+c*q*u;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==t&&this._onChangeCallback(),this}setFromAxisAngle(l,t){const e=t/2,n=Math.sin(e);return this._x=l.x*n,this._y=l.y*n,this._z=l.z*n,this._w=Math.cos(e),this._onChangeCallback(),this}setFromRotationMatrix(l){const t=l.elements,e=t[0],n=t[4],i=t[8],a=t[1],r=t[5],o=t[9],s=t[2],m=t[6],h=t[10],c=e+r+h;if(c>0){const l=.5/Math.sqrt(c+1);this._w=.25/l,this._x=(m-o)*l,this._y=(i-s)*l,this._z=(a-n)*l}else if(e>r&&e>h){const l=2*Math.sqrt(1+e-r-h);this._w=(m-o)/l,this._x=.25*l,this._y=(n+a)/l,this._z=(i+s)/l}else if(r>h){const l=2*Math.sqrt(1+r-e-h);this._w=(i-s)/l,this._x=(n+a)/l,this._y=.25*l,this._z=(o+m)/l}else{const l=2*Math.sqrt(1+h-e-r);this._w=(a-n)/l,this._x=(i+s)/l,this._y=(o+m)/l,this._z=.25*l}return this._onChangeCallback(),this}setFromUnitVectors(l,t){let e=l.dot(t)+1;return e<Number.EPSILON?(e=0,Math.abs(l.x)>Math.abs(l.z)?(this._x=-l.y,this._y=l.x,this._z=0,this._w=e):(this._x=0,this._y=-l.z,this._z=l.y,this._w=e)):(this._x=l.y*t.z-l.z*t.y,this._y=l.z*t.x-l.x*t.z,this._z=l.x*t.y-l.y*t.x,this._w=e),this.normalize()}angleTo(l){return 2*Math.acos(Math.abs(F(this.dot(l),-1,1)))}rotateTowards(l,t){const e=this.angleTo(l);if(0===e)return this;const n=Math.min(1,t/e);return this.slerp(l,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(l){return this._x*l._x+this._y*l._y+this._z*l._z+this._w*l._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let l=this.length();return 0===l?(this._x=0,this._y=0,this._z=0,this._w=1):(l=1/l,this._x=this._x*l,this._y=this._y*l,this._z=this._z*l,this._w=this._w*l),this._onChangeCallback(),this}multiply(l,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(l,t)):this.multiplyQuaternions(this,l)}premultiply(l){return this.multiplyQuaternions(l,this)}multiplyQuaternions(l,t){const e=l._x,n=l._y,i=l._z,a=l._w,r=t._x,o=t._y,s=t._z,m=t._w;return this._x=e*m+a*r+n*s-i*o,this._y=n*m+a*o+i*r-e*s,this._z=i*m+a*s+e*o-n*r,this._w=a*m-e*r-n*o-i*s,this._onChangeCallback(),this}slerp(l,t){if(0===t)return this;if(1===t)return this.copy(l);const e=this._x,n=this._y,i=this._z,a=this._w;let r=a*l._w+e*l._x+n*l._y+i*l._z;if(r<0?(this._w=-l._w,this._x=-l._x,this._y=-l._y,this._z=-l._z,r=-r):this.copy(l),r>=1)return this._w=a,this._x=e,this._y=n,this._z=i,this;const o=1-r*r;if(o<=Number.EPSILON){const l=1-t;return this._w=l*a+t*this._w,this._x=l*e+t*this._x,this._y=l*n+t*this._y,this._z=l*i+t*this._z,this.normalize(),this._onChangeCallback(),this}const s=Math.sqrt(o),m=Math.atan2(s,r),h=Math.sin((1-t)*m)/s,c=Math.sin(t*m)/s;return this._w=a*h+this._w*c,this._x=e*h+this._x*c,this._y=n*h+this._y*c,this._z=i*h+this._z*c,this._onChangeCallback(),this}slerpQuaternions(l,t,e){this.copy(l).slerp(t,e)}equals(l){return l._x===this._x&&l._y===this._y&&l._z===this._z&&l._w===this._w}fromArray(l,t=0){return this._x=l[t],this._y=l[t+1],this._z=l[t+2],this._w=l[t+3],this._onChangeCallback(),this}toArray(l=[],t=0){return l[t]=this._x,l[t+1]=this._y,l[t+2]=this._z,l[t+3]=this._w,l}fromBufferAttribute(l,t){return this._x=l.getX(t),this._y=l.getY(t),this._z=l.getZ(t),this._w=l.getW(t),this}_onChange(l){return this._onChangeCallback=l,this}_onChangeCallback(){}}ll.prototype.isQuaternion=!0;class tl{constructor(l=0,t=0,e=0){this.x=l,this.y=t,this.z=e}set(l,t,e){return void 0===e&&(e=this.z),this.x=l,this.y=t,this.z=e,this}setScalar(l){return this.x=l,this.y=l,this.z=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setZ(l){return this.z=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(l){return this.x=l.x,this.y=l.y,this.z=l.z,this}add(l,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(l,t)):(this.x+=l.x,this.y+=l.y,this.z+=l.z,this)}addScalar(l){return this.x+=l,this.y+=l,this.z+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this.z=l.z+t.z,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this.z+=l.z*t,this}sub(l,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(l,t)):(this.x-=l.x,this.y-=l.y,this.z-=l.z,this)}subScalar(l){return this.x-=l,this.y-=l,this.z-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this.z=l.z-t.z,this}multiply(l,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(l,t)):(this.x*=l.x,this.y*=l.y,this.z*=l.z,this)}multiplyScalar(l){return this.x*=l,this.y*=l,this.z*=l,this}multiplyVectors(l,t){return this.x=l.x*t.x,this.y=l.y*t.y,this.z=l.z*t.z,this}applyEuler(l){return l&&l.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(nl.setFromEuler(l))}applyAxisAngle(l,t){return this.applyQuaternion(nl.setFromAxisAngle(l,t))}applyMatrix3(l){const t=this.x,e=this.y,n=this.z,i=l.elements;return this.x=i[0]*t+i[3]*e+i[6]*n,this.y=i[1]*t+i[4]*e+i[7]*n,this.z=i[2]*t+i[5]*e+i[8]*n,this}applyNormalMatrix(l){return this.applyMatrix3(l).normalize()}applyMatrix4(l){const t=this.x,e=this.y,n=this.z,i=l.elements,a=1/(i[3]*t+i[7]*e+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*e+i[8]*n+i[12])*a,this.y=(i[1]*t+i[5]*e+i[9]*n+i[13])*a,this.z=(i[2]*t+i[6]*e+i[10]*n+i[14])*a,this}applyQuaternion(l){const t=this.x,e=this.y,n=this.z,i=l.x,a=l.y,r=l.z,o=l.w,s=o*t+a*n-r*e,m=o*e+r*t-i*n,h=o*n+i*e-a*t,c=-i*t-a*e-r*n;return this.x=s*o+c*-i+m*-r-h*-a,this.y=m*o+c*-a+h*-i-s*-r,this.z=h*o+c*-r+s*-a-m*-i,this}project(l){return this.applyMatrix4(l.matrixWorldInverse).applyMatrix4(l.projectionMatrix)}unproject(l){return this.applyMatrix4(l.projectionMatrixInverse).applyMatrix4(l.matrixWorld)}transformDirection(l){const t=this.x,e=this.y,n=this.z,i=l.elements;return this.x=i[0]*t+i[4]*e+i[8]*n,this.y=i[1]*t+i[5]*e+i[9]*n,this.z=i[2]*t+i[6]*e+i[10]*n,this.normalize()}divide(l){return this.x/=l.x,this.y/=l.y,this.z/=l.z,this}divideScalar(l){return this.multiplyScalar(1/l)}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this.z=Math.min(this.z,l.z),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this.z=Math.max(this.z,l.z),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this.z=Math.max(l.z,Math.min(t.z,this.z)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this.z=Math.max(l,Math.min(t,this.z)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this.z+=(l.z-this.z)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this.z=l.z+(t.z-l.z)*e,this}cross(l,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(l,t)):this.crossVectors(this,l)}crossVectors(l,t){const e=l.x,n=l.y,i=l.z,a=t.x,r=t.y,o=t.z;return this.x=n*o-i*r,this.y=i*a-e*o,this.z=e*r-n*a,this}projectOnVector(l){const t=l.lengthSq();if(0===t)return this.set(0,0,0);const e=l.dot(this)/t;return this.copy(l).multiplyScalar(e)}projectOnPlane(l){return el.copy(this).projectOnVector(l),this.sub(el)}reflect(l){return this.sub(el.copy(l).multiplyScalar(2*this.dot(l)))}angleTo(l){const t=Math.sqrt(this.lengthSq()*l.lengthSq());if(0===t)return Math.PI/2;const e=this.dot(l)/t;return Math.acos(F(e,-1,1))}distanceTo(l){return Math.sqrt(this.distanceToSquared(l))}distanceToSquared(l){const t=this.x-l.x,e=this.y-l.y,n=this.z-l.z;return t*t+e*e+n*n}manhattanDistanceTo(l){return Math.abs(this.x-l.x)+Math.abs(this.y-l.y)+Math.abs(this.z-l.z)}setFromSpherical(l){return this.setFromSphericalCoords(l.radius,l.phi,l.theta)}setFromSphericalCoords(l,t,e){const n=Math.sin(t)*l;return this.x=n*Math.sin(e),this.y=Math.cos(t)*l,this.z=n*Math.cos(e),this}setFromCylindrical(l){return this.setFromCylindricalCoords(l.radius,l.theta,l.y)}setFromCylindricalCoords(l,t,e){return this.x=l*Math.sin(t),this.y=e,this.z=l*Math.cos(t),this}setFromMatrixPosition(l){const t=l.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(l){const t=this.setFromMatrixColumn(l,0).length(),e=this.setFromMatrixColumn(l,1).length(),n=this.setFromMatrixColumn(l,2).length();return this.x=t,this.y=e,this.z=n,this}setFromMatrixColumn(l,t){return this.fromArray(l.elements,4*t)}setFromMatrix3Column(l,t){return this.fromArray(l.elements,3*t)}equals(l){return l.x===this.x&&l.y===this.y&&l.z===this.z}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this.z=l[t+2],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l[t+2]=this.z,l}fromBufferAttribute(l,t,e){return void 0!==e&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=l.getX(t),this.y=l.getY(t),this.z=l.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}tl.prototype.isVector3=!0;const el=new tl,nl=new ll;class il{constructor(l=new tl(1/0,1/0,1/0),t=new tl(-1/0,-1/0,-1/0)){this.min=l,this.max=t}set(l,t){return this.min.copy(l),this.max.copy(t),this}setFromArray(l){let t=1/0,e=1/0,n=1/0,i=-1/0,a=-1/0,r=-1/0;for(let o=0,s=l.length;o<s;o+=3){const s=l[o],m=l[o+1],h=l[o+2];s<t&&(t=s),m<e&&(e=m),h<n&&(n=h),s>i&&(i=s),m>a&&(a=m),h>r&&(r=h)}return this.min.set(t,e,n),this.max.set(i,a,r),this}setFromBufferAttribute(l){let t=1/0,e=1/0,n=1/0,i=-1/0,a=-1/0,r=-1/0;for(let o=0,s=l.count;o<s;o++){const s=l.getX(o),m=l.getY(o),h=l.getZ(o);s<t&&(t=s),m<e&&(e=m),h<n&&(n=h),s>i&&(i=s),m>a&&(a=m),h>r&&(r=h)}return this.min.set(t,e,n),this.max.set(i,a,r),this}setFromPoints(l){this.makeEmpty();for(let t=0,e=l.length;t<e;t++)this.expandByPoint(l[t]);return this}setFromCenterAndSize(l,t){const e=rl.copy(t).multiplyScalar(.5);return this.min.copy(l).sub(e),this.max.copy(l).add(e),this}setFromObject(l){return this.makeEmpty(),this.expandByObject(l)}clone(){return(new this.constructor).copy(this)}copy(l){return this.min.copy(l.min),this.max.copy(l.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(l){return void 0===l&&(console.warn("THREE.Box3: .getCenter() target is now required"),l=new tl),this.isEmpty()?l.set(0,0,0):l.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(l){return void 0===l&&(console.warn("THREE.Box3: .getSize() target is now required"),l=new tl),this.isEmpty()?l.set(0,0,0):l.subVectors(this.max,this.min)}expandByPoint(l){return this.min.min(l),this.max.max(l),this}expandByVector(l){return this.min.sub(l),this.max.add(l),this}expandByScalar(l){return this.min.addScalar(-l),this.max.addScalar(l),this}expandByObject(l){l.updateWorldMatrix(!1,!1);const t=l.geometry;void 0!==t&&(null===t.boundingBox&&t.computeBoundingBox(),ol.copy(t.boundingBox),ol.applyMatrix4(l.matrixWorld),this.union(ol));const e=l.children;for(let l=0,t=e.length;l<t;l++)this.expandByObject(e[l]);return this}containsPoint(l){return!(l.x<this.min.x||l.x>this.max.x||l.y<this.min.y||l.y>this.max.y||l.z<this.min.z||l.z>this.max.z)}containsBox(l){return this.min.x<=l.min.x&&l.max.x<=this.max.x&&this.min.y<=l.min.y&&l.max.y<=this.max.y&&this.min.z<=l.min.z&&l.max.z<=this.max.z}getParameter(l,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new tl),t.set((l.x-this.min.x)/(this.max.x-this.min.x),(l.y-this.min.y)/(this.max.y-this.min.y),(l.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(l){return!(l.max.x<this.min.x||l.min.x>this.max.x||l.max.y<this.min.y||l.min.y>this.max.y||l.max.z<this.min.z||l.min.z>this.max.z)}intersectsSphere(l){return this.clampPoint(l.center,rl),rl.distanceToSquared(l.center)<=l.radius*l.radius}intersectsPlane(l){let t,e;return l.normal.x>0?(t=l.normal.x*this.min.x,e=l.normal.x*this.max.x):(t=l.normal.x*this.max.x,e=l.normal.x*this.min.x),l.normal.y>0?(t+=l.normal.y*this.min.y,e+=l.normal.y*this.max.y):(t+=l.normal.y*this.max.y,e+=l.normal.y*this.min.y),l.normal.z>0?(t+=l.normal.z*this.min.z,e+=l.normal.z*this.max.z):(t+=l.normal.z*this.max.z,e+=l.normal.z*this.min.z),t<=-l.constant&&e>=-l.constant}intersectsTriangle(l){if(this.isEmpty())return!1;this.getCenter(dl),pl.subVectors(this.max,dl),sl.subVectors(l.a,dl),ml.subVectors(l.b,dl),hl.subVectors(l.c,dl),cl.subVectors(ml,sl),ql.subVectors(hl,ml),ul.subVectors(sl,hl);let t=[0,-cl.z,cl.y,0,-ql.z,ql.y,0,-ul.z,ul.y,cl.z,0,-cl.x,ql.z,0,-ql.x,ul.z,0,-ul.x,-cl.y,cl.x,0,-ql.y,ql.x,0,-ul.y,ul.x,0];return!!_l(t,sl,ml,hl,pl)&&(t=[1,0,0,0,1,0,0,0,1],!!_l(t,sl,ml,hl,pl)&&(xl.crossVectors(cl,ql),t=[xl.x,xl.y,xl.z],_l(t,sl,ml,hl,pl)))}clampPoint(l,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new tl),t.copy(l).clamp(this.min,this.max)}distanceToPoint(l){return rl.copy(l).clamp(this.min,this.max).sub(l).length()}getBoundingSphere(l){return void 0===l&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(l.center),l.radius=.5*this.getSize(rl).length(),l}intersect(l){return this.min.max(l.min),this.max.min(l.max),this.isEmpty()&&this.makeEmpty(),this}union(l){return this.min.min(l.min),this.max.max(l.max),this}applyMatrix4(l){return this.isEmpty()||(al[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(l),al[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(l),al[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(l),al[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(l),al[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(l),al[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(l),al[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(l),al[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(l),this.setFromPoints(al)),this}translate(l){return this.min.add(l),this.max.add(l),this}equals(l){return l.min.equals(this.min)&&l.max.equals(this.max)}}il.prototype.isBox3=!0;const al=[new tl,new tl,new tl,new tl,new tl,new tl,new tl,new tl],rl=new tl,ol=new il,sl=new tl,ml=new tl,hl=new tl,cl=new tl,ql=new tl,ul=new tl,dl=new tl,pl=new tl,xl=new tl,fl=new tl;function _l(l,t,e,n,i){for(let a=0,r=l.length-3;a<=r;a+=3){fl.fromArray(l,a);const r=i.x*Math.abs(fl.x)+i.y*Math.abs(fl.y)+i.z*Math.abs(fl.z),o=t.dot(fl),s=e.dot(fl),m=n.dot(fl);if(Math.max(-Math.max(o,s,m),Math.min(o,s,m))>r)return!1}return!0}const gl=new il,vl=new tl,yl=new tl,bl=new tl;class wl{constructor(l=new tl,t=-1){this.center=l,this.radius=t}set(l,t){return this.center.copy(l),this.radius=t,this}setFromPoints(l,t){const e=this.center;void 0!==t?e.copy(t):gl.setFromPoints(l).getCenter(e);let n=0;for(let t=0,i=l.length;t<i;t++)n=Math.max(n,e.distanceToSquared(l[t]));return this.radius=Math.sqrt(n),this}copy(l){return this.center.copy(l.center),this.radius=l.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(l){return l.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(l){return l.distanceTo(this.center)-this.radius}intersectsSphere(l){const t=this.radius+l.radius;return l.center.distanceToSquared(this.center)<=t*t}intersectsBox(l){return l.intersectsSphere(this)}intersectsPlane(l){return Math.abs(l.distanceToPoint(this.center))<=this.radius}clampPoint(l,t){const e=this.center.distanceToSquared(l);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new tl),t.copy(l),e>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(l){return void 0===l&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),l=new il),this.isEmpty()?(l.makeEmpty(),l):(l.set(this.center,this.center),l.expandByScalar(this.radius),l)}applyMatrix4(l){return this.center.applyMatrix4(l),this.radius=this.radius*l.getMaxScaleOnAxis(),this}translate(l){return this.center.add(l),this}expandByPoint(l){bl.subVectors(l,this.center);const t=bl.lengthSq();if(t>this.radius*this.radius){const l=Math.sqrt(t),e=.5*(l-this.radius);this.center.add(bl.multiplyScalar(e/l)),this.radius+=e}return this}union(l){return yl.subVectors(l.center,this.center).normalize().multiplyScalar(l.radius),this.expandByPoint(vl.copy(l.center).add(yl)),this.expandByPoint(vl.copy(l.center).sub(yl)),this}equals(l){return l.center.equals(this.center)&&l.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ml=new tl,zl=new tl,Sl=new tl,El=new tl,Tl=new tl,Al=new tl,Ll=new tl;class Cl{constructor(l=new tl,t=new tl(0,0,-1)){this.origin=l,this.direction=t}set(l,t){return this.origin.copy(l),this.direction.copy(t),this}copy(l){return this.origin.copy(l.origin),this.direction.copy(l.direction),this}at(l,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new tl),t.copy(this.direction).multiplyScalar(l).add(this.origin)}lookAt(l){return this.direction.copy(l).sub(this.origin).normalize(),this}recast(l){return this.origin.copy(this.at(l,Ml)),this}closestPointToPoint(l,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new tl),t.subVectors(l,this.origin);const e=t.dot(this.direction);return e<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(e).add(this.origin)}distanceToPoint(l){return Math.sqrt(this.distanceSqToPoint(l))}distanceSqToPoint(l){const t=Ml.subVectors(l,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(l):(Ml.copy(this.direction).multiplyScalar(t).add(this.origin),Ml.distanceToSquared(l))}distanceSqToSegment(l,t,e,n){zl.copy(l).add(t).multiplyScalar(.5),Sl.copy(t).sub(l).normalize(),El.copy(this.origin).sub(zl);const i=.5*l.distanceTo(t),a=-this.direction.dot(Sl),r=El.dot(this.direction),o=-El.dot(Sl),s=El.lengthSq(),m=Math.abs(1-a*a);let h,c,q,u;if(m>0)if(h=a*o-r,c=a*r-o,u=i*m,h>=0)if(c>=-u)if(c<=u){const l=1/m;h*=l,c*=l,q=h*(h+a*c+2*r)+c*(a*h+c+2*o)+s}else c=i,h=Math.max(0,-(a*c+r)),q=-h*h+c*(c+2*o)+s;else c=-i,h=Math.max(0,-(a*c+r)),q=-h*h+c*(c+2*o)+s;else c<=-u?(h=Math.max(0,-(-a*i+r)),c=h>0?-i:Math.min(Math.max(-i,-o),i),q=-h*h+c*(c+2*o)+s):c<=u?(h=0,c=Math.min(Math.max(-i,-o),i),q=c*(c+2*o)+s):(h=Math.max(0,-(a*i+r)),c=h>0?i:Math.min(Math.max(-i,-o),i),q=-h*h+c*(c+2*o)+s);else c=a>0?-i:i,h=Math.max(0,-(a*c+r)),q=-h*h+c*(c+2*o)+s;return e&&e.copy(this.direction).multiplyScalar(h).add(this.origin),n&&n.copy(Sl).multiplyScalar(c).add(zl),q}intersectSphere(l,t){Ml.subVectors(l.center,this.origin);const e=Ml.dot(this.direction),n=Ml.dot(Ml)-e*e,i=l.radius*l.radius;if(n>i)return null;const a=Math.sqrt(i-n),r=e-a,o=e+a;return r<0&&o<0?null:r<0?this.at(o,t):this.at(r,t)}intersectsSphere(l){return this.distanceSqToPoint(l.center)<=l.radius*l.radius}distanceToPlane(l){const t=l.normal.dot(this.direction);if(0===t)return 0===l.distanceToPoint(this.origin)?0:null;const e=-(this.origin.dot(l.normal)+l.constant)/t;return e>=0?e:null}intersectPlane(l,t){const e=this.distanceToPlane(l);return null===e?null:this.at(e,t)}intersectsPlane(l){const t=l.distanceToPoint(this.origin);return 0===t||l.normal.dot(this.direction)*t<0}intersectBox(l,t){let e,n,i,a,r,o;const s=1/this.direction.x,m=1/this.direction.y,h=1/this.direction.z,c=this.origin;return s>=0?(e=(l.min.x-c.x)*s,n=(l.max.x-c.x)*s):(e=(l.max.x-c.x)*s,n=(l.min.x-c.x)*s),m>=0?(i=(l.min.y-c.y)*m,a=(l.max.y-c.y)*m):(i=(l.max.y-c.y)*m,a=(l.min.y-c.y)*m),e>a||i>n?null:((i>e||e!=e)&&(e=i),(a<n||n!=n)&&(n=a),h>=0?(r=(l.min.z-c.z)*h,o=(l.max.z-c.z)*h):(r=(l.max.z-c.z)*h,o=(l.min.z-c.z)*h),e>o||r>n?null:((r>e||e!=e)&&(e=r),(o<n||n!=n)&&(n=o),n<0?null:this.at(e>=0?e:n,t)))}intersectsBox(l){return null!==this.intersectBox(l,Ml)}intersectTriangle(l,t,e,n,i){Tl.subVectors(t,l),Al.subVectors(e,l),Ll.crossVectors(Tl,Al);let a,r=this.direction.dot(Ll);if(r>0){if(n)return null;a=1}else{if(!(r<0))return null;a=-1,r=-r}El.subVectors(this.origin,l);const o=a*this.direction.dot(Al.crossVectors(El,Al));if(o<0)return null;const s=a*this.direction.dot(Tl.cross(El));if(s<0)return null;if(o+s>r)return null;const m=-a*El.dot(Ll);return m<0?null:this.at(m/r,i)}applyMatrix4(l){return this.origin.applyMatrix4(l),this.direction.transformDirection(l),this}equals(l){return l.origin.equals(this.origin)&&l.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Rl{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(l,t,e,n,i,a,r,o,s,m,h,c,q,u,d,p){const x=this.elements;return x[0]=l,x[4]=t,x[8]=e,x[12]=n,x[1]=i,x[5]=a,x[9]=r,x[13]=o,x[2]=s,x[6]=m,x[10]=h,x[14]=c,x[3]=q,x[7]=u,x[11]=d,x[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Rl).fromArray(this.elements)}copy(l){const t=this.elements,e=l.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],this}copyPosition(l){const t=this.elements,e=l.elements;return t[12]=e[12],t[13]=e[13],t[14]=e[14],this}setFromMatrix3(l){const t=l.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(l,t,e){return l.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),e.setFromMatrixColumn(this,2),this}makeBasis(l,t,e){return this.set(l.x,t.x,e.x,0,l.y,t.y,e.y,0,l.z,t.z,e.z,0,0,0,0,1),this}extractRotation(l){const t=this.elements,e=l.elements,n=1/Pl.setFromMatrixColumn(l,0).length(),i=1/Pl.setFromMatrixColumn(l,1).length(),a=1/Pl.setFromMatrixColumn(l,2).length();return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=0,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=0,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(l){l&&l.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,e=l.x,n=l.y,i=l.z,a=Math.cos(e),r=Math.sin(e),o=Math.cos(n),s=Math.sin(n),m=Math.cos(i),h=Math.sin(i);if("XYZ"===l.order){const l=a*m,e=a*h,n=r*m,i=r*h;t[0]=o*m,t[4]=-o*h,t[8]=s,t[1]=e+n*s,t[5]=l-i*s,t[9]=-r*o,t[2]=i-l*s,t[6]=n+e*s,t[10]=a*o}else if("YXZ"===l.order){const l=o*m,e=o*h,n=s*m,i=s*h;t[0]=l+i*r,t[4]=n*r-e,t[8]=a*s,t[1]=a*h,t[5]=a*m,t[9]=-r,t[2]=e*r-n,t[6]=i+l*r,t[10]=a*o}else if("ZXY"===l.order){const l=o*m,e=o*h,n=s*m,i=s*h;t[0]=l-i*r,t[4]=-a*h,t[8]=n+e*r,t[1]=e+n*r,t[5]=a*m,t[9]=i-l*r,t[2]=-a*s,t[6]=r,t[10]=a*o}else if("ZYX"===l.order){const l=a*m,e=a*h,n=r*m,i=r*h;t[0]=o*m,t[4]=n*s-e,t[8]=l*s+i,t[1]=o*h,t[5]=i*s+l,t[9]=e*s-n,t[2]=-s,t[6]=r*o,t[10]=a*o}else if("YZX"===l.order){const l=a*o,e=a*s,n=r*o,i=r*s;t[0]=o*m,t[4]=i-l*h,t[8]=n*h+e,t[1]=h,t[5]=a*m,t[9]=-r*m,t[2]=-s*m,t[6]=e*h+n,t[10]=l-i*h}else if("XZY"===l.order){const l=a*o,e=a*s,n=r*o,i=r*s;t[0]=o*m,t[4]=-h,t[8]=s*m,t[1]=l*h+i,t[5]=a*m,t[9]=e*h-n,t[2]=n*h-e,t[6]=r*m,t[10]=i*h+l}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(l){return this.compose(Dl,l,Nl)}lookAt(l,t,e){const n=this.elements;return Fl.subVectors(l,t),0===Fl.lengthSq()&&(Fl.z=1),Fl.normalize(),Ol.crossVectors(e,Fl),0===Ol.lengthSq()&&(1===Math.abs(e.z)?Fl.x+=1e-4:Fl.z+=1e-4,Fl.normalize(),Ol.crossVectors(e,Fl)),Ol.normalize(),Bl.crossVectors(Fl,Ol),n[0]=Ol.x,n[4]=Bl.x,n[8]=Fl.x,n[1]=Ol.y,n[5]=Bl.y,n[9]=Fl.y,n[2]=Ol.z,n[6]=Bl.z,n[10]=Fl.z,this}multiply(l,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(l,t)):this.multiplyMatrices(this,l)}premultiply(l){return this.multiplyMatrices(l,this)}multiplyMatrices(l,t){const e=l.elements,n=t.elements,i=this.elements,a=e[0],r=e[4],o=e[8],s=e[12],m=e[1],h=e[5],c=e[9],q=e[13],u=e[2],d=e[6],p=e[10],x=e[14],f=e[3],_=e[7],g=e[11],v=e[15],y=n[0],b=n[4],w=n[8],M=n[12],z=n[1],S=n[5],E=n[9],T=n[13],A=n[2],L=n[6],C=n[10],R=n[14],P=n[3],I=n[7],D=n[11],N=n[15];return i[0]=a*y+r*z+o*A+s*P,i[4]=a*b+r*S+o*L+s*I,i[8]=a*w+r*E+o*C+s*D,i[12]=a*M+r*T+o*R+s*N,i[1]=m*y+h*z+c*A+q*P,i[5]=m*b+h*S+c*L+q*I,i[9]=m*w+h*E+c*C+q*D,i[13]=m*M+h*T+c*R+q*N,i[2]=u*y+d*z+p*A+x*P,i[6]=u*b+d*S+p*L+x*I,i[10]=u*w+d*E+p*C+x*D,i[14]=u*M+d*T+p*R+x*N,i[3]=f*y+_*z+g*A+v*P,i[7]=f*b+_*S+g*L+v*I,i[11]=f*w+_*E+g*C+v*D,i[15]=f*M+_*T+g*R+v*N,this}multiplyScalar(l){const t=this.elements;return t[0]*=l,t[4]*=l,t[8]*=l,t[12]*=l,t[1]*=l,t[5]*=l,t[9]*=l,t[13]*=l,t[2]*=l,t[6]*=l,t[10]*=l,t[14]*=l,t[3]*=l,t[7]*=l,t[11]*=l,t[15]*=l,this}determinant(){const l=this.elements,t=l[0],e=l[4],n=l[8],i=l[12],a=l[1],r=l[5],o=l[9],s=l[13],m=l[2],h=l[6],c=l[10],q=l[14];return l[3]*(+i*o*h-n*s*h-i*r*c+e*s*c+n*r*q-e*o*q)+l[7]*(+t*o*q-t*s*c+i*a*c-n*a*q+n*s*m-i*o*m)+l[11]*(+t*s*h-t*r*q-i*a*h+e*a*q+i*r*m-e*s*m)+l[15]*(-n*r*m-t*o*h+t*r*c+n*a*h-e*a*c+e*o*m)}transpose(){const l=this.elements;let t;return t=l[1],l[1]=l[4],l[4]=t,t=l[2],l[2]=l[8],l[8]=t,t=l[6],l[6]=l[9],l[9]=t,t=l[3],l[3]=l[12],l[12]=t,t=l[7],l[7]=l[13],l[13]=t,t=l[11],l[11]=l[14],l[14]=t,this}setPosition(l,t,e){const n=this.elements;return l.isVector3?(n[12]=l.x,n[13]=l.y,n[14]=l.z):(n[12]=l,n[13]=t,n[14]=e),this}invert(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],a=l[4],r=l[5],o=l[6],s=l[7],m=l[8],h=l[9],c=l[10],q=l[11],u=l[12],d=l[13],p=l[14],x=l[15],f=h*p*s-d*c*s+d*o*q-r*p*q-h*o*x+r*c*x,_=u*c*s-m*p*s-u*o*q+a*p*q+m*o*x-a*c*x,g=m*d*s-u*h*s+u*r*q-a*d*q-m*r*x+a*h*x,v=u*h*o-m*d*o-u*r*c+a*d*c+m*r*p-a*h*p,y=t*f+e*_+n*g+i*v;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/y;return l[0]=f*b,l[1]=(d*c*i-h*p*i-d*n*q+e*p*q+h*n*x-e*c*x)*b,l[2]=(r*p*i-d*o*i+d*n*s-e*p*s-r*n*x+e*o*x)*b,l[3]=(h*o*i-r*c*i-h*n*s+e*c*s+r*n*q-e*o*q)*b,l[4]=_*b,l[5]=(m*p*i-u*c*i+u*n*q-t*p*q-m*n*x+t*c*x)*b,l[6]=(u*o*i-a*p*i-u*n*s+t*p*s+a*n*x-t*o*x)*b,l[7]=(a*c*i-m*o*i+m*n*s-t*c*s-a*n*q+t*o*q)*b,l[8]=g*b,l[9]=(u*h*i-m*d*i-u*e*q+t*d*q+m*e*x-t*h*x)*b,l[10]=(a*d*i-u*r*i+u*e*s-t*d*s-a*e*x+t*r*x)*b,l[11]=(m*r*i-a*h*i-m*e*s+t*h*s+a*e*q-t*r*q)*b,l[12]=v*b,l[13]=(m*d*n-u*h*n+u*e*c-t*d*c-m*e*p+t*h*p)*b,l[14]=(u*r*n-a*d*n-u*e*o+t*d*o+a*e*p-t*r*p)*b,l[15]=(a*h*n-m*r*n+m*e*o-t*h*o-a*e*c+t*r*c)*b,this}scale(l){const t=this.elements,e=l.x,n=l.y,i=l.z;return t[0]*=e,t[4]*=n,t[8]*=i,t[1]*=e,t[5]*=n,t[9]*=i,t[2]*=e,t[6]*=n,t[10]*=i,t[3]*=e,t[7]*=n,t[11]*=i,this}getMaxScaleOnAxis(){const l=this.elements,t=l[0]*l[0]+l[1]*l[1]+l[2]*l[2],e=l[4]*l[4]+l[5]*l[5]+l[6]*l[6],n=l[8]*l[8]+l[9]*l[9]+l[10]*l[10];return Math.sqrt(Math.max(t,e,n))}makeTranslation(l,t,e){return this.set(1,0,0,l,0,1,0,t,0,0,1,e,0,0,0,1),this}makeRotationX(l){const t=Math.cos(l),e=Math.sin(l);return this.set(1,0,0,0,0,t,-e,0,0,e,t,0,0,0,0,1),this}makeRotationY(l){const t=Math.cos(l),e=Math.sin(l);return this.set(t,0,e,0,0,1,0,0,-e,0,t,0,0,0,0,1),this}makeRotationZ(l){const t=Math.cos(l),e=Math.sin(l);return this.set(t,-e,0,0,e,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(l,t){const e=Math.cos(t),n=Math.sin(t),i=1-e,a=l.x,r=l.y,o=l.z,s=i*a,m=i*r;return this.set(s*a+e,s*r-n*o,s*o+n*r,0,s*r+n*o,m*r+e,m*o-n*a,0,s*o-n*r,m*o+n*a,i*o*o+e,0,0,0,0,1),this}makeScale(l,t,e){return this.set(l,0,0,0,0,t,0,0,0,0,e,0,0,0,0,1),this}makeShear(l,t,e,n,i,a){return this.set(1,e,i,0,l,1,a,0,t,n,1,0,0,0,0,1),this}compose(l,t,e){const n=this.elements,i=t._x,a=t._y,r=t._z,o=t._w,s=i+i,m=a+a,h=r+r,c=i*s,q=i*m,u=i*h,d=a*m,p=a*h,x=r*h,f=o*s,_=o*m,g=o*h,v=e.x,y=e.y,b=e.z;return n[0]=(1-(d+x))*v,n[1]=(q+g)*v,n[2]=(u-_)*v,n[3]=0,n[4]=(q-g)*y,n[5]=(1-(c+x))*y,n[6]=(p+f)*y,n[7]=0,n[8]=(u+_)*b,n[9]=(p-f)*b,n[10]=(1-(c+d))*b,n[11]=0,n[12]=l.x,n[13]=l.y,n[14]=l.z,n[15]=1,this}decompose(l,t,e){const n=this.elements;let i=Pl.set(n[0],n[1],n[2]).length();const a=Pl.set(n[4],n[5],n[6]).length(),r=Pl.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),l.x=n[12],l.y=n[13],l.z=n[14],Il.copy(this);const o=1/i,s=1/a,m=1/r;return Il.elements[0]*=o,Il.elements[1]*=o,Il.elements[2]*=o,Il.elements[4]*=s,Il.elements[5]*=s,Il.elements[6]*=s,Il.elements[8]*=m,Il.elements[9]*=m,Il.elements[10]*=m,t.setFromRotationMatrix(Il),e.x=i,e.y=a,e.z=r,this}makePerspective(l,t,e,n,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const r=this.elements,o=2*i/(t-l),s=2*i/(e-n),m=(t+l)/(t-l),h=(e+n)/(e-n),c=-(a+i)/(a-i),q=-2*a*i/(a-i);return r[0]=o,r[4]=0,r[8]=m,r[12]=0,r[1]=0,r[5]=s,r[9]=h,r[13]=0,r[2]=0,r[6]=0,r[10]=c,r[14]=q,r[3]=0,r[7]=0,r[11]=-1,r[15]=0,this}makeOrthographic(l,t,e,n,i,a){const r=this.elements,o=1/(t-l),s=1/(e-n),m=1/(a-i),h=(t+l)*o,c=(e+n)*s,q=(a+i)*m;return r[0]=2*o,r[4]=0,r[8]=0,r[12]=-h,r[1]=0,r[5]=2*s,r[9]=0,r[13]=-c,r[2]=0,r[6]=0,r[10]=-2*m,r[14]=-q,r[3]=0,r[7]=0,r[11]=0,r[15]=1,this}equals(l){const t=this.elements,e=l.elements;for(let l=0;l<16;l++)if(t[l]!==e[l])return!1;return!0}fromArray(l,t=0){for(let e=0;e<16;e++)this.elements[e]=l[e+t];return this}toArray(l=[],t=0){const e=this.elements;return l[t]=e[0],l[t+1]=e[1],l[t+2]=e[2],l[t+3]=e[3],l[t+4]=e[4],l[t+5]=e[5],l[t+6]=e[6],l[t+7]=e[7],l[t+8]=e[8],l[t+9]=e[9],l[t+10]=e[10],l[t+11]=e[11],l[t+12]=e[12],l[t+13]=e[13],l[t+14]=e[14],l[t+15]=e[15],l}}Rl.prototype.isMatrix4=!0;const Pl=new tl,Il=new Rl,Dl=new tl(0,0,0),Nl=new tl(1,1,1),Ol=new tl,Bl=new tl,Fl=new tl,kl=new Rl,Hl=new ll;class Ul{constructor(l=0,t=0,e=0,n=Ul.DefaultOrder){this._x=l,this._y=t,this._z=e,this._order=n}get x(){return this._x}set x(l){this._x=l,this._onChangeCallback()}get y(){return this._y}set y(l){this._y=l,this._onChangeCallback()}get z(){return this._z}set z(l){this._z=l,this._onChangeCallback()}get order(){return this._order}set order(l){this._order=l,this._onChangeCallback()}set(l,t,e,n){return this._x=l,this._y=t,this._z=e,this._order=n||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(l){return this._x=l._x,this._y=l._y,this._z=l._z,this._order=l._order,this._onChangeCallback(),this}setFromRotationMatrix(l,t,e){const n=l.elements,i=n[0],a=n[4],r=n[8],o=n[1],s=n[5],m=n[9],h=n[2],c=n[6],q=n[10];switch(t=t||this._order){case"XYZ":this._y=Math.asin(F(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(-m,q),this._z=Math.atan2(-a,i)):(this._x=Math.atan2(c,s),this._z=0);break;case"YXZ":this._x=Math.asin(-F(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(r,q),this._z=Math.atan2(o,s)):(this._y=Math.atan2(-h,i),this._z=0);break;case"ZXY":this._x=Math.asin(F(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-h,q),this._z=Math.atan2(-a,s)):(this._y=0,this._z=Math.atan2(o,i));break;case"ZYX":this._y=Math.asin(-F(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(c,q),this._z=Math.atan2(o,i)):(this._x=0,this._z=Math.atan2(-a,s));break;case"YZX":this._z=Math.asin(F(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-m,s),this._y=Math.atan2(-h,i)):(this._x=0,this._y=Math.atan2(r,q));break;case"XZY":this._z=Math.asin(-F(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(c,s),this._y=Math.atan2(r,i)):(this._x=Math.atan2(-m,q),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!1!==e&&this._onChangeCallback(),this}setFromQuaternion(l,t,e){return kl.makeRotationFromQuaternion(l),this.setFromRotationMatrix(kl,t,e)}setFromVector3(l,t){return this.set(l.x,l.y,l.z,t||this._order)}reorder(l){return Hl.setFromEuler(this),this.setFromQuaternion(Hl,l)}equals(l){return l._x===this._x&&l._y===this._y&&l._z===this._z&&l._order===this._order}fromArray(l){return this._x=l[0],this._y=l[1],this._z=l[2],void 0!==l[3]&&(this._order=l[3]),this._onChangeCallback(),this}toArray(l=[],t=0){return l[t]=this._x,l[t+1]=this._y,l[t+2]=this._z,l[t+3]=this._order,l}toVector3(l){return l?l.set(this._x,this._y,this._z):new tl(this._x,this._y,this._z)}_onChange(l){return this._onChangeCallback=l,this}_onChangeCallback(){}}Ul.prototype.isEuler=!0,Ul.DefaultOrder="XYZ",Ul.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Gl{constructor(){this.mask=1}set(l){this.mask=1<<l|0}enable(l){this.mask|=1<<l|0}enableAll(){this.mask=-1}toggle(l){this.mask^=1<<l|0}disable(l){this.mask&=~(1<<l|0)}disableAll(){this.mask=0}test(l){return 0!=(this.mask&l.mask)}}let Vl=0;const Wl=new tl,jl=new ll,Xl=new Rl,Yl=new tl,Jl=new tl,Zl=new tl,Ql=new ll,Kl=new tl(1,0,0),$l=new tl(0,1,0),lt=new tl(0,0,1),tt={type:"added"},et={type:"removed"};class nt extends P{constructor(){super(),Object.defineProperty(this,"id",{value:Vl++}),this.uuid=B(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=nt.DefaultUp.clone();const l=new tl,t=new Ul,e=new ll,n=new tl(1,1,1);t._onChange((function(){e.setFromEuler(t,!1)})),e._onChange((function(){t.setFromQuaternion(e,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:l},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:e},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Rl},normalMatrix:{value:new j}}),this.matrix=new Rl,this.matrixWorld=new Rl,this.matrixAutoUpdate=nt.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Gl,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(l){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(l),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(l){return this.quaternion.premultiply(l),this}setRotationFromAxisAngle(l,t){this.quaternion.setFromAxisAngle(l,t)}setRotationFromEuler(l){this.quaternion.setFromEuler(l,!0)}setRotationFromMatrix(l){this.quaternion.setFromRotationMatrix(l)}setRotationFromQuaternion(l){this.quaternion.copy(l)}rotateOnAxis(l,t){return jl.setFromAxisAngle(l,t),this.quaternion.multiply(jl),this}rotateOnWorldAxis(l,t){return jl.setFromAxisAngle(l,t),this.quaternion.premultiply(jl),this}rotateX(l){return this.rotateOnAxis(Kl,l)}rotateY(l){return this.rotateOnAxis($l,l)}rotateZ(l){return this.rotateOnAxis(lt,l)}translateOnAxis(l,t){return Wl.copy(l).applyQuaternion(this.quaternion),this.position.add(Wl.multiplyScalar(t)),this}translateX(l){return this.translateOnAxis(Kl,l)}translateY(l){return this.translateOnAxis($l,l)}translateZ(l){return this.translateOnAxis(lt,l)}localToWorld(l){return l.applyMatrix4(this.matrixWorld)}worldToLocal(l){return l.applyMatrix4(Xl.copy(this.matrixWorld).invert())}lookAt(l,t,e){l.isVector3?Yl.copy(l):Yl.set(l,t,e);const n=this.parent;this.updateWorldMatrix(!0,!1),Jl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Xl.lookAt(Jl,Yl,this.up):Xl.lookAt(Yl,Jl,this.up),this.quaternion.setFromRotationMatrix(Xl),n&&(Xl.extractRotation(n.matrixWorld),jl.setFromRotationMatrix(Xl),this.quaternion.premultiply(jl.invert()))}add(l){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.add(arguments[l]);return this}return l===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",l),this):(l&&l.isObject3D?(null!==l.parent&&l.parent.remove(l),l.parent=this,this.children.push(l),l.dispatchEvent(tt)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",l),this)}remove(l){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.remove(arguments[l]);return this}const t=this.children.indexOf(l);return-1!==t&&(l.parent=null,this.children.splice(t,1),l.dispatchEvent(et)),this}removeFromParent(){const l=this.parent;return null!==l&&l.remove(this),this}clear(){for(let l=0;l<this.children.length;l++){const t=this.children[l];t.parent=null,t.dispatchEvent(et)}return this.children.length=0,this}attach(l){return this.updateWorldMatrix(!0,!1),Xl.copy(this.matrixWorld).invert(),null!==l.parent&&(l.parent.updateWorldMatrix(!0,!1),Xl.multiply(l.parent.matrixWorld)),l.applyMatrix4(Xl),this.add(l),l.updateWorldMatrix(!1,!0),this}getObjectById(l){return this.getObjectByProperty("id",l)}getObjectByName(l){return this.getObjectByProperty("name",l)}getObjectByProperty(l,t){if(this[l]===t)return this;for(let e=0,n=this.children.length;e<n;e++){const n=this.children[e].getObjectByProperty(l,t);if(void 0!==n)return n}}getWorldPosition(l){return void 0===l&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),l=new tl),this.updateWorldMatrix(!0,!1),l.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(l){return void 0===l&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),l=new ll),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Jl,l,Zl),l}getWorldScale(l){return void 0===l&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),l=new tl),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Jl,Ql,l),l}getWorldDirection(l){void 0===l&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),l=new tl),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return l.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(l){l(this);const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].traverse(l)}traverseVisible(l){if(!1===this.visible)return;l(this);const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].traverseVisible(l)}traverseAncestors(l){const t=this.parent;null!==t&&(l(t),t.traverseAncestors(l))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(l){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||l)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,l=!0);const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateMatrixWorld(l)}updateWorldMatrix(l,t){const e=this.parent;if(!0===l&&null!==e&&e.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const l=this.children;for(let t=0,e=l.length;t<e;t++)l[t].updateWorldMatrix(!1,!0)}}toJSON(l){const t=void 0===l||"string"==typeof l,e={};t&&(l={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function i(t,e){return void 0===t[e.uuid]&&(t[e.uuid]=e.toJSON(l)),e.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isMesh||this.isLine||this.isPoints){n.geometry=i(l.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const e=t.shapes;if(Array.isArray(e))for(let t=0,n=e.length;t<n;t++){const n=e[t];i(l.shapes,n)}else i(l.shapes,e)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(i(l.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let e=0,n=this.material.length;e<n;e++)t.push(i(l.materials,this.material[e]));n.material=t}else n.material=i(l.materials,this.material);if(this.children.length>0){n.children=[];for(let t=0;t<this.children.length;t++)n.children.push(this.children[t].toJSON(l).object)}if(this.animations.length>0){n.animations=[];for(let t=0;t<this.animations.length;t++){const e=this.animations[t];n.animations.push(i(l.animations,e))}}if(t){const t=a(l.geometries),n=a(l.materials),i=a(l.textures),r=a(l.images),o=a(l.shapes),s=a(l.skeletons),m=a(l.animations);t.length>0&&(e.geometries=t),n.length>0&&(e.materials=n),i.length>0&&(e.textures=i),r.length>0&&(e.images=r),o.length>0&&(e.shapes=o),s.length>0&&(e.skeletons=s),m.length>0&&(e.animations=m)}return e.object=n,e;function a(l){const t=[];for(const e in l){const n=l[e];delete n.metadata,t.push(n)}return t}}clone(l){return(new this.constructor).copy(this,l)}copy(l,t=!0){if(this.name=l.name,this.up.copy(l.up),this.position.copy(l.position),this.rotation.order=l.rotation.order,this.quaternion.copy(l.quaternion),this.scale.copy(l.scale),this.matrix.copy(l.matrix),this.matrixWorld.copy(l.matrixWorld),this.matrixAutoUpdate=l.matrixAutoUpdate,this.matrixWorldNeedsUpdate=l.matrixWorldNeedsUpdate,this.layers.mask=l.layers.mask,this.visible=l.visible,this.castShadow=l.castShadow,this.receiveShadow=l.receiveShadow,this.frustumCulled=l.frustumCulled,this.renderOrder=l.renderOrder,this.userData=JSON.parse(JSON.stringify(l.userData)),!0===t)for(let t=0;t<l.children.length;t++){const e=l.children[t];this.add(e.clone())}return this}}nt.DefaultUp=new tl(0,1,0),nt.DefaultMatrixAutoUpdate=!0,nt.prototype.isObject3D=!0;const it=new tl,at=new tl,rt=new j;class ot{constructor(l=new tl(1,0,0),t=0){this.normal=l,this.constant=t}set(l,t){return this.normal.copy(l),this.constant=t,this}setComponents(l,t,e,n){return this.normal.set(l,t,e),this.constant=n,this}setFromNormalAndCoplanarPoint(l,t){return this.normal.copy(l),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(l,t,e){const n=it.subVectors(e,t).cross(at.subVectors(l,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,l),this}copy(l){return this.normal.copy(l.normal),this.constant=l.constant,this}normalize(){const l=1/this.normal.length();return this.normal.multiplyScalar(l),this.constant*=l,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(l){return this.normal.dot(l)+this.constant}distanceToSphere(l){return this.distanceToPoint(l.center)-l.radius}projectPoint(l,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new tl),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(l)).add(l)}intersectLine(l,t){void 0===t&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new tl);const e=l.delta(it),n=this.normal.dot(e);if(0===n)return 0===this.distanceToPoint(l.start)?t.copy(l.start):null;const i=-(l.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:t.copy(e).multiplyScalar(i).add(l.start)}intersectsLine(l){const t=this.distanceToPoint(l.start),e=this.distanceToPoint(l.end);return t<0&&e>0||e<0&&t>0}intersectsBox(l){return l.intersectsPlane(this)}intersectsSphere(l){return l.intersectsPlane(this)}coplanarPoint(l){return void 0===l&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),l=new tl),l.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(l,t){const e=t||rt.getNormalMatrix(l),n=this.coplanarPoint(it).applyMatrix4(l),i=this.normal.applyMatrix3(e).normalize();return this.constant=-n.dot(i),this}translate(l){return this.constant-=l.dot(this.normal),this}equals(l){return l.normal.equals(this.normal)&&l.constant===this.constant}clone(){return(new this.constructor).copy(this)}}ot.prototype.isPlane=!0;const st=new tl,mt=new tl,ht=new tl,ct=new tl,qt=new tl,ut=new tl,dt=new tl,pt=new tl,xt=new tl,ft=new tl;class _t{constructor(l=new tl,t=new tl,e=new tl){this.a=l,this.b=t,this.c=e}static getNormal(l,t,e,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new tl),n.subVectors(e,t),st.subVectors(l,t),n.cross(st);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(l,t,e,n,i){st.subVectors(n,t),mt.subVectors(e,t),ht.subVectors(l,t);const a=st.dot(st),r=st.dot(mt),o=st.dot(ht),s=mt.dot(mt),m=mt.dot(ht),h=a*s-r*r;if(void 0===i&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),i=new tl),0===h)return i.set(-2,-1,-1);const c=1/h,q=(s*o-r*m)*c,u=(a*m-r*o)*c;return i.set(1-q-u,u,q)}static containsPoint(l,t,e,n){return this.getBarycoord(l,t,e,n,ct),ct.x>=0&&ct.y>=0&&ct.x+ct.y<=1}static getUV(l,t,e,n,i,a,r,o){return this.getBarycoord(l,t,e,n,ct),o.set(0,0),o.addScaledVector(i,ct.x),o.addScaledVector(a,ct.y),o.addScaledVector(r,ct.z),o}static isFrontFacing(l,t,e,n){return st.subVectors(e,t),mt.subVectors(l,t),st.cross(mt).dot(n)<0}set(l,t,e){return this.a.copy(l),this.b.copy(t),this.c.copy(e),this}setFromPointsAndIndices(l,t,e,n){return this.a.copy(l[t]),this.b.copy(l[e]),this.c.copy(l[n]),this}clone(){return(new this.constructor).copy(this)}copy(l){return this.a.copy(l.a),this.b.copy(l.b),this.c.copy(l.c),this}getArea(){return st.subVectors(this.c,this.b),mt.subVectors(this.a,this.b),.5*st.cross(mt).length()}getMidpoint(l){return void 0===l&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),l=new tl),l.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(l){return _t.getNormal(this.a,this.b,this.c,l)}getPlane(l){return void 0===l&&(console.warn("THREE.Triangle: .getPlane() target is now required"),l=new ot),l.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(l,t){return _t.getBarycoord(l,this.a,this.b,this.c,t)}getUV(l,t,e,n,i){return _t.getUV(l,this.a,this.b,this.c,t,e,n,i)}containsPoint(l){return _t.containsPoint(l,this.a,this.b,this.c)}isFrontFacing(l){return _t.isFrontFacing(this.a,this.b,this.c,l)}intersectsBox(l){return l.intersectsTriangle(this)}closestPointToPoint(l,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new tl);const e=this.a,n=this.b,i=this.c;let a,r;qt.subVectors(n,e),ut.subVectors(i,e),pt.subVectors(l,e);const o=qt.dot(pt),s=ut.dot(pt);if(o<=0&&s<=0)return t.copy(e);xt.subVectors(l,n);const m=qt.dot(xt),h=ut.dot(xt);if(m>=0&&h<=m)return t.copy(n);const c=o*h-m*s;if(c<=0&&o>=0&&m<=0)return a=o/(o-m),t.copy(e).addScaledVector(qt,a);ft.subVectors(l,i);const q=qt.dot(ft),u=ut.dot(ft);if(u>=0&&q<=u)return t.copy(i);const d=q*s-o*u;if(d<=0&&s>=0&&u<=0)return r=s/(s-u),t.copy(e).addScaledVector(ut,r);const p=m*u-q*h;if(p<=0&&h-m>=0&&q-u>=0)return dt.subVectors(i,n),r=(h-m)/(h-m+(q-u)),t.copy(n).addScaledVector(dt,r);const x=1/(p+d+c);return a=d*x,r=c*x,t.copy(e).addScaledVector(qt,a).addScaledVector(ut,r)}equals(l){return l.a.equals(this.a)&&l.b.equals(this.b)&&l.c.equals(this.c)}}let gt=0;class vt extends P{constructor(){super(),Object.defineProperty(this,"id",{value:gt++}),this.uuid=B(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=r,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=A,this.stencilZFail=A,this.stencilZPass=A,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(l){if(void 0!==l)for(const t in l){const e=l[t];if(void 0===e){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if("shading"===t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e;continue}const n=this[t];void 0!==n?n&&n.isColor?n.set(e):n&&n.isVector3&&e&&e.isVector3?n.copy(e):this[t]=e:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}}toJSON(l){const t=void 0===l||"string"==typeof l;t&&(l={textures:{},images:{}});const e={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(l){const t=[];for(const e in l){const n=l[e];delete n.metadata,t.push(n)}return t}if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),this.color&&this.color.isColor&&(e.color=this.color.getHex()),void 0!==this.roughness&&(e.roughness=this.roughness),void 0!==this.metalness&&(e.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(e.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(e.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(e.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(e.specular=this.specular.getHex()),void 0!==this.shininess&&(e.shininess=this.shininess),void 0!==this.clearcoat&&(e.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(e.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(e.clearcoatMap=this.clearcoatMap.toJSON(l).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(e.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(l).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(e.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(l).uuid,e.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(e.map=this.map.toJSON(l).uuid),this.matcap&&this.matcap.isTexture&&(e.matcap=this.matcap.toJSON(l).uuid),this.alphaMap&&this.alphaMap.isTexture&&(e.alphaMap=this.alphaMap.toJSON(l).uuid),this.lightMap&&this.lightMap.isTexture&&(e.lightMap=this.lightMap.toJSON(l).uuid,e.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(e.aoMap=this.aoMap.toJSON(l).uuid,e.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(e.bumpMap=this.bumpMap.toJSON(l).uuid,e.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(e.normalMap=this.normalMap.toJSON(l).uuid,e.normalMapType=this.normalMapType,e.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(e.displacementMap=this.displacementMap.toJSON(l).uuid,e.displacementScale=this.displacementScale,e.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(e.roughnessMap=this.roughnessMap.toJSON(l).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(e.metalnessMap=this.metalnessMap.toJSON(l).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(e.emissiveMap=this.emissiveMap.toJSON(l).uuid),this.specularMap&&this.specularMap.isTexture&&(e.specularMap=this.specularMap.toJSON(l).uuid),this.envMap&&this.envMap.isTexture&&(e.envMap=this.envMap.toJSON(l).uuid,void 0!==this.combine&&(e.combine=this.combine)),void 0!==this.envMapIntensity&&(e.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(e.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(e.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(e.gradientMap=this.gradientMap.toJSON(l).uuid),void 0!==this.transmission&&(e.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(e.transmissionMap=this.transmissionMap.toJSON(l).uuid),void 0!==this.thickness&&(e.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(e.thicknessMap=this.thicknessMap.toJSON(l).uuid),void 0!==this.attenuationDistance&&(e.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(e.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(e.size=this.size),null!==this.shadowSide&&(e.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(e.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(e.blending=this.blending),0!==this.side&&(e.side=this.side),this.vertexColors&&(e.vertexColors=!0),this.opacity<1&&(e.opacity=this.opacity),!0===this.transparent&&(e.transparent=this.transparent),e.depthFunc=this.depthFunc,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,e.colorWrite=this.colorWrite,e.stencilWrite=this.stencilWrite,e.stencilWriteMask=this.stencilWriteMask,e.stencilFunc=this.stencilFunc,e.stencilRef=this.stencilRef,e.stencilFuncMask=this.stencilFuncMask,e.stencilFail=this.stencilFail,e.stencilZFail=this.stencilZFail,e.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(e.rotation=this.rotation),!0===this.polygonOffset&&(e.polygonOffset=!0),0!==this.polygonOffsetFactor&&(e.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(e.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(e.linewidth=this.linewidth),void 0!==this.dashSize&&(e.dashSize=this.dashSize),void 0!==this.gapSize&&(e.gapSize=this.gapSize),void 0!==this.scale&&(e.scale=this.scale),!0===this.dithering&&(e.dithering=!0),this.alphaTest>0&&(e.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(e.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(e.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(e.wireframe=this.wireframe),this.wireframeLinewidth>1&&(e.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(e.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(e.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(e.morphTargets=!0),!0===this.morphNormals&&(e.morphNormals=!0),!0===this.flatShading&&(e.flatShading=this.flatShading),!1===this.visible&&(e.visible=!1),!1===this.toneMapped&&(e.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),t){const t=n(l.textures),i=n(l.images);t.length>0&&(e.textures=t),i.length>0&&(e.images=i)}return e}clone(){return(new this.constructor).copy(this)}copy(l){this.name=l.name,this.fog=l.fog,this.blending=l.blending,this.side=l.side,this.vertexColors=l.vertexColors,this.opacity=l.opacity,this.transparent=l.transparent,this.blendSrc=l.blendSrc,this.blendDst=l.blendDst,this.blendEquation=l.blendEquation,this.blendSrcAlpha=l.blendSrcAlpha,this.blendDstAlpha=l.blendDstAlpha,this.blendEquationAlpha=l.blendEquationAlpha,this.depthFunc=l.depthFunc,this.depthTest=l.depthTest,this.depthWrite=l.depthWrite,this.stencilWriteMask=l.stencilWriteMask,this.stencilFunc=l.stencilFunc,this.stencilRef=l.stencilRef,this.stencilFuncMask=l.stencilFuncMask,this.stencilFail=l.stencilFail,this.stencilZFail=l.stencilZFail,this.stencilZPass=l.stencilZPass,this.stencilWrite=l.stencilWrite;const t=l.clippingPlanes;let e=null;if(null!==t){const l=t.length;e=new Array(l);for(let n=0;n!==l;++n)e[n]=t[n].clone()}return this.clippingPlanes=e,this.clipIntersection=l.clipIntersection,this.clipShadows=l.clipShadows,this.shadowSide=l.shadowSide,this.colorWrite=l.colorWrite,this.precision=l.precision,this.polygonOffset=l.polygonOffset,this.polygonOffsetFactor=l.polygonOffsetFactor,this.polygonOffsetUnits=l.polygonOffsetUnits,this.dithering=l.dithering,this.alphaTest=l.alphaTest,this.alphaToCoverage=l.alphaToCoverage,this.premultipliedAlpha=l.premultipliedAlpha,this.visible=l.visible,this.toneMapped=l.toneMapped,this.userData=JSON.parse(JSON.stringify(l.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(l){!0===l&&this.version++}}vt.prototype.isMaterial=!0;const yt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},bt={h:0,s:0,l:0},wt={h:0,s:0,l:0};function Mt(l,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?l+6*(t-l)*e:e<.5?t:e<2/3?l+6*(t-l)*(2/3-e):l}function zt(l){return l<.04045?.0773993808*l:Math.pow(.9478672986*l+.0521327014,2.4)}function St(l){return l<.0031308?12.92*l:1.055*Math.pow(l,.41666)-.055}class Et{constructor(l,t,e){return void 0===t&&void 0===e?this.set(l):this.setRGB(l,t,e)}set(l){return l&&l.isColor?this.copy(l):"number"==typeof l?this.setHex(l):"string"==typeof l&&this.setStyle(l),this}setScalar(l){return this.r=l,this.g=l,this.b=l,this}setHex(l){return l=Math.floor(l),this.r=(l>>16&255)/255,this.g=(l>>8&255)/255,this.b=(255&l)/255,this}setRGB(l,t,e){return this.r=l,this.g=t,this.b=e,this}setHSL(l,t,e){if(l=k(l,1),t=F(t,0,1),e=F(e,0,1),0===t)this.r=this.g=this.b=e;else{const n=e<=.5?e*(1+t):e+t-e*t,i=2*e-n;this.r=Mt(i,n,l+1/3),this.g=Mt(i,n,l),this.b=Mt(i,n,l-1/3)}return this}setStyle(l){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+l+" will be ignored.")}let e;if(e=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(l)){let l;const n=e[1],i=e[2];switch(n){case"rgb":case"rgba":if(l=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(l[1],10))/255,this.g=Math.min(255,parseInt(l[2],10))/255,this.b=Math.min(255,parseInt(l[3],10))/255,t(l[4]),this;if(l=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(l[1],10))/100,this.g=Math.min(100,parseInt(l[2],10))/100,this.b=Math.min(100,parseInt(l[3],10))/100,t(l[4]),this;break;case"hsl":case"hsla":if(l=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){const e=parseFloat(l[1])/360,n=parseInt(l[2],10)/100,i=parseInt(l[3],10)/100;return t(l[4]),this.setHSL(e,n,i)}}}else if(e=/^\#([A-Fa-f\d]+)$/.exec(l)){const l=e[1],t=l.length;if(3===t)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===t)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}return l&&l.length>0?this.setColorName(l):this}setColorName(l){const t=yt[l.toLowerCase()];return void 0!==t?this.setHex(t):console.warn("THREE.Color: Unknown color "+l),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(l){return this.r=l.r,this.g=l.g,this.b=l.b,this}copyGammaToLinear(l,t=2){return this.r=Math.pow(l.r,t),this.g=Math.pow(l.g,t),this.b=Math.pow(l.b,t),this}copyLinearToGamma(l,t=2){const e=t>0?1/t:1;return this.r=Math.pow(l.r,e),this.g=Math.pow(l.g,e),this.b=Math.pow(l.b,e),this}convertGammaToLinear(l){return this.copyGammaToLinear(this,l),this}convertLinearToGamma(l){return this.copyLinearToGamma(this,l),this}copySRGBToLinear(l){return this.r=zt(l.r),this.g=zt(l.g),this.b=zt(l.b),this}copyLinearToSRGB(l){return this.r=St(l.r),this.g=St(l.g),this.b=St(l.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(l){void 0===l&&(console.warn("THREE.Color: .getHSL() target is now required"),l={h:0,s:0,l:0});const t=this.r,e=this.g,n=this.b,i=Math.max(t,e,n),a=Math.min(t,e,n);let r,o;const s=(a+i)/2;if(a===i)r=0,o=0;else{const l=i-a;switch(o=s<=.5?l/(i+a):l/(2-i-a),i){case t:r=(e-n)/l+(e<n?6:0);break;case e:r=(n-t)/l+2;break;case n:r=(t-e)/l+4}r/=6}return l.h=r,l.s=o,l.l=s,l}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(l,t,e){return this.getHSL(bt),bt.h+=l,bt.s+=t,bt.l+=e,this.setHSL(bt.h,bt.s,bt.l),this}add(l){return this.r+=l.r,this.g+=l.g,this.b+=l.b,this}addColors(l,t){return this.r=l.r+t.r,this.g=l.g+t.g,this.b=l.b+t.b,this}addScalar(l){return this.r+=l,this.g+=l,this.b+=l,this}sub(l){return this.r=Math.max(0,this.r-l.r),this.g=Math.max(0,this.g-l.g),this.b=Math.max(0,this.b-l.b),this}multiply(l){return this.r*=l.r,this.g*=l.g,this.b*=l.b,this}multiplyScalar(l){return this.r*=l,this.g*=l,this.b*=l,this}lerp(l,t){return this.r+=(l.r-this.r)*t,this.g+=(l.g-this.g)*t,this.b+=(l.b-this.b)*t,this}lerpColors(l,t,e){return this.r=l.r+(t.r-l.r)*e,this.g=l.g+(t.g-l.g)*e,this.b=l.b+(t.b-l.b)*e,this}lerpHSL(l,t){this.getHSL(bt),l.getHSL(wt);const e=H(bt.h,wt.h,t),n=H(bt.s,wt.s,t),i=H(bt.l,wt.l,t);return this.setHSL(e,n,i),this}equals(l){return l.r===this.r&&l.g===this.g&&l.b===this.b}fromArray(l,t=0){return this.r=l[t],this.g=l[t+1],this.b=l[t+2],this}toArray(l=[],t=0){return l[t]=this.r,l[t+1]=this.g,l[t+2]=this.b,l}fromBufferAttribute(l,t){return this.r=l.getX(t),this.g=l.getY(t),this.b=l.getZ(t),!0===l.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Et.NAMES=yt,Et.prototype.isColor=!0,Et.prototype.r=1,Et.prototype.g=1,Et.prototype.b=1;class Tt extends vt{constructor(l){super(),this.type="MeshBasicMaterial",this.color=new Et(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.specularMap=l.specularMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.combine=l.combine,this.reflectivity=l.reflectivity,this.refractionRatio=l.refractionRatio,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.morphTargets=l.morphTargets,this}}Tt.prototype.isMeshBasicMaterial=!0;const At=new tl,Lt=new W;class Ct{constructor(l,t,e){if(Array.isArray(l))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=l,this.itemSize=t,this.count=void 0!==l?l.length/t:0,this.normalized=!0===e,this.usage=L,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(l){!0===l&&this.version++}setUsage(l){return this.usage=l,this}copy(l){return this.name=l.name,this.array=new l.array.constructor(l.array),this.itemSize=l.itemSize,this.count=l.count,this.normalized=l.normalized,this.usage=l.usage,this}copyAt(l,t,e){l*=this.itemSize,e*=t.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[l+n]=t.array[e+n];return this}copyArray(l){return this.array.set(l),this}copyColorsArray(l){const t=this.array;let e=0;for(let n=0,i=l.length;n<i;n++){let i=l[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),i=new Et),t[e++]=i.r,t[e++]=i.g,t[e++]=i.b}return this}copyVector2sArray(l){const t=this.array;let e=0;for(let n=0,i=l.length;n<i;n++){let i=l[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),i=new W),t[e++]=i.x,t[e++]=i.y}return this}copyVector3sArray(l){const t=this.array;let e=0;for(let n=0,i=l.length;n<i;n++){let i=l[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),i=new tl),t[e++]=i.x,t[e++]=i.y,t[e++]=i.z}return this}copyVector4sArray(l){const t=this.array;let e=0;for(let n=0,i=l.length;n<i;n++){let i=l[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),i=new K),t[e++]=i.x,t[e++]=i.y,t[e++]=i.z,t[e++]=i.w}return this}applyMatrix3(l){if(2===this.itemSize)for(let t=0,e=this.count;t<e;t++)Lt.fromBufferAttribute(this,t),Lt.applyMatrix3(l),this.setXY(t,Lt.x,Lt.y);else if(3===this.itemSize)for(let t=0,e=this.count;t<e;t++)At.fromBufferAttribute(this,t),At.applyMatrix3(l),this.setXYZ(t,At.x,At.y,At.z);return this}applyMatrix4(l){for(let t=0,e=this.count;t<e;t++)At.x=this.getX(t),At.y=this.getY(t),At.z=this.getZ(t),At.applyMatrix4(l),this.setXYZ(t,At.x,At.y,At.z);return this}applyNormalMatrix(l){for(let t=0,e=this.count;t<e;t++)At.x=this.getX(t),At.y=this.getY(t),At.z=this.getZ(t),At.applyNormalMatrix(l),this.setXYZ(t,At.x,At.y,At.z);return this}transformDirection(l){for(let t=0,e=this.count;t<e;t++)At.x=this.getX(t),At.y=this.getY(t),At.z=this.getZ(t),At.transformDirection(l),this.setXYZ(t,At.x,At.y,At.z);return this}set(l,t=0){return this.array.set(l,t),this}getX(l){return this.array[l*this.itemSize]}setX(l,t){return this.array[l*this.itemSize]=t,this}getY(l){return this.array[l*this.itemSize+1]}setY(l,t){return this.array[l*this.itemSize+1]=t,this}getZ(l){return this.array[l*this.itemSize+2]}setZ(l,t){return this.array[l*this.itemSize+2]=t,this}getW(l){return this.array[l*this.itemSize+3]}setW(l,t){return this.array[l*this.itemSize+3]=t,this}setXY(l,t,e){return l*=this.itemSize,this.array[l+0]=t,this.array[l+1]=e,this}setXYZ(l,t,e,n){return l*=this.itemSize,this.array[l+0]=t,this.array[l+1]=e,this.array[l+2]=n,this}setXYZW(l,t,e,n,i){return l*=this.itemSize,this.array[l+0]=t,this.array[l+1]=e,this.array[l+2]=n,this.array[l+3]=i,this}onUpload(l){return this.onUploadCallback=l,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const l={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(l.name=this.name),this.usage!==L&&(l.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(l.updateRange=this.updateRange),l}}Ct.prototype.isBufferAttribute=!0;class Rt extends Ct{constructor(l,t,e){super(new Uint16Array(l),t,e)}}class Pt extends Ct{constructor(l,t,e){super(new Uint32Array(l),t,e)}}(class extends Ct{constructor(l,t,e){super(new Uint16Array(l),t,e)}}).prototype.isFloat16BufferAttribute=!0;class It extends Ct{constructor(l,t,e){super(new Float32Array(l),t,e)}}function Dt(l){if(0===l.length)return-1/0;let t=l[0];for(let e=1,n=l.length;e<n;++e)l[e]>t&&(t=l[e]);return t}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;let Nt=0;const Ot=new Rl,Bt=new nt,Ft=new tl,kt=new il,Ht=new il,Ut=new tl;class Gt extends P{constructor(){super(),Object.defineProperty(this,"id",{value:Nt++}),this.uuid=B(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(l){return Array.isArray(l)?this.index=new(Dt(l)>65535?Pt:Rt)(l,1):this.index=l,this}getAttribute(l){return this.attributes[l]}setAttribute(l,t){return this.attributes[l]=t,this}deleteAttribute(l){return delete this.attributes[l],this}hasAttribute(l){return void 0!==this.attributes[l]}addGroup(l,t,e=0){this.groups.push({start:l,count:t,materialIndex:e})}clearGroups(){this.groups=[]}setDrawRange(l,t){this.drawRange.start=l,this.drawRange.count=t}applyMatrix4(l){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(l),t.needsUpdate=!0);const e=this.attributes.normal;if(void 0!==e){const t=(new j).getNormalMatrix(l);e.applyNormalMatrix(t),e.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(l),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(l){return Ot.makeRotationFromQuaternion(l),this.applyMatrix4(Ot),this}rotateX(l){return Ot.makeRotationX(l),this.applyMatrix4(Ot),this}rotateY(l){return Ot.makeRotationY(l),this.applyMatrix4(Ot),this}rotateZ(l){return Ot.makeRotationZ(l),this.applyMatrix4(Ot),this}translate(l,t,e){return Ot.makeTranslation(l,t,e),this.applyMatrix4(Ot),this}scale(l,t,e){return Ot.makeScale(l,t,e),this.applyMatrix4(Ot),this}lookAt(l){return Bt.lookAt(l),Bt.updateMatrix(),this.applyMatrix4(Bt.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ft).negate(),this.translate(Ft.x,Ft.y,Ft.z),this}setFromPoints(l){const t=[];for(let e=0,n=l.length;e<n;e++){const n=l[e];t.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new It(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new il);const l=this.attributes.position,t=this.morphAttributes.position;if(l&&l.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new tl(-1/0,-1/0,-1/0),new tl(1/0,1/0,1/0));if(void 0!==l){if(this.boundingBox.setFromBufferAttribute(l),t)for(let l=0,e=t.length;l<e;l++){const e=t[l];kt.setFromBufferAttribute(e),this.morphTargetsRelative?(Ut.addVectors(this.boundingBox.min,kt.min),this.boundingBox.expandByPoint(Ut),Ut.addVectors(this.boundingBox.max,kt.max),this.boundingBox.expandByPoint(Ut)):(this.boundingBox.expandByPoint(kt.min),this.boundingBox.expandByPoint(kt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new wl);const l=this.attributes.position,t=this.morphAttributes.position;if(l&&l.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new tl,1/0);if(l){const e=this.boundingSphere.center;if(kt.setFromBufferAttribute(l),t)for(let l=0,e=t.length;l<e;l++){const e=t[l];Ht.setFromBufferAttribute(e),this.morphTargetsRelative?(Ut.addVectors(kt.min,Ht.min),kt.expandByPoint(Ut),Ut.addVectors(kt.max,Ht.max),kt.expandByPoint(Ut)):(kt.expandByPoint(Ht.min),kt.expandByPoint(Ht.max))}kt.getCenter(e);let n=0;for(let t=0,i=l.count;t<i;t++)Ut.fromBufferAttribute(l,t),n=Math.max(n,e.distanceToSquared(Ut));if(t)for(let i=0,a=t.length;i<a;i++){const a=t[i],r=this.morphTargetsRelative;for(let t=0,i=a.count;t<i;t++)Ut.fromBufferAttribute(a,t),r&&(Ft.fromBufferAttribute(l,t),Ut.add(Ft)),n=Math.max(n,e.distanceToSquared(Ut))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const l=this.index,t=this.attributes;if(null===l||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const e=l.array,n=t.position.array,i=t.normal.array,a=t.uv.array,r=n.length/3;void 0===t.tangent&&this.setAttribute("tangent",new Ct(new Float32Array(4*r),4));const o=t.tangent.array,s=[],m=[];for(let l=0;l<r;l++)s[l]=new tl,m[l]=new tl;const h=new tl,c=new tl,q=new tl,u=new W,d=new W,p=new W,x=new tl,f=new tl;function _(l,t,e){h.fromArray(n,3*l),c.fromArray(n,3*t),q.fromArray(n,3*e),u.fromArray(a,2*l),d.fromArray(a,2*t),p.fromArray(a,2*e),c.sub(h),q.sub(h),d.sub(u),p.sub(u);const i=1/(d.x*p.y-p.x*d.y);isFinite(i)&&(x.copy(c).multiplyScalar(p.y).addScaledVector(q,-d.y).multiplyScalar(i),f.copy(q).multiplyScalar(d.x).addScaledVector(c,-p.x).multiplyScalar(i),s[l].add(x),s[t].add(x),s[e].add(x),m[l].add(f),m[t].add(f),m[e].add(f))}let g=this.groups;0===g.length&&(g=[{start:0,count:e.length}]);for(let l=0,t=g.length;l<t;++l){const t=g[l],n=t.start;for(let l=n,i=n+t.count;l<i;l+=3)_(e[l+0],e[l+1],e[l+2])}const v=new tl,y=new tl,b=new tl,w=new tl;function M(l){b.fromArray(i,3*l),w.copy(b);const t=s[l];v.copy(t),v.sub(b.multiplyScalar(b.dot(t))).normalize(),y.crossVectors(w,t);const e=y.dot(m[l])<0?-1:1;o[4*l]=v.x,o[4*l+1]=v.y,o[4*l+2]=v.z,o[4*l+3]=e}for(let l=0,t=g.length;l<t;++l){const t=g[l],n=t.start;for(let l=n,i=n+t.count;l<i;l+=3)M(e[l+0]),M(e[l+1]),M(e[l+2])}}computeVertexNormals(){const l=this.index,t=this.getAttribute("position");if(void 0!==t){let e=this.getAttribute("normal");if(void 0===e)e=new Ct(new Float32Array(3*t.count),3),this.setAttribute("normal",e);else for(let l=0,t=e.count;l<t;l++)e.setXYZ(l,0,0,0);const n=new tl,i=new tl,a=new tl,r=new tl,o=new tl,s=new tl,m=new tl,h=new tl;if(l)for(let c=0,q=l.count;c<q;c+=3){const q=l.getX(c+0),u=l.getX(c+1),d=l.getX(c+2);n.fromBufferAttribute(t,q),i.fromBufferAttribute(t,u),a.fromBufferAttribute(t,d),m.subVectors(a,i),h.subVectors(n,i),m.cross(h),r.fromBufferAttribute(e,q),o.fromBufferAttribute(e,u),s.fromBufferAttribute(e,d),r.add(m),o.add(m),s.add(m),e.setXYZ(q,r.x,r.y,r.z),e.setXYZ(u,o.x,o.y,o.z),e.setXYZ(d,s.x,s.y,s.z)}else for(let l=0,r=t.count;l<r;l+=3)n.fromBufferAttribute(t,l+0),i.fromBufferAttribute(t,l+1),a.fromBufferAttribute(t,l+2),m.subVectors(a,i),h.subVectors(n,i),m.cross(h),e.setXYZ(l+0,m.x,m.y,m.z),e.setXYZ(l+1,m.x,m.y,m.z),e.setXYZ(l+2,m.x,m.y,m.z);this.normalizeNormals(),e.needsUpdate=!0}}merge(l,t){if(!l||!l.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",l);void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const e=this.attributes;for(const n in e){if(void 0===l.attributes[n])continue;const i=e[n].array,a=l.attributes[n],r=a.array,o=a.itemSize*t,s=Math.min(r.length,i.length-o);for(let l=0,t=o;l<s;l++,t++)i[t]=r[l]}return this}normalizeNormals(){const l=this.attributes.normal;for(let t=0,e=l.count;t<e;t++)Ut.fromBufferAttribute(l,t),Ut.normalize(),l.setXYZ(t,Ut.x,Ut.y,Ut.z)}toNonIndexed(){function l(l,t){const e=l.array,n=l.itemSize,i=l.normalized,a=new e.constructor(t.length*n);let r=0,o=0;for(let l=0,i=t.length;l<i;l++){r=t[l]*n;for(let l=0;l<n;l++)a[o++]=e[r++]}return new Ct(a,n,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Gt,e=this.index.array,n=this.attributes;for(const i in n){const a=l(n[i],e);t.setAttribute(i,a)}const i=this.morphAttributes;for(const n in i){const a=[],r=i[n];for(let t=0,n=r.length;t<n;t++){const n=l(r[t],e);a.push(n)}t.morphAttributes[n]=a}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let l=0,e=a.length;l<e;l++){const e=a[l];t.addGroup(e.start,e.count,e.materialIndex)}return t}toJSON(){const l={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(l.uuid=this.uuid,l.type=this.type,""!==this.name&&(l.name=this.name),Object.keys(this.userData).length>0&&(l.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const e in t)void 0!==t[e]&&(l[e]=t[e]);return l}l.data={attributes:{}};const t=this.index;null!==t&&(l.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const e=this.attributes;for(const t in e){const n=e[t];l.data.attributes[t]=n.toJSON(l.data)}const n={};let i=!1;for(const t in this.morphAttributes){const e=this.morphAttributes[t],a=[];for(let t=0,n=e.length;t<n;t++){const n=e[t];a.push(n.toJSON(l.data))}a.length>0&&(n[t]=a,i=!0)}i&&(l.data.morphAttributes=n,l.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(l.data.groups=JSON.parse(JSON.stringify(a)));const r=this.boundingSphere;return null!==r&&(l.data.boundingSphere={center:r.center.toArray(),radius:r.radius}),l}clone(){return(new Gt).copy(this)}copy(l){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=l.name;const e=l.index;null!==e&&this.setIndex(e.clone(t));const n=l.attributes;for(const l in n){const e=n[l];this.setAttribute(l,e.clone(t))}const i=l.morphAttributes;for(const l in i){const e=[],n=i[l];for(let l=0,i=n.length;l<i;l++)e.push(n[l].clone(t));this.morphAttributes[l]=e}this.morphTargetsRelative=l.morphTargetsRelative;const a=l.groups;for(let l=0,t=a.length;l<t;l++){const t=a[l];this.addGroup(t.start,t.count,t.materialIndex)}const r=l.boundingBox;null!==r&&(this.boundingBox=r.clone());const o=l.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=l.drawRange.start,this.drawRange.count=l.drawRange.count,this.userData=l.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}Gt.prototype.isBufferGeometry=!0;const Vt=new Rl,Wt=new Cl,jt=new wl,Xt=new tl,Yt=new tl,Jt=new tl,Zt=new tl,Qt=new tl,Kt=new tl,$t=new tl,le=new tl,te=new tl,ee=new W,ne=new W,ie=new W,ae=new tl,re=new tl;class oe extends nt{constructor(l=new Gt,t=new Tt){super(),this.type="Mesh",this.geometry=l,this.material=t,this.updateMorphTargets()}copy(l){return super.copy(l),void 0!==l.morphTargetInfluences&&(this.morphTargetInfluences=l.morphTargetInfluences.slice()),void 0!==l.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},l.morphTargetDictionary)),this.material=l.material,this.geometry=l.geometry,this}updateMorphTargets(){const l=this.geometry;if(l.isBufferGeometry){const t=l.morphAttributes,e=Object.keys(t);if(e.length>0){const l=t[e[0]];if(void 0!==l){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=l.length;t<e;t++){const e=l[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}else{const t=l.morphTargets;void 0!==t&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(l,t){const e=this.geometry,n=this.material,i=this.matrixWorld;if(void 0===n)return;if(null===e.boundingSphere&&e.computeBoundingSphere(),jt.copy(e.boundingSphere),jt.applyMatrix4(i),!1===l.ray.intersectsSphere(jt))return;if(Vt.copy(i).invert(),Wt.copy(l.ray).applyMatrix4(Vt),null!==e.boundingBox&&!1===Wt.intersectsBox(e.boundingBox))return;let a;if(e.isBufferGeometry){const i=e.index,r=e.attributes.position,o=e.morphAttributes.position,s=e.morphTargetsRelative,m=e.attributes.uv,h=e.attributes.uv2,c=e.groups,q=e.drawRange;if(null!==i)if(Array.isArray(n))for(let e=0,u=c.length;e<u;e++){const u=c[e],d=n[u.materialIndex];for(let e=Math.max(u.start,q.start),n=Math.min(u.start+u.count,q.start+q.count);e<n;e+=3){const n=i.getX(e),c=i.getX(e+1),q=i.getX(e+2);a=se(this,d,l,Wt,r,o,s,m,h,n,c,q),a&&(a.faceIndex=Math.floor(e/3),a.face.materialIndex=u.materialIndex,t.push(a))}}else for(let e=Math.max(0,q.start),c=Math.min(i.count,q.start+q.count);e<c;e+=3){const c=i.getX(e),q=i.getX(e+1),u=i.getX(e+2);a=se(this,n,l,Wt,r,o,s,m,h,c,q,u),a&&(a.faceIndex=Math.floor(e/3),t.push(a))}else if(void 0!==r)if(Array.isArray(n))for(let e=0,i=c.length;e<i;e++){const i=c[e],u=n[i.materialIndex];for(let e=Math.max(i.start,q.start),n=Math.min(i.start+i.count,q.start+q.count);e<n;e+=3)a=se(this,u,l,Wt,r,o,s,m,h,e,e+1,e+2),a&&(a.faceIndex=Math.floor(e/3),a.face.materialIndex=i.materialIndex,t.push(a))}else for(let e=Math.max(0,q.start),i=Math.min(r.count,q.start+q.count);e<i;e+=3)a=se(this,n,l,Wt,r,o,s,m,h,e,e+1,e+2),a&&(a.faceIndex=Math.floor(e/3),t.push(a))}else e.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function se(l,t,e,n,i,a,r,o,s,m,h,c){Xt.fromBufferAttribute(i,m),Yt.fromBufferAttribute(i,h),Jt.fromBufferAttribute(i,c);const q=l.morphTargetInfluences;if(t.morphTargets&&a&&q){$t.set(0,0,0),le.set(0,0,0),te.set(0,0,0);for(let l=0,t=a.length;l<t;l++){const t=q[l],e=a[l];0!==t&&(Zt.fromBufferAttribute(e,m),Qt.fromBufferAttribute(e,h),Kt.fromBufferAttribute(e,c),r?($t.addScaledVector(Zt,t),le.addScaledVector(Qt,t),te.addScaledVector(Kt,t)):($t.addScaledVector(Zt.sub(Xt),t),le.addScaledVector(Qt.sub(Yt),t),te.addScaledVector(Kt.sub(Jt),t)))}Xt.add($t),Yt.add(le),Jt.add(te)}l.isSkinnedMesh&&(l.boneTransform(m,Xt),l.boneTransform(h,Yt),l.boneTransform(c,Jt));const u=function(l,t,e,n,i,a,r,o){let s;if(s=1===t.side?n.intersectTriangle(r,a,i,!0,o):n.intersectTriangle(i,a,r,2!==t.side,o),null===s)return null;re.copy(o),re.applyMatrix4(l.matrixWorld);const m=e.ray.origin.distanceTo(re);return m<e.near||m>e.far?null:{distance:m,point:re.clone(),object:l}}(l,t,e,n,Xt,Yt,Jt,ae);if(u){o&&(ee.fromBufferAttribute(o,m),ne.fromBufferAttribute(o,h),ie.fromBufferAttribute(o,c),u.uv=_t.getUV(ae,Xt,Yt,Jt,ee,ne,ie,new W)),s&&(ee.fromBufferAttribute(s,m),ne.fromBufferAttribute(s,h),ie.fromBufferAttribute(s,c),u.uv2=_t.getUV(ae,Xt,Yt,Jt,ee,ne,ie,new W));const l={a:m,b:h,c,normal:new tl,materialIndex:0};_t.getNormal(Xt,Yt,Jt,l.normal),u.face=l}return u}oe.prototype.isMesh=!0;class me extends Gt{constructor(l=1,t=1,e=1,n=1,i=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:l,height:t,depth:e,widthSegments:n,heightSegments:i,depthSegments:a};const r=this;n=Math.floor(n),i=Math.floor(i),a=Math.floor(a);const o=[],s=[],m=[],h=[];let c=0,q=0;function u(l,t,e,n,i,a,u,d,p,x,f){const _=a/p,g=u/x,v=a/2,y=u/2,b=d/2,w=p+1,M=x+1;let z=0,S=0;const E=new tl;for(let a=0;a<M;a++){const r=a*g-y;for(let o=0;o<w;o++){const c=o*_-v;E[l]=c*n,E[t]=r*i,E[e]=b,s.push(E.x,E.y,E.z),E[l]=0,E[t]=0,E[e]=d>0?1:-1,m.push(E.x,E.y,E.z),h.push(o/p),h.push(1-a/x),z+=1}}for(let l=0;l<x;l++)for(let t=0;t<p;t++){const e=c+t+w*l,n=c+t+w*(l+1),i=c+(t+1)+w*(l+1),a=c+(t+1)+w*l;o.push(e,n,a),o.push(n,i,a),S+=6}r.addGroup(q,S,f),q+=S,c+=z}u("z","y","x",-1,-1,e,t,l,a,i,0),u("z","y","x",1,-1,e,t,-l,a,i,1),u("x","z","y",1,1,l,e,t,n,a,2),u("x","z","y",1,-1,l,e,-t,n,a,3),u("x","y","z",1,-1,l,t,e,n,i,4),u("x","y","z",-1,-1,l,t,-e,n,i,5),this.setIndex(o),this.setAttribute("position",new It(s,3)),this.setAttribute("normal",new It(m,3)),this.setAttribute("uv",new It(h,2))}}function he(l){const t={};for(const e in l){t[e]={};for(const n in l[e]){const i=l[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function ce(l){const t={};for(let e=0;e<l.length;e++){const n=he(l[e]);for(const l in n)t[l]=n[l]}return t}const qe={clone:he,merge:ce};class ue extends vt{constructor(l){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==l&&(void 0!==l.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(l))}copy(l){return super.copy(l),this.fragmentShader=l.fragmentShader,this.vertexShader=l.vertexShader,this.uniforms=he(l.uniforms),this.defines=Object.assign({},l.defines),this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.lights=l.lights,this.clipping=l.clipping,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this.extensions=Object.assign({},l.extensions),this.glslVersion=l.glslVersion,this}toJSON(l){const t=super.toJSON(l);t.glslVersion=this.glslVersion,t.uniforms={};for(const e in this.uniforms){const n=this.uniforms[e].value;n&&n.isTexture?t.uniforms[e]={type:"t",value:n.toJSON(l).uuid}:n&&n.isColor?t.uniforms[e]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[e]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[e]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[e]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[e]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[e]={type:"m4",value:n.toArray()}:t.uniforms[e]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const e={};for(const l in this.extensions)!0===this.extensions[l]&&(e[l]=!0);return Object.keys(e).length>0&&(t.extensions=e),t}}ue.prototype.isShaderMaterial=!0;class de extends nt{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Rl,this.projectionMatrix=new Rl,this.projectionMatrixInverse=new Rl}copy(l,t){return super.copy(l,t),this.matrixWorldInverse.copy(l.matrixWorldInverse),this.projectionMatrix.copy(l.projectionMatrix),this.projectionMatrixInverse.copy(l.projectionMatrixInverse),this}getWorldDirection(l){void 0===l&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),l=new tl),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return l.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(l){super.updateMatrixWorld(l),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(l,t){super.updateWorldMatrix(l,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}de.prototype.isCamera=!0;class pe extends de{constructor(l=50,t=1,e=.1,n=2e3){super(),this.type="PerspectiveCamera",this.fov=l,this.zoom=1,this.near=e,this.far=n,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(l,t){return super.copy(l,t),this.fov=l.fov,this.zoom=l.zoom,this.near=l.near,this.far=l.far,this.focus=l.focus,this.aspect=l.aspect,this.view=null===l.view?null:Object.assign({},l.view),this.filmGauge=l.filmGauge,this.filmOffset=l.filmOffset,this}setFocalLength(l){const t=.5*this.getFilmHeight()/l;this.fov=2*O*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const l=Math.tan(.5*N*this.fov);return.5*this.getFilmHeight()/l}getEffectiveFOV(){return 2*O*Math.atan(Math.tan(.5*N*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(l,t,e,n,i,a){this.aspect=l/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=l,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const l=this.near;let t=l*Math.tan(.5*N*this.fov)/this.zoom,e=2*t,n=this.aspect*e,i=-.5*n;const a=this.view;if(null!==this.view&&this.view.enabled){const l=a.fullWidth,r=a.fullHeight;i+=a.offsetX*n/l,t-=a.offsetY*e/r,n*=a.width/l,e*=a.height/r}const r=this.filmOffset;0!==r&&(i+=l*r/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,t,t-e,l,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(l){const t=super.toJSON(l);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}pe.prototype.isPerspectiveCamera=!0;const xe=90;class fe extends nt{constructor(l,t,e){if(super(),this.type="CubeCamera",!0!==e.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=e;const n=new pe(xe,1,l,t);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new tl(1,0,0)),this.add(n);const i=new pe(xe,1,l,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new tl(-1,0,0)),this.add(i);const a=new pe(xe,1,l,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new tl(0,1,0)),this.add(a);const r=new pe(xe,1,l,t);r.layers=this.layers,r.up.set(0,0,-1),r.lookAt(new tl(0,-1,0)),this.add(r);const o=new pe(xe,1,l,t);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new tl(0,0,1)),this.add(o);const s=new pe(xe,1,l,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new tl(0,0,-1)),this.add(s)}update(l,t){null===this.parent&&this.updateMatrixWorld();const e=this.renderTarget,[n,i,a,r,o,s]=this.children,m=l.xr.enabled,h=l.getRenderTarget();l.xr.enabled=!1;const c=e.texture.generateMipmaps;e.texture.generateMipmaps=!1,l.setRenderTarget(e,0),l.render(t,n),l.setRenderTarget(e,1),l.render(t,i),l.setRenderTarget(e,2),l.render(t,a),l.setRenderTarget(e,3),l.render(t,r),l.setRenderTarget(e,4),l.render(t,o),e.texture.generateMipmaps=c,l.setRenderTarget(e,5),l.render(t,s),l.setRenderTarget(h),l.xr.enabled=m}}class _e extends Z{constructor(l,t,e,n,i,a,r,o,s,m){super(l=void 0!==l?l:[],t=void 0!==t?t:301,e,n,i,a,r=void 0!==r?r:_,o,s,m),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(l){this.image=l}}_e.prototype.isCubeTexture=!0;class ge extends ${constructor(l,t,e){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=e),super(l,l,t),t=t||{},this.texture=new _e(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:c,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(l,t){this.texture.type=t.type,this.texture.format=g,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const e={tEquirect:{value:null}},n="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",i="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",a=new me(5,5,5),r=new ue({name:"CubemapFromEquirect",uniforms:he(e),vertexShader:n,fragmentShader:i,side:1,blending:0});r.uniforms.tEquirect.value=t;const o=new oe(a,r),s=t.minFilter;return t.minFilter===q&&(t.minFilter=c),new fe(1,10,this).update(l,o),t.minFilter=s,o.geometry.dispose(),o.material.dispose(),this}clear(l,t,e,n){const i=l.getRenderTarget();for(let i=0;i<6;i++)l.setRenderTarget(this,i),l.clear(t,e,n);l.setRenderTarget(i)}}ge.prototype.isWebGLCubeRenderTarget=!0;const ve=new wl,ye=new tl;class be{constructor(l=new ot,t=new ot,e=new ot,n=new ot,i=new ot,a=new ot){this.planes=[l,t,e,n,i,a]}set(l,t,e,n,i,a){const r=this.planes;return r[0].copy(l),r[1].copy(t),r[2].copy(e),r[3].copy(n),r[4].copy(i),r[5].copy(a),this}copy(l){const t=this.planes;for(let e=0;e<6;e++)t[e].copy(l.planes[e]);return this}setFromProjectionMatrix(l){const t=this.planes,e=l.elements,n=e[0],i=e[1],a=e[2],r=e[3],o=e[4],s=e[5],m=e[6],h=e[7],c=e[8],q=e[9],u=e[10],d=e[11],p=e[12],x=e[13],f=e[14],_=e[15];return t[0].setComponents(r-n,h-o,d-c,_-p).normalize(),t[1].setComponents(r+n,h+o,d+c,_+p).normalize(),t[2].setComponents(r+i,h+s,d+q,_+x).normalize(),t[3].setComponents(r-i,h-s,d-q,_-x).normalize(),t[4].setComponents(r-a,h-m,d-u,_-f).normalize(),t[5].setComponents(r+a,h+m,d+u,_+f).normalize(),this}intersectsObject(l){const t=l.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),ve.copy(t.boundingSphere).applyMatrix4(l.matrixWorld),this.intersectsSphere(ve)}intersectsSprite(l){return ve.center.set(0,0,0),ve.radius=.7071067811865476,ve.applyMatrix4(l.matrixWorld),this.intersectsSphere(ve)}intersectsSphere(l){const t=this.planes,e=l.center,n=-l.radius;for(let l=0;l<6;l++)if(t[l].distanceToPoint(e)<n)return!1;return!0}intersectsBox(l){const t=this.planes;for(let e=0;e<6;e++){const n=t[e];if(ye.x=n.normal.x>0?l.max.x:l.min.x,ye.y=n.normal.y>0?l.max.y:l.min.y,ye.z=n.normal.z>0?l.max.z:l.min.z,n.distanceToPoint(ye)<0)return!1}return!0}containsPoint(l){const t=this.planes;for(let e=0;e<6;e++)if(t[e].distanceToPoint(l)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function we(){let l=null,t=!1,e=null,n=null;function i(t,a){e(t,a),n=l.requestAnimationFrame(i)}return{start:function(){!0!==t&&null!==e&&(n=l.requestAnimationFrame(i),t=!0)},stop:function(){l.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(l){e=l},setContext:function(t){l=t}}}function Me(l,t){const e=t.isWebGL2,n=new WeakMap;return{get:function(l){return l.isInterleavedBufferAttribute&&(l=l.data),n.get(l)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const e=n.get(t);e&&(l.deleteBuffer(e.buffer),n.delete(t))},update:function(t,i){if(t.isGLBufferAttribute){const l=n.get(t);return void((!l||l.version<t.version)&&n.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const a=n.get(t);void 0===a?n.set(t,function(t,n){const i=t.array,a=t.usage,r=l.createBuffer();l.bindBuffer(n,r),l.bufferData(n,i,a),t.onUploadCallback();let o=5126;return i instanceof Float32Array?o=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?t.isFloat16BufferAttribute?e?o=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):o=5123:i instanceof Int16Array?o=5122:i instanceof Uint32Array?o=5125:i instanceof Int32Array?o=5124:i instanceof Int8Array?o=5120:(i instanceof Uint8Array||i instanceof Uint8ClampedArray)&&(o=5121),{buffer:r,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:t.version}}(t,i)):a.version<t.version&&(function(t,n,i){const a=n.array,r=n.updateRange;l.bindBuffer(i,t),-1===r.count?l.bufferSubData(i,0,a):(e?l.bufferSubData(i,r.offset*a.BYTES_PER_ELEMENT,a,r.offset,r.count):l.bufferSubData(i,r.offset*a.BYTES_PER_ELEMENT,a.subarray(r.offset,r.offset+r.count)),r.count=-1)}(a.buffer,t,i),a.version=t.version)}}}class ze extends Gt{constructor(l=1,t=1,e=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:l,height:t,widthSegments:e,heightSegments:n};const i=l/2,a=t/2,r=Math.floor(e),o=Math.floor(n),s=r+1,m=o+1,h=l/r,c=t/o,q=[],u=[],d=[],p=[];for(let l=0;l<m;l++){const t=l*c-a;for(let e=0;e<s;e++){const n=e*h-i;u.push(n,-t,0),d.push(0,0,1),p.push(e/r),p.push(1-l/o)}}for(let l=0;l<o;l++)for(let t=0;t<r;t++){const e=t+s*l,n=t+s*(l+1),i=t+1+s*(l+1),a=t+1+s*l;q.push(e,n,a),q.push(n,i,a)}this.setIndex(q),this.setAttribute("position",new It(u,3)),this.setAttribute("normal",new It(d,3)),this.setAttribute("uv",new It(p,2))}}const Se={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSNMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\n\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\n\tvec3 f90 = vec3( 1.0 );\n\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\n\t\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance);\n\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec4 vWorldPosition;\n\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\n\t\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\n\t\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\n\t\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\n\t\treturn normalize(refractionVector) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness(float roughness, float ior) {\n\t\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\n\t}\n\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\n\t\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\n\t\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\n\t}\n\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\n\t\tif (attenuationDistance == 0.0) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\n\t\t\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\n\t\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\n\t\tfloat NdotV = saturate(dot(n, viewDir));\n\t\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\n\t\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\n\t\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform vec3 attenuationColor;\n\tuniform float attenuationDistance;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <transmission_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef USE_TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t\tfloat thicknessFactor = thickness;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\tvec3 rawDiffuseColor = diffuseColor.rgb;\n\t#include <transmission_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#ifdef USE_TRANSMISSION\n\tvarying vec4 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition;\n#endif\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Ee={common:{diffuse:{value:new Et(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new j},uv2Transform:{value:new j},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new W(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Et(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Et(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new j}},sprite:{diffuse:{value:new Et(16777215)},opacity:{value:1},center:{value:new W(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new j}}},Te={basic:{uniforms:ce([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.fog]),vertexShader:Se.meshbasic_vert,fragmentShader:Se.meshbasic_frag},lambert:{uniforms:ce([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.fog,Ee.lights,{emissive:{value:new Et(0)}}]),vertexShader:Se.meshlambert_vert,fragmentShader:Se.meshlambert_frag},phong:{uniforms:ce([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.fog,Ee.lights,{emissive:{value:new Et(0)},specular:{value:new Et(1118481)},shininess:{value:30}}]),vertexShader:Se.meshphong_vert,fragmentShader:Se.meshphong_frag},standard:{uniforms:ce([Ee.common,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.roughnessmap,Ee.metalnessmap,Ee.fog,Ee.lights,{emissive:{value:new Et(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Se.meshphysical_vert,fragmentShader:Se.meshphysical_frag},toon:{uniforms:ce([Ee.common,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.gradientmap,Ee.fog,Ee.lights,{emissive:{value:new Et(0)}}]),vertexShader:Se.meshtoon_vert,fragmentShader:Se.meshtoon_frag},matcap:{uniforms:ce([Ee.common,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.fog,{matcap:{value:null}}]),vertexShader:Se.meshmatcap_vert,fragmentShader:Se.meshmatcap_frag},points:{uniforms:ce([Ee.points,Ee.fog]),vertexShader:Se.points_vert,fragmentShader:Se.points_frag},dashed:{uniforms:ce([Ee.common,Ee.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Se.linedashed_vert,fragmentShader:Se.linedashed_frag},depth:{uniforms:ce([Ee.common,Ee.displacementmap]),vertexShader:Se.depth_vert,fragmentShader:Se.depth_frag},normal:{uniforms:ce([Ee.common,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,{opacity:{value:1}}]),vertexShader:Se.normal_vert,fragmentShader:Se.normal_frag},sprite:{uniforms:ce([Ee.sprite,Ee.fog]),vertexShader:Se.sprite_vert,fragmentShader:Se.sprite_frag},background:{uniforms:{uvTransform:{value:new j},t2D:{value:null}},vertexShader:Se.background_vert,fragmentShader:Se.background_frag},cube:{uniforms:ce([Ee.envmap,{opacity:{value:1}}]),vertexShader:Se.cube_vert,fragmentShader:Se.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Se.equirect_vert,fragmentShader:Se.equirect_frag},distanceRGBA:{uniforms:ce([Ee.common,Ee.displacementmap,{referencePosition:{value:new tl},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Se.distanceRGBA_vert,fragmentShader:Se.distanceRGBA_frag},shadow:{uniforms:ce([Ee.lights,Ee.fog,{color:{value:new Et(0)},opacity:{value:1}}]),vertexShader:Se.shadow_vert,fragmentShader:Se.shadow_frag}};function Ae(l,t,e,n,i){const a=new Et(0);let r,o,s=0,m=null,h=0,c=null;function q(l,t){e.buffers.color.setClear(l.r,l.g,l.b,t,i)}return{getClearColor:function(){return a},setClearColor:function(l,t=1){a.set(l),s=t,q(a,s)},getClearAlpha:function(){return s},setClearAlpha:function(l){s=l,q(a,s)},render:function(e,i){let u=!1,d=!0===i.isScene?i.background:null;d&&d.isTexture&&(d=t.get(d));const p=l.xr,x=p.getSession&&p.getSession();x&&"additive"===x.environmentBlendMode&&(d=null),null===d?q(a,s):d&&d.isColor&&(q(d,1),u=!0),(l.autoClear||u)&&l.clear(l.autoClearColor,l.autoClearDepth,l.autoClearStencil),d&&(d.isCubeTexture||306===d.mapping)?(void 0===o&&(o=new oe(new me(1,1,1),new ue({name:"BackgroundCubeMaterial",uniforms:he(Te.cube.uniforms),vertexShader:Te.cube.vertexShader,fragmentShader:Te.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),o.geometry.deleteAttribute("uv"),o.onBeforeRender=function(l,t,e){this.matrixWorld.copyPosition(e.matrixWorld)},Object.defineProperty(o.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(o)),o.material.uniforms.envMap.value=d,o.material.uniforms.flipEnvMap.value=d.isCubeTexture&&d._needsFlipEnvMap?-1:1,m===d&&h===d.version&&c===l.toneMapping||(o.material.needsUpdate=!0,m=d,h=d.version,c=l.toneMapping),e.unshift(o,o.geometry,o.material,0,0,null)):d&&d.isTexture&&(void 0===r&&(r=new oe(new ze(2,2),new ue({name:"BackgroundMaterial",uniforms:he(Te.background.uniforms),vertexShader:Te.background.vertexShader,fragmentShader:Te.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),r.geometry.deleteAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(r)),r.material.uniforms.t2D.value=d,!0===d.matrixAutoUpdate&&d.updateMatrix(),r.material.uniforms.uvTransform.value.copy(d.matrix),m===d&&h===d.version&&c===l.toneMapping||(r.material.needsUpdate=!0,m=d,h=d.version,c=l.toneMapping),e.unshift(r,r.geometry,r.material,0,0,null))}}}function Le(l,t,e,n){const i=l.getParameter(34921),a=n.isWebGL2?null:t.get("OES_vertex_array_object"),r=n.isWebGL2||null!==a,o={},s=q(null);let m=s;function h(t){return n.isWebGL2?l.bindVertexArray(t):a.bindVertexArrayOES(t)}function c(t){return n.isWebGL2?l.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function q(l){const t=[],e=[],n=[];for(let l=0;l<i;l++)t[l]=0,e[l]=0,n[l]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:e,attributeDivisors:n,object:l,attributes:{},index:null}}function u(){const l=m.newAttributes;for(let t=0,e=l.length;t<e;t++)l[t]=0}function d(l){p(l,0)}function p(e,i){const a=m.newAttributes,r=m.enabledAttributes,o=m.attributeDivisors;a[e]=1,0===r[e]&&(l.enableVertexAttribArray(e),r[e]=1),o[e]!==i&&((n.isWebGL2?l:t.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](e,i),o[e]=i)}function x(){const t=m.newAttributes,e=m.enabledAttributes;for(let n=0,i=e.length;n<i;n++)e[n]!==t[n]&&(l.disableVertexAttribArray(n),e[n]=0)}function f(t,e,i,a,r,o){!0!==n.isWebGL2||5124!==i&&5125!==i?l.vertexAttribPointer(t,e,i,a,r,o):l.vertexAttribIPointer(t,e,i,r,o)}function _(){g(),m!==s&&(m=s,h(m.object))}function g(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:function(i,s,c,_,g){let v=!1;if(r){const t=function(t,e,i){const r=!0===i.wireframe;let s=o[t.id];void 0===s&&(s={},o[t.id]=s);let m=s[e.id];void 0===m&&(m={},s[e.id]=m);let h=m[r];return void 0===h&&(h=q(n.isWebGL2?l.createVertexArray():a.createVertexArrayOES()),m[r]=h),h}(_,c,s);m!==t&&(m=t,h(m.object)),v=function(l,t){const e=m.attributes,n=l.attributes;let i=0;for(const l in n){const t=e[l],a=n[l];if(void 0===t)return!0;if(t.attribute!==a)return!0;if(t.data!==a.data)return!0;i++}return m.attributesNum!==i||m.index!==t}(_,g),v&&function(l,t){const e={},n=l.attributes;let i=0;for(const l in n){const t=n[l],a={};a.attribute=t,t.data&&(a.data=t.data),e[l]=a,i++}m.attributes=e,m.attributesNum=i,m.index=t}(_,g)}else{const l=!0===s.wireframe;m.geometry===_.id&&m.program===c.id&&m.wireframe===l||(m.geometry=_.id,m.program=c.id,m.wireframe=l,v=!0)}!0===i.isInstancedMesh&&(v=!0),null!==g&&e.update(g,34963),v&&(function(i,a,r,o){if(!1===n.isWebGL2&&(i.isInstancedMesh||o.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;u();const s=o.attributes,m=r.getAttributes(),h=a.defaultAttributeValues;for(const t in m){const n=m[t];if(n>=0){const a=s[t];if(void 0!==a){const t=a.normalized,i=a.itemSize,r=e.get(a);if(void 0===r)continue;const s=r.buffer,m=r.type,h=r.bytesPerElement;if(a.isInterleavedBufferAttribute){const e=a.data,r=e.stride,c=a.offset;e&&e.isInstancedInterleavedBuffer?(p(n,e.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=e.meshPerAttribute*e.count)):d(n),l.bindBuffer(34962,s),f(n,i,m,t,r*h,c*h)}else a.isInstancedBufferAttribute?(p(n,a.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=a.meshPerAttribute*a.count)):d(n),l.bindBuffer(34962,s),f(n,i,m,t,0,0)}else if("instanceMatrix"===t){const t=e.get(i.instanceMatrix);if(void 0===t)continue;const a=t.buffer,r=t.type;p(n+0,1),p(n+1,1),p(n+2,1),p(n+3,1),l.bindBuffer(34962,a),l.vertexAttribPointer(n+0,4,r,!1,64,0),l.vertexAttribPointer(n+1,4,r,!1,64,16),l.vertexAttribPointer(n+2,4,r,!1,64,32),l.vertexAttribPointer(n+3,4,r,!1,64,48)}else if("instanceColor"===t){const t=e.get(i.instanceColor);if(void 0===t)continue;const a=t.buffer,r=t.type;p(n,1),l.bindBuffer(34962,a),l.vertexAttribPointer(n,3,r,!1,12,0)}else if(void 0!==h){const e=h[t];if(void 0!==e)switch(e.length){case 2:l.vertexAttrib2fv(n,e);break;case 3:l.vertexAttrib3fv(n,e);break;case 4:l.vertexAttrib4fv(n,e);break;default:l.vertexAttrib1fv(n,e)}}}}x()}(i,s,c,_),null!==g&&l.bindBuffer(34963,e.get(g).buffer))},reset:_,resetDefaultState:g,dispose:function(){_();for(const l in o){const t=o[l];for(const l in t){const e=t[l];for(const l in e)c(e[l].object),delete e[l];delete t[l]}delete o[l]}},releaseStatesOfGeometry:function(l){if(void 0===o[l.id])return;const t=o[l.id];for(const l in t){const e=t[l];for(const l in e)c(e[l].object),delete e[l];delete t[l]}delete o[l.id]},releaseStatesOfProgram:function(l){for(const t in o){const e=o[t];if(void 0===e[l.id])continue;const n=e[l.id];for(const l in n)c(n[l].object),delete n[l];delete e[l.id]}},initAttributes:u,enableAttribute:d,disableUnusedAttributes:x}}function Ce(l,t,e,n){const i=n.isWebGL2;let a;this.setMode=function(l){a=l},this.render=function(t,n){l.drawArrays(a,t,n),e.update(n,a,1)},this.renderInstances=function(n,r,o){if(0===o)return;let s,m;if(i)s=l,m="drawArraysInstanced";else if(s=t.get("ANGLE_instanced_arrays"),m="drawArraysInstancedANGLE",null===s)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");s[m](a,n,r,o),e.update(r,a,o)}}function Re(l,t,e){let n;function i(t){if("highp"===t){if(l.getShaderPrecisionFormat(35633,36338).precision>0&&l.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&l.getShaderPrecisionFormat(35633,36337).precision>0&&l.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&l instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&l instanceof WebGL2ComputeRenderingContext;let r=void 0!==e.precision?e.precision:"highp";const o=i(r);o!==r&&(console.warn("THREE.WebGLRenderer:",r,"not supported, using",o,"instead."),r=o);const s=a||t.has("WEBGL_draw_buffers"),m=!0===e.logarithmicDepthBuffer,h=l.getParameter(34930),c=l.getParameter(35660),q=l.getParameter(3379),u=l.getParameter(34076),d=l.getParameter(34921),p=l.getParameter(36347),x=l.getParameter(36348),f=l.getParameter(36349),_=c>0,g=a||t.has("OES_texture_float");return{isWebGL2:a,drawBuffers:s,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===t.has("EXT_texture_filter_anisotropic")){const e=t.get("EXT_texture_filter_anisotropic");n=l.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:i,precision:r,logarithmicDepthBuffer:m,maxTextures:h,maxVertexTextures:c,maxTextureSize:q,maxCubemapSize:u,maxAttributes:d,maxVertexUniforms:p,maxVaryings:x,maxFragmentUniforms:f,vertexTextures:_,floatFragmentTextures:g,floatVertexTextures:_&&g,maxSamples:a?l.getParameter(36183):0}}function Pe(l){const t=this;let e=null,n=0,i=!1,a=!1;const r=new ot,o=new j,s={value:null,needsUpdate:!1};function m(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function h(l,e,n,i){const a=null!==l?l.length:0;let m=null;if(0!==a){if(m=s.value,!0!==i||null===m){const t=n+4*a,i=e.matrixWorldInverse;o.getNormalMatrix(i),(null===m||m.length<t)&&(m=new Float32Array(t));for(let t=0,e=n;t!==a;++t,e+=4)r.copy(l[t]).applyMatrix4(i,o),r.normal.toArray(m,e),m[e+3]=r.constant}s.value=m,s.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,m}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(l,t,a){const r=0!==l.length||t||0!==n||i;return i=t,e=h(l,a,0),n=l.length,r},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1,m()},this.setState=function(t,r,o){const c=t.clippingPlanes,q=t.clipIntersection,u=t.clipShadows,d=l.get(t);if(!i||null===c||0===c.length||a&&!u)a?h(null):m();else{const l=a?0:n,t=4*l;let i=d.clippingState||null;s.value=i,i=h(c,r,t,o);for(let l=0;l!==t;++l)i[l]=e[l];d.clippingState=i,this.numIntersection=q?this.numPlanes:0,this.numPlanes+=l}}}function Ie(l){let t=new WeakMap;function e(l,t){return 303===t?l.mapping=301:304===t&&(l.mapping=302),l}function n(l){const e=l.target;e.removeEventListener("dispose",n);const i=t.get(e);void 0!==i&&(t.delete(e),i.dispose())}return{get:function(i){if(i&&i.isTexture){const a=i.mapping;if(303===a||304===a){if(t.has(i))return e(t.get(i).texture,i.mapping);{const a=i.image;if(a&&a.height>0){const r=l.getRenderTarget(),o=new ge(a.height/2);return o.fromEquirectangularTexture(l,i),t.set(i,o),l.setRenderTarget(r),i.addEventListener("dispose",n),e(o.texture,i.mapping)}return null}}}return i},dispose:function(){t=new WeakMap}}}function De(l){const t={};function e(e){if(void 0!==t[e])return t[e];let n;switch(e){case"WEBGL_depth_texture":n=l.getExtension("WEBGL_depth_texture")||l.getExtension("MOZ_WEBGL_depth_texture")||l.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=l.getExtension("EXT_texture_filter_anisotropic")||l.getExtension("MOZ_EXT_texture_filter_anisotropic")||l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=l.getExtension("WEBGL_compressed_texture_s3tc")||l.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=l.getExtension("WEBGL_compressed_texture_pvrtc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=l.getExtension(e)}return t[e]=n,n}return{has:function(l){return null!==e(l)},init:function(l){l.isWebGL2?e("EXT_color_buffer_float"):(e("WEBGL_depth_texture"),e("OES_texture_float"),e("OES_texture_half_float"),e("OES_texture_half_float_linear"),e("OES_standard_derivatives"),e("OES_element_index_uint"),e("OES_vertex_array_object"),e("ANGLE_instanced_arrays")),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float")},get:function(l){const t=e(l);return null===t&&console.warn("THREE.WebGLRenderer: "+l+" extension not supported."),t}}}function Ne(l,t,e,n){const i={},a=new WeakMap;function r(l){const o=l.target;null!==o.index&&t.remove(o.index);for(const l in o.attributes)t.remove(o.attributes[l]);o.removeEventListener("dispose",r),delete i[o.id];const s=a.get(o);s&&(t.remove(s),a.delete(o)),n.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,e.memory.geometries--}function o(l){const e=[],n=l.index,i=l.attributes.position;let r=0;if(null!==n){const l=n.array;r=n.version;for(let t=0,n=l.length;t<n;t+=3){const n=l[t+0],i=l[t+1],a=l[t+2];e.push(n,i,i,a,a,n)}}else{const l=i.array;r=i.version;for(let t=0,n=l.length/3-1;t<n;t+=3){const l=t+0,n=t+1,i=t+2;e.push(l,n,n,i,i,l)}}const o=new(Dt(e)>65535?Pt:Rt)(e,1);o.version=r;const s=a.get(l);s&&t.remove(s),a.set(l,o)}return{get:function(l,t){return!0===i[t.id]||(t.addEventListener("dispose",r),i[t.id]=!0,e.memory.geometries++),t},update:function(l){const e=l.attributes;for(const l in e)t.update(e[l],34962);const n=l.morphAttributes;for(const l in n){const e=n[l];for(let l=0,n=e.length;l<n;l++)t.update(e[l],34962)}},getWireframeAttribute:function(l){const t=a.get(l);if(t){const e=l.index;null!==e&&t.version<e.version&&o(l)}else o(l);return a.get(l)}}}function Oe(l,t,e,n){const i=n.isWebGL2;let a,r,o;this.setMode=function(l){a=l},this.setIndex=function(l){r=l.type,o=l.bytesPerElement},this.render=function(t,n){l.drawElements(a,n,r,t*o),e.update(n,a,1)},this.renderInstances=function(n,s,m){if(0===m)return;let h,c;if(i)h=l,c="drawElementsInstanced";else if(h=t.get("ANGLE_instanced_arrays"),c="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[c](a,s,r,n*o,m),e.update(s,a,m)}}function Be(l){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(l,e,n){switch(t.calls++,e){case 4:t.triangles+=n*(l/3);break;case 1:t.lines+=n*(l/2);break;case 3:t.lines+=n*(l-1);break;case 2:t.lines+=n*l;break;case 0:t.points+=n*l;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",e)}}}}function Fe(l,t){return l[0]-t[0]}function ke(l,t){return Math.abs(t[1])-Math.abs(l[1])}function He(l){const t={},e=new Float32Array(8),n=[];for(let l=0;l<8;l++)n[l]=[l,0];return{update:function(i,a,r,o){const s=i.morphTargetInfluences,m=void 0===s?0:s.length;let h=t[a.id];if(void 0===h){h=[];for(let l=0;l<m;l++)h[l]=[l,0];t[a.id]=h}for(let l=0;l<m;l++){const t=h[l];t[0]=l,t[1]=s[l]}h.sort(ke);for(let l=0;l<8;l++)l<m&&h[l][1]?(n[l][0]=h[l][0],n[l][1]=h[l][1]):(n[l][0]=Number.MAX_SAFE_INTEGER,n[l][1]=0);n.sort(Fe);const c=r.morphTargets&&a.morphAttributes.position,q=r.morphNormals&&a.morphAttributes.normal;let u=0;for(let l=0;l<8;l++){const t=n[l],i=t[0],r=t[1];i!==Number.MAX_SAFE_INTEGER&&r?(c&&a.getAttribute("morphTarget"+l)!==c[i]&&a.setAttribute("morphTarget"+l,c[i]),q&&a.getAttribute("morphNormal"+l)!==q[i]&&a.setAttribute("morphNormal"+l,q[i]),e[l]=r,u+=r):(c&&!0===a.hasAttribute("morphTarget"+l)&&a.deleteAttribute("morphTarget"+l),q&&!0===a.hasAttribute("morphNormal"+l)&&a.deleteAttribute("morphNormal"+l),e[l]=0)}const d=a.morphTargetsRelative?1:1-u;o.getUniforms().setValue(l,"morphTargetBaseInfluence",d),o.getUniforms().setValue(l,"morphTargetInfluences",e)}}}function Ue(l,t,e,n){let i=new WeakMap;function a(l){const t=l.target;t.removeEventListener("dispose",a),e.remove(t.instanceMatrix),null!==t.instanceColor&&e.remove(t.instanceColor)}return{update:function(l){const r=n.render.frame,o=l.geometry,s=t.get(l,o);return i.get(s)!==r&&(t.update(s),i.set(s,r)),l.isInstancedMesh&&(!1===l.hasEventListener("dispose",a)&&l.addEventListener("dispose",a),e.update(l.instanceMatrix,34962),null!==l.instanceColor&&e.update(l.instanceColor,34962)),s},dispose:function(){i=new WeakMap}}}Te.physical={uniforms:ce([Te.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new W(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Et(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new W},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Et(0)}}]),vertexShader:Se.meshphysical_vert,fragmentShader:Se.meshphysical_frag};class Ge extends Z{constructor(l=null,t=1,e=1,n=1){super(null),this.image={data:l,width:t,height:e,depth:n},this.magFilter=h,this.minFilter=h,this.wrapR=s,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ge.prototype.isDataTexture2DArray=!0;class Ve extends Z{constructor(l=null,t=1,e=1,n=1){super(null),this.image={data:l,width:t,height:e,depth:n},this.magFilter=h,this.minFilter=h,this.wrapR=s,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ve.prototype.isDataTexture3D=!0;const We=new Z,je=new Ge,Xe=new Ve,Ye=new _e,Je=[],Ze=[],Qe=new Float32Array(16),Ke=new Float32Array(9),$e=new Float32Array(4);function ln(l,t,e){const n=l[0];if(n<=0||n>0)return l;const i=t*e;let a=Je[i];if(void 0===a&&(a=new Float32Array(i),Je[i]=a),0!==t){n.toArray(a,0);for(let n=1,i=0;n!==t;++n)i+=e,l[n].toArray(a,i)}return a}function tn(l,t){if(l.length!==t.length)return!1;for(let e=0,n=l.length;e<n;e++)if(l[e]!==t[e])return!1;return!0}function en(l,t){for(let e=0,n=t.length;e<n;e++)l[e]=t[e]}function nn(l,t){let e=Ze[t];void 0===e&&(e=new Int32Array(t),Ze[t]=e);for(let n=0;n!==t;++n)e[n]=l.allocateTextureUnit();return e}function an(l,t){const e=this.cache;e[0]!==t&&(l.uniform1f(this.addr,t),e[0]=t)}function rn(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y||(l.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(tn(e,t))return;l.uniform2fv(this.addr,t),en(e,t)}}function on(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z||(l.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(void 0!==t.r)e[0]===t.r&&e[1]===t.g&&e[2]===t.b||(l.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(tn(e,t))return;l.uniform3fv(this.addr,t),en(e,t)}}function sn(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z&&e[3]===t.w||(l.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(tn(e,t))return;l.uniform4fv(this.addr,t),en(e,t)}}function mn(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(tn(e,t))return;l.uniformMatrix2fv(this.addr,!1,t),en(e,t)}else{if(tn(e,n))return;$e.set(n),l.uniformMatrix2fv(this.addr,!1,$e),en(e,n)}}function hn(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(tn(e,t))return;l.uniformMatrix3fv(this.addr,!1,t),en(e,t)}else{if(tn(e,n))return;Ke.set(n),l.uniformMatrix3fv(this.addr,!1,Ke),en(e,n)}}function cn(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(tn(e,t))return;l.uniformMatrix4fv(this.addr,!1,t),en(e,t)}else{if(tn(e,n))return;Qe.set(n),l.uniformMatrix4fv(this.addr,!1,Qe),en(e,n)}}function qn(l,t){const e=this.cache;e[0]!==t&&(l.uniform1i(this.addr,t),e[0]=t)}function un(l,t){const e=this.cache;tn(e,t)||(l.uniform2iv(this.addr,t),en(e,t))}function dn(l,t){const e=this.cache;tn(e,t)||(l.uniform3iv(this.addr,t),en(e,t))}function pn(l,t){const e=this.cache;tn(e,t)||(l.uniform4iv(this.addr,t),en(e,t))}function xn(l,t){const e=this.cache;e[0]!==t&&(l.uniform1ui(this.addr,t),e[0]=t)}function fn(l,t){const e=this.cache;tn(e,t)||(l.uniform2uiv(this.addr,t),en(e,t))}function _n(l,t){const e=this.cache;tn(e,t)||(l.uniform3uiv(this.addr,t),en(e,t))}function gn(l,t){const e=this.cache;tn(e,t)||(l.uniform4uiv(this.addr,t),en(e,t))}function vn(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.safeSetTexture2D(t||We,i)}function yn(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||Xe,i)}function bn(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.safeSetTextureCube(t||Ye,i)}function wn(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||je,i)}function Mn(l,t){l.uniform1fv(this.addr,t)}function zn(l,t){const e=ln(t,this.size,2);l.uniform2fv(this.addr,e)}function Sn(l,t){const e=ln(t,this.size,3);l.uniform3fv(this.addr,e)}function En(l,t){const e=ln(t,this.size,4);l.uniform4fv(this.addr,e)}function Tn(l,t){const e=ln(t,this.size,4);l.uniformMatrix2fv(this.addr,!1,e)}function An(l,t){const e=ln(t,this.size,9);l.uniformMatrix3fv(this.addr,!1,e)}function Ln(l,t){const e=ln(t,this.size,16);l.uniformMatrix4fv(this.addr,!1,e)}function Cn(l,t){l.uniform1iv(this.addr,t)}function Rn(l,t){l.uniform2iv(this.addr,t)}function Pn(l,t){l.uniform3iv(this.addr,t)}function In(l,t){l.uniform4iv(this.addr,t)}function Dn(l,t){l.uniform1uiv(this.addr,t)}function Nn(l,t){l.uniform2uiv(this.addr,t)}function On(l,t){l.uniform3uiv(this.addr,t)}function Bn(l,t){l.uniform4uiv(this.addr,t)}function Fn(l,t,e){const n=t.length,i=nn(e,n);l.uniform1iv(this.addr,i);for(let l=0;l!==n;++l)e.safeSetTexture2D(t[l]||We,i[l])}function kn(l,t,e){const n=t.length,i=nn(e,n);l.uniform1iv(this.addr,i);for(let l=0;l!==n;++l)e.safeSetTextureCube(t[l]||Ye,i[l])}function Hn(l,t,e){this.id=l,this.addr=e,this.cache=[],this.setValue=function(l){switch(l){case 5126:return an;case 35664:return rn;case 35665:return on;case 35666:return sn;case 35674:return mn;case 35675:return hn;case 35676:return cn;case 5124:case 35670:return qn;case 35667:case 35671:return un;case 35668:case 35672:return dn;case 35669:case 35673:return pn;case 5125:return xn;case 36294:return fn;case 36295:return _n;case 36296:return gn;case 35678:case 36198:case 36298:case 36306:case 35682:return vn;case 35679:case 36299:case 36307:return yn;case 35680:case 36300:case 36308:case 36293:return bn;case 36289:case 36303:case 36311:case 36292:return wn}}(t.type)}function Un(l,t,e){this.id=l,this.addr=e,this.cache=[],this.size=t.size,this.setValue=function(l){switch(l){case 5126:return Mn;case 35664:return zn;case 35665:return Sn;case 35666:return En;case 35674:return Tn;case 35675:return An;case 35676:return Ln;case 5124:case 35670:return Cn;case 35667:case 35671:return Rn;case 35668:case 35672:return Pn;case 35669:case 35673:return In;case 5125:return Dn;case 36294:return Nn;case 36295:return On;case 36296:return Bn;case 35678:case 36198:case 36298:case 36306:case 35682:return Fn;case 35680:case 36300:case 36308:case 36293:return kn}}(t.type)}function Gn(l){this.id=l,this.seq=[],this.map={}}Un.prototype.updateCache=function(l){const t=this.cache;l instanceof Float32Array&&t.length!==l.length&&(this.cache=new Float32Array(l.length)),en(t,l)},Gn.prototype.setValue=function(l,t,e){const n=this.seq;for(let i=0,a=n.length;i!==a;++i){const a=n[i];a.setValue(l,t[a.id],e)}};const Vn=/(\w+)(\])?(\[|\.)?/g;function Wn(l,t){l.seq.push(t),l.map[t.id]=t}function jn(l,t,e){const n=l.name,i=n.length;for(Vn.lastIndex=0;;){const a=Vn.exec(n),r=Vn.lastIndex;let o=a[1];const s="]"===a[2],m=a[3];if(s&&(o|=0),void 0===m||"["===m&&r+2===i){Wn(e,void 0===m?new Hn(o,l,t):new Un(o,l,t));break}{let l=e.map[o];void 0===l&&(l=new Gn(o),Wn(e,l)),e=l}}}function Xn(l,t){this.seq=[],this.map={};const e=l.getProgramParameter(t,35718);for(let n=0;n<e;++n){const e=l.getActiveUniform(t,n);jn(e,l.getUniformLocation(t,e.name),this)}}function Yn(l,t,e){const n=l.createShader(t);return l.shaderSource(n,e),l.compileShader(n),n}Xn.prototype.setValue=function(l,t,e,n){const i=this.map[t];void 0!==i&&i.setValue(l,e,n)},Xn.prototype.setOptional=function(l,t,e){const n=t[e];void 0!==n&&this.setValue(l,e,n)},Xn.upload=function(l,t,e,n){for(let i=0,a=t.length;i!==a;++i){const a=t[i],r=e[a.id];!1!==r.needsUpdate&&a.setValue(l,r.value,n)}},Xn.seqWithValue=function(l,t){const e=[];for(let n=0,i=l.length;n!==i;++n){const i=l[n];i.id in t&&e.push(i)}return e};let Jn=0;function Zn(l){switch(l){case T:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",l),["Linear","( value )"]}}function Qn(l,t,e){const n=l.getShaderParameter(t,35713),i=l.getShaderInfoLog(t).trim();return n&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+e+"\n"+i+function(l){const t=l.split("\n");for(let l=0;l<t.length;l++)t[l]=l+1+": "+t[l];return t.join("\n")}(l.getShaderSource(t))}function Kn(l,t){const e=Zn(t);return"vec4 "+l+"( vec4 value ) { return "+e[0]+"ToLinear"+e[1]+"; }"}function $n(l,t){const e=Zn(t);return"vec4 "+l+"( vec4 value ) { return LinearTo"+e[0]+e[1]+"; }"}function li(l,t){let e;switch(t){case 1:e="Linear";break;case 2:e="Reinhard";break;case 3:e="OptimizedCineon";break;case 4:e="ACESFilmic";break;case 5:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+l+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function ti(l){return""!==l}function ei(l,t){return l.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function ni(l,t){return l.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const ii=/^[ \t]*#include +<([\w\d./]+)>/gm;function ai(l){return l.replace(ii,ri)}function ri(l,t){const e=Se[t];if(void 0===e)throw new Error("Can not resolve #include <"+t+">");return ai(e)}const oi=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,si=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function mi(l){return l.replace(si,ci).replace(oi,hi)}function hi(l,t,e,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),ci(0,t,e,n)}function ci(l,t,e,n){let i="";for(let l=parseInt(t);l<parseInt(e);l++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+l+" ]").replace(/UNROLLED_LOOP_INDEX/g,l);return i}function qi(l){let t="precision "+l.precision+" float;\nprecision "+l.precision+" int;";return"highp"===l.precision?t+="\n#define HIGH_PRECISION":"mediump"===l.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===l.precision&&(t+="\n#define LOW_PRECISION"),t}function ui(l,t,e,n){const i=l.getContext(),a=e.defines;let r=e.vertexShader,o=e.fragmentShader;const s=function(l){let t="SHADOWMAP_TYPE_BASIC";return 1===l.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===l.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===l.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(e),m=function(l){let t="ENVMAP_TYPE_CUBE";if(l.envMap)switch(l.envMapMode){case 301:case 302:t="ENVMAP_TYPE_CUBE";break;case 306:case 307:t="ENVMAP_TYPE_CUBE_UV"}return t}(e),h=function(l){let t="ENVMAP_MODE_REFLECTION";if(l.envMap)switch(l.envMapMode){case 302:case 307:t="ENVMAP_MODE_REFRACTION"}return t}(e),c=function(l){let t="ENVMAP_BLENDING_NONE";if(l.envMap)switch(l.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(e),q=l.gammaFactor>0?l.gammaFactor:1,u=e.isWebGL2?"":function(l){return[l.extensionDerivatives||l.envMapCubeUV||l.bumpMap||l.tangentSpaceNormalMap||l.clearcoatNormalMap||l.flatShading||"physical"===l.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(l.extensionFragDepth||l.logarithmicDepthBuffer)&&l.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",l.extensionDrawBuffers&&l.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(l.extensionShaderTextureLOD||l.envMap||l.transmission>0)&&l.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(ti).join("\n")}(e),d=function(l){const t=[];for(const e in l){const n=l[e];!1!==n&&t.push("#define "+e+" "+n)}return t.join("\n")}(a),p=i.createProgram();let x,f,_=e.glslVersion?"#version "+e.glslVersion+"\n":"";e.isRawShaderMaterial?(x=[d].filter(ti).join("\n"),x.length>0&&(x+="\n"),f=[u,d].filter(ti).join("\n"),f.length>0&&(f+="\n")):(x=[qi(e),"#define SHADER_NAME "+e.shaderName,d,e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+q,"#define MAX_BONES "+e.maxBones,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.displacementMap&&e.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&!1===e.flatShading?"#define USE_MORPHNORMALS":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+s:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ti).join("\n"),f=[u,qi(e),"#define SHADER_NAME "+e.shaderName,d,e.alphaTest?"#define ALPHATEST "+e.alphaTest+(e.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+q,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+m:"",e.envMap?"#define "+h:"",e.envMap?"#define "+c:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.sheen?"#define USE_SHEEN":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+s:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==e.toneMapping?"#define TONE_MAPPING":"",0!==e.toneMapping?Se.tonemapping_pars_fragment:"",0!==e.toneMapping?li("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",Se.encodings_pars_fragment,e.map?Kn("mapTexelToLinear",e.mapEncoding):"",e.matcap?Kn("matcapTexelToLinear",e.matcapEncoding):"",e.envMap?Kn("envMapTexelToLinear",e.envMapEncoding):"",e.emissiveMap?Kn("emissiveMapTexelToLinear",e.emissiveMapEncoding):"",e.lightMap?Kn("lightMapTexelToLinear",e.lightMapEncoding):"",$n("linearToOutputTexel",e.outputEncoding),e.depthPacking?"#define DEPTH_PACKING "+e.depthPacking:"","\n"].filter(ti).join("\n")),r=ai(r),r=ei(r,e),r=ni(r,e),o=ai(o),o=ei(o,e),o=ni(o,e),r=mi(r),o=mi(o),e.isWebGL2&&!0!==e.isRawShaderMaterial&&(_="#version 300 es\n",x=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,f=["#define varying in",e.glslVersion===R?"":"out highp vec4 pc_fragColor;",e.glslVersion===R?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+f);const g=_+f+o,v=Yn(i,35633,_+x+r),y=Yn(i,35632,g);if(i.attachShader(p,v),i.attachShader(p,y),void 0!==e.index0AttributeName?i.bindAttribLocation(p,0,e.index0AttributeName):!0===e.morphTargets&&i.bindAttribLocation(p,0,"position"),i.linkProgram(p),l.debug.checkShaderErrors){const l=i.getProgramInfoLog(p).trim(),t=i.getShaderInfoLog(v).trim(),e=i.getShaderInfoLog(y).trim();let n=!0,a=!0;if(!1===i.getProgramParameter(p,35714)){n=!1;const t=Qn(i,v,"vertex"),e=Qn(i,y,"fragment");console.error("THREE.WebGLProgram: shader error: ",i.getError(),"35715",i.getProgramParameter(p,35715),"gl.getProgramInfoLog",l,t,e)}else""!==l?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",l):""!==t&&""!==e||(a=!1);a&&(this.diagnostics={runnable:n,programLog:l,vertexShader:{log:t,prefix:x},fragmentShader:{log:e,prefix:f}})}let b,w;return i.deleteShader(v),i.deleteShader(y),this.getUniforms=function(){return void 0===b&&(b=new Xn(i,p)),b},this.getAttributes=function(){return void 0===w&&(w=function(l,t){const e={},n=l.getProgramParameter(t,35721);for(let i=0;i<n;i++){const n=l.getActiveAttrib(t,i).name;e[n]=l.getAttribLocation(t,n)}return e}(i,p)),w},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(p),this.program=void 0},this.name=e.shaderName,this.id=Jn++,this.cacheKey=t,this.usedTimes=1,this.program=p,this.vertexShader=v,this.fragmentShader=y,this}function di(l,t,e,n,i,a){const r=[],o=n.isWebGL2,s=n.logarithmicDepthBuffer,m=n.floatVertexTextures,h=n.maxVertexUniforms,c=n.vertexTextures;let q=n.precision;const u={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},d=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmission","transmissionMap","thicknessMap"];function p(l){let t;return l&&l.isTexture?t=l.encoding:l&&l.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),t=l.texture.encoding):t=T,t}return{getParameters:function(i,r,d,x,f){const _=x.fog,g=i.isMeshStandardMaterial?x.environment:null,v=t.get(i.envMap||g),y=u[i.type],b=f.isSkinnedMesh?function(l){const t=l.skeleton.bones;if(m)return 1024;{const l=h,e=Math.floor((l-20)/4),n=Math.min(e,t.length);return n<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+n+"."),0):n}}(f):0;let w,M;if(null!==i.precision&&(q=n.getMaxPrecision(i.precision),q!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",q,"instead.")),y){const l=Te[y];w=l.vertexShader,M=l.fragmentShader}else w=i.vertexShader,M=i.fragmentShader;const z=l.getRenderTarget();return{isWebGL2:o,shaderID:y,shaderName:i.type,vertexShader:w,fragmentShader:M,defines:i.defines,isRawShaderMaterial:!0===i.isRawShaderMaterial,glslVersion:i.glslVersion,precision:q,instancing:!0===f.isInstancedMesh,instancingColor:!0===f.isInstancedMesh&&null!==f.instanceColor,supportsVertexTextures:c,outputEncoding:null!==z?p(z.texture):l.outputEncoding,map:!!i.map,mapEncoding:p(i.map),matcap:!!i.matcap,matcapEncoding:p(i.matcap),envMap:!!v,envMapMode:v&&v.mapping,envMapEncoding:p(v),envMapCubeUV:!!v&&(306===v.mapping||307===v.mapping),lightMap:!!i.lightMap,lightMapEncoding:p(i.lightMap),aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:p(i.emissiveMap),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:1===i.normalMapType,tangentSpaceNormalMap:0===i.normalMapType,clearcoatMap:!!i.clearcoatMap,clearcoatRoughnessMap:!!i.clearcoatRoughnessMap,clearcoatNormalMap:!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,gradientMap:!!i.gradientMap,sheen:!!i.sheen,transmission:!!i.transmission,transmissionMap:!!i.transmissionMap,thicknessMap:!!i.thicknessMap,combine:i.combine,vertexTangents:i.normalMap&&i.vertexTangents,vertexColors:i.vertexColors,vertexAlphas:!0===i.vertexColors&&f.geometry&&f.geometry.attributes.color&&4===f.geometry.attributes.color.itemSize,vertexUvs:!!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatMap||i.clearcoatRoughnessMap||i.clearcoatNormalMap||i.displacementMap||i.transmission||i.transmissionMap||i.thicknessMap),uvsVertexOnly:!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatNormalMap||i.transmission||i.transmissionMap||i.thicknessMap||!i.displacementMap),fog:!!_,useFog:i.fog,fogExp2:_&&_.isFogExp2,flatShading:!!i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:s,skinning:!0===f.isSkinnedMesh&&b>0,maxBones:b,useVertexTexture:m,morphTargets:i.morphTargets,morphNormals:i.morphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numDirLightShadows:r.directionalShadowMap.length,numPointLightShadows:r.pointShadowMap.length,numSpotLightShadows:r.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:i.dithering,shadowMapEnabled:l.shadowMap.enabled&&d.length>0,shadowMapType:l.shadowMap.type,toneMapping:i.toneMapped?l.toneMapping:0,physicallyCorrectLights:l.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:2===i.side,flipSided:1===i.side,depthPacking:void 0!==i.depthPacking&&i.depthPacking,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:o||e.has("EXT_frag_depth"),rendererExtensionDrawBuffers:o||e.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:o||e.has("EXT_shader_texture_lod"),customProgramCacheKey:i.customProgramCacheKey()}},getProgramCacheKey:function(t){const e=[];if(t.shaderID?e.push(t.shaderID):(e.push(t.fragmentShader),e.push(t.vertexShader)),void 0!==t.defines)for(const l in t.defines)e.push(l),e.push(t.defines[l]);if(!1===t.isRawShaderMaterial){for(let l=0;l<d.length;l++)e.push(t[d[l]]);e.push(l.outputEncoding),e.push(l.gammaFactor)}return e.push(t.customProgramCacheKey),e.join()},getUniforms:function(l){const t=u[l.type];let e;if(t){const l=Te[t];e=qe.clone(l.uniforms)}else e=l.uniforms;return e},acquireProgram:function(t,e){let n;for(let l=0,t=r.length;l<t;l++){const t=r[l];if(t.cacheKey===e){n=t,++n.usedTimes;break}}return void 0===n&&(n=new ui(l,e,t,i),r.push(n)),n},releaseProgram:function(l){if(0==--l.usedTimes){const t=r.indexOf(l);r[t]=r[r.length-1],r.pop(),l.destroy()}},programs:r}}function pi(){let l=new WeakMap;return{get:function(t){let e=l.get(t);return void 0===e&&(e={},l.set(t,e)),e},remove:function(t){l.delete(t)},update:function(t,e,n){l.get(t)[e]=n},dispose:function(){l=new WeakMap}}}function xi(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.program!==t.program?l.program.id-t.program.id:l.material.id!==t.material.id?l.material.id-t.material.id:l.z!==t.z?l.z-t.z:l.id-t.id}function fi(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.z!==t.z?t.z-l.z:l.id-t.id}function _i(l){const t=[];let e=0;const n=[],i=[],a=[],r={id:-1};function o(n,i,a,o,s,m){let h=t[e];const c=l.get(a);return void 0===h?(h={id:n.id,object:n,geometry:i,material:a,program:c.program||r,groupOrder:o,renderOrder:n.renderOrder,z:s,group:m},t[e]=h):(h.id=n.id,h.object=n,h.geometry=i,h.material=a,h.program=c.program||r,h.groupOrder=o,h.renderOrder=n.renderOrder,h.z=s,h.group=m),e++,h}return{opaque:n,transmissive:i,transparent:a,init:function(){e=0,n.length=0,i.length=0,a.length=0},push:function(l,t,e,r,s,m){const h=o(l,t,e,r,s,m);e.transmission>0?i.push(h):!0===e.transparent?a.push(h):n.push(h)},unshift:function(l,t,e,r,s,m){const h=o(l,t,e,r,s,m);e.transmission>0?i.unshift(h):!0===e.transparent?a.unshift(h):n.unshift(h)},finish:function(){for(let l=e,n=t.length;l<n;l++){const e=t[l];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.program=null,e.group=null}},sort:function(l,t){n.length>1&&n.sort(l||xi),i.length>1&&i.sort(t||fi),a.length>1&&a.sort(t||fi)}}}function gi(l){let t=new WeakMap;return{get:function(e,n){let i;return!1===t.has(e)?(i=new _i(l),t.set(e,[i])):n>=t.get(e).length?(i=new _i(l),t.get(e).push(i)):i=t.get(e)[n],i},dispose:function(){t=new WeakMap}}}function vi(){const l={};return{get:function(t){if(void 0!==l[t.id])return l[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new tl,color:new Et};break;case"SpotLight":e={position:new tl,direction:new tl,color:new Et,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new tl,color:new Et,distance:0,decay:0};break;case"HemisphereLight":e={direction:new tl,skyColor:new Et,groundColor:new Et};break;case"RectAreaLight":e={color:new Et,position:new tl,halfWidth:new tl,halfHeight:new tl}}return l[t.id]=e,e}}}let yi=0;function bi(l,t){return(t.castShadow?1:0)-(l.castShadow?1:0)}function wi(l,t){const e=new vi,n=function(){const l={};return{get:function(t){if(void 0!==l[t.id])return l[t.id];let e;switch(t.type){case"DirectionalLight":case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new W};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new W,shadowCameraNear:1,shadowCameraFar:1e3}}return l[t.id]=e,e}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let l=0;l<9;l++)i.probe.push(new tl);const a=new tl,r=new Rl,o=new Rl;return{setup:function(a){let r=0,o=0,s=0;for(let l=0;l<9;l++)i.probe[l].set(0,0,0);let m=0,h=0,c=0,q=0,u=0,d=0,p=0,x=0;a.sort(bi);for(let l=0,t=a.length;l<t;l++){const t=a[l],f=t.color,_=t.intensity,g=t.distance,v=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)r+=f.r*_,o+=f.g*_,s+=f.b*_;else if(t.isLightProbe)for(let l=0;l<9;l++)i.probe[l].addScaledVector(t.sh.coefficients[l],_);else if(t.isDirectionalLight){const l=e.get(t);if(l.color.copy(t.color).multiplyScalar(t.intensity),t.castShadow){const l=t.shadow,e=n.get(t);e.shadowBias=l.bias,e.shadowNormalBias=l.normalBias,e.shadowRadius=l.radius,e.shadowMapSize=l.mapSize,i.directionalShadow[m]=e,i.directionalShadowMap[m]=v,i.directionalShadowMatrix[m]=t.shadow.matrix,d++}i.directional[m]=l,m++}else if(t.isSpotLight){const l=e.get(t);if(l.position.setFromMatrixPosition(t.matrixWorld),l.color.copy(f).multiplyScalar(_),l.distance=g,l.coneCos=Math.cos(t.angle),l.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),l.decay=t.decay,t.castShadow){const l=t.shadow,e=n.get(t);e.shadowBias=l.bias,e.shadowNormalBias=l.normalBias,e.shadowRadius=l.radius,e.shadowMapSize=l.mapSize,i.spotShadow[c]=e,i.spotShadowMap[c]=v,i.spotShadowMatrix[c]=t.shadow.matrix,x++}i.spot[c]=l,c++}else if(t.isRectAreaLight){const l=e.get(t);l.color.copy(f).multiplyScalar(_),l.halfWidth.set(.5*t.width,0,0),l.halfHeight.set(0,.5*t.height,0),i.rectArea[q]=l,q++}else if(t.isPointLight){const l=e.get(t);if(l.color.copy(t.color).multiplyScalar(t.intensity),l.distance=t.distance,l.decay=t.decay,t.castShadow){const l=t.shadow,e=n.get(t);e.shadowBias=l.bias,e.shadowNormalBias=l.normalBias,e.shadowRadius=l.radius,e.shadowMapSize=l.mapSize,e.shadowCameraNear=l.camera.near,e.shadowCameraFar=l.camera.far,i.pointShadow[h]=e,i.pointShadowMap[h]=v,i.pointShadowMatrix[h]=t.shadow.matrix,p++}i.point[h]=l,h++}else if(t.isHemisphereLight){const l=e.get(t);l.skyColor.copy(t.color).multiplyScalar(_),l.groundColor.copy(t.groundColor).multiplyScalar(_),i.hemi[u]=l,u++}}q>0&&(t.isWebGL2||!0===l.has("OES_texture_float_linear")?(i.rectAreaLTC1=Ee.LTC_FLOAT_1,i.rectAreaLTC2=Ee.LTC_FLOAT_2):!0===l.has("OES_texture_half_float_linear")?(i.rectAreaLTC1=Ee.LTC_HALF_1,i.rectAreaLTC2=Ee.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=r,i.ambient[1]=o,i.ambient[2]=s;const f=i.hash;f.directionalLength===m&&f.pointLength===h&&f.spotLength===c&&f.rectAreaLength===q&&f.hemiLength===u&&f.numDirectionalShadows===d&&f.numPointShadows===p&&f.numSpotShadows===x||(i.directional.length=m,i.spot.length=c,i.rectArea.length=q,i.point.length=h,i.hemi.length=u,i.directionalShadow.length=d,i.directionalShadowMap.length=d,i.pointShadow.length=p,i.pointShadowMap.length=p,i.spotShadow.length=x,i.spotShadowMap.length=x,i.directionalShadowMatrix.length=d,i.pointShadowMatrix.length=p,i.spotShadowMatrix.length=x,f.directionalLength=m,f.pointLength=h,f.spotLength=c,f.rectAreaLength=q,f.hemiLength=u,f.numDirectionalShadows=d,f.numPointShadows=p,f.numSpotShadows=x,i.version=yi++)},setupView:function(l,t){let e=0,n=0,s=0,m=0,h=0;const c=t.matrixWorldInverse;for(let t=0,q=l.length;t<q;t++){const q=l[t];if(q.isDirectionalLight){const l=i.directional[e];l.direction.setFromMatrixPosition(q.matrixWorld),a.setFromMatrixPosition(q.target.matrixWorld),l.direction.sub(a),l.direction.transformDirection(c),e++}else if(q.isSpotLight){const l=i.spot[s];l.position.setFromMatrixPosition(q.matrixWorld),l.position.applyMatrix4(c),l.direction.setFromMatrixPosition(q.matrixWorld),a.setFromMatrixPosition(q.target.matrixWorld),l.direction.sub(a),l.direction.transformDirection(c),s++}else if(q.isRectAreaLight){const l=i.rectArea[m];l.position.setFromMatrixPosition(q.matrixWorld),l.position.applyMatrix4(c),o.identity(),r.copy(q.matrixWorld),r.premultiply(c),o.extractRotation(r),l.halfWidth.set(.5*q.width,0,0),l.halfHeight.set(0,.5*q.height,0),l.halfWidth.applyMatrix4(o),l.halfHeight.applyMatrix4(o),m++}else if(q.isPointLight){const l=i.point[n];l.position.setFromMatrixPosition(q.matrixWorld),l.position.applyMatrix4(c),n++}else if(q.isHemisphereLight){const l=i.hemi[h];l.direction.setFromMatrixPosition(q.matrixWorld),l.direction.transformDirection(c),l.direction.normalize(),h++}}},state:i}}function Mi(l,t){const e=new wi(l,t),n=[],i=[];return{init:function(){n.length=0,i.length=0},state:{lightsArray:n,shadowsArray:i,lights:e},setupLights:function(){e.setup(n)},setupLightsView:function(l){e.setupView(n,l)},pushLight:function(l){n.push(l)},pushShadow:function(l){i.push(l)}}}function zi(l,t){let e=new WeakMap;return{get:function(n,i=0){let a;return!1===e.has(n)?(a=new Mi(l,t),e.set(n,[a])):i>=e.get(n).length?(a=new Mi(l,t),e.get(n).push(a)):a=e.get(n)[i],a},dispose:function(){e=new WeakMap}}}class Si extends vt{constructor(l){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(l)}copy(l){return super.copy(l),this.depthPacking=l.depthPacking,this.morphTargets=l.morphTargets,this.map=l.map,this.alphaMap=l.alphaMap,this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this}}Si.prototype.isMeshDepthMaterial=!0;class Ei extends vt{constructor(l){super(),this.type="MeshDistanceMaterial",this.referencePosition=new tl,this.nearDistance=1,this.farDistance=1e3,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(l)}copy(l){return super.copy(l),this.referencePosition.copy(l.referencePosition),this.nearDistance=l.nearDistance,this.farDistance=l.farDistance,this.morphTargets=l.morphTargets,this.map=l.map,this.alphaMap=l.alphaMap,this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this}}function Ti(l,t,e){let n=new be;const i=new W,a=new W,r=new K,o=[],s=[],m={},q=e.maxTextureSize,u={0:1,1:0,2:2},d=new ue({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new W},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),p=d.clone();p.defines.HORIZONTAL_PASS=1;const x=new Gt;x.setAttribute("position",new Ct(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const f=new oe(x,d),_=this;function v(e,n){const i=t.update(f);d.uniforms.shadow_pass.value=e.map.texture,d.uniforms.resolution.value=e.mapSize,d.uniforms.radius.value=e.radius,l.setRenderTarget(e.mapPass),l.clear(),l.renderBufferDirect(n,null,i,d,f,null),p.uniforms.shadow_pass.value=e.mapPass.texture,p.uniforms.resolution.value=e.mapSize,p.uniforms.radius.value=e.radius,l.setRenderTarget(e.map),l.clear(),l.renderBufferDirect(n,null,i,p,f,null)}function y(l){const t=l<<0;let e=o[t];return void 0===e&&(e=new Si({depthPacking:3201,morphTargets:l}),o[t]=e),e}function b(l){const t=l<<0;let e=s[t];return void 0===e&&(e=new Ei({morphTargets:l}),s[t]=e),e}function w(t,e,n,i,a,r,o){let s=null,h=y,c=t.customDepthMaterial;if(!0===i.isPointLight&&(h=b,c=t.customDistanceMaterial),void 0===c){let l=!1;!0===n.morphTargets&&(l=e.morphAttributes&&e.morphAttributes.position&&e.morphAttributes.position.length>0),s=h(l)}else s=c;if(l.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){const l=s.uuid,t=n.uuid;let e=m[l];void 0===e&&(e={},m[l]=e);let i=e[t];void 0===i&&(i=s.clone(),e[t]=i),s=i}return s.visible=n.visible,s.wireframe=n.wireframe,s.side=3===o?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:u[n.side],s.clipShadows=n.clipShadows,s.clippingPlanes=n.clippingPlanes,s.clipIntersection=n.clipIntersection,s.wireframeLinewidth=n.wireframeLinewidth,s.linewidth=n.linewidth,!0===i.isPointLight&&!0===s.isMeshDistanceMaterial&&(s.referencePosition.setFromMatrixPosition(i.matrixWorld),s.nearDistance=a,s.farDistance=r),s}function M(e,i,a,r,o){if(!1===e.visible)return;if(e.layers.test(i.layers)&&(e.isMesh||e.isLine||e.isPoints)&&(e.castShadow||e.receiveShadow&&3===o)&&(!e.frustumCulled||n.intersectsObject(e))){e.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,e.matrixWorld);const n=t.update(e),i=e.material;if(Array.isArray(i)){const t=n.groups;for(let s=0,m=t.length;s<m;s++){const m=t[s],h=i[m.materialIndex];if(h&&h.visible){const t=w(e,n,h,r,a.near,a.far,o);l.renderBufferDirect(a,null,n,t,e,m)}}}else if(i.visible){const t=w(e,n,i,r,a.near,a.far,o);l.renderBufferDirect(a,null,n,t,e,null)}}const s=e.children;for(let l=0,t=s.length;l<t;l++)M(s[l],i,a,r,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,e,o){if(!1===_.enabled)return;if(!1===_.autoUpdate&&!1===_.needsUpdate)return;if(0===t.length)return;const s=l.getRenderTarget(),m=l.getActiveCubeFace(),u=l.getActiveMipmapLevel(),d=l.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let s=0,m=t.length;s<m;s++){const m=t[s],u=m.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",m,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;i.copy(u.mapSize);const p=u.getFrameExtents();if(i.multiply(p),a.copy(u.mapSize),(i.x>q||i.y>q)&&(i.x>q&&(a.x=Math.floor(q/p.x),i.x=a.x*p.x,u.mapSize.x=a.x),i.y>q&&(a.y=Math.floor(q/p.y),i.y=a.y*p.y,u.mapSize.y=a.y)),null===u.map&&!u.isPointLightShadow&&3===this.type){const l={minFilter:c,magFilter:c,format:g};u.map=new $(i.x,i.y,l),u.map.texture.name=m.name+".shadowMap",u.mapPass=new $(i.x,i.y,l),u.camera.updateProjectionMatrix()}if(null===u.map){const l={minFilter:h,magFilter:h,format:g};u.map=new $(i.x,i.y,l),u.map.texture.name=m.name+".shadowMap",u.camera.updateProjectionMatrix()}l.setRenderTarget(u.map),l.clear();const x=u.getViewportCount();for(let l=0;l<x;l++){const t=u.getViewport(l);r.set(a.x*t.x,a.y*t.y,a.x*t.z,a.y*t.w),d.viewport(r),u.updateMatrices(m,l),n=u.getFrustum(),M(e,o,u.camera,m,this.type)}u.isPointLightShadow||3!==this.type||v(u,o),u.needsUpdate=!1}_.needsUpdate=!1,l.setRenderTarget(s,m,u)}}function Ai(l,t,e){const n=e.isWebGL2,i=new function(){let t=!1;const e=new K;let n=null;const i=new K(0,0,0,0);return{setMask:function(e){n===e||t||(l.colorMask(e,e,e,e),n=e)},setLocked:function(l){t=l},setClear:function(t,n,a,r,o){!0===o&&(t*=r,n*=r,a*=r),e.set(t,n,a,r),!1===i.equals(e)&&(l.clearColor(t,n,a,r),i.copy(e))},reset:function(){t=!1,n=null,i.set(-1,0,0,0)}}},a=new function(){let t=!1,e=null,n=null,i=null;return{setTest:function(l){l?B(2929):F(2929)},setMask:function(n){e===n||t||(l.depthMask(n),e=n)},setFunc:function(t){if(n!==t){if(t)switch(t){case 0:l.depthFunc(512);break;case 1:l.depthFunc(519);break;case 2:l.depthFunc(513);break;case 3:l.depthFunc(515);break;case 4:l.depthFunc(514);break;case 5:l.depthFunc(518);break;case 6:l.depthFunc(516);break;case 7:l.depthFunc(517);break;default:l.depthFunc(515)}else l.depthFunc(515);n=t}},setLocked:function(l){t=l},setClear:function(t){i!==t&&(l.clearDepth(t),i=t)},reset:function(){t=!1,e=null,n=null,i=null}}},o=new function(){let t=!1,e=null,n=null,i=null,a=null,r=null,o=null,s=null,m=null;return{setTest:function(l){t||(l?B(2960):F(2960))},setMask:function(n){e===n||t||(l.stencilMask(n),e=n)},setFunc:function(t,e,r){n===t&&i===e&&a===r||(l.stencilFunc(t,e,r),n=t,i=e,a=r)},setOp:function(t,e,n){r===t&&o===e&&s===n||(l.stencilOp(t,e,n),r=t,o=e,s=n)},setLocked:function(l){t=l},setClear:function(t){m!==t&&(l.clearStencil(t),m=t)},reset:function(){t=!1,e=null,n=null,i=null,a=null,r=null,o=null,s=null,m=null}}};let s={},m=null,h={},c=null,q=!1,u=null,d=null,p=null,x=null,f=null,_=null,g=null,v=!1,y=null,b=null,w=null,M=null,z=null;const S=l.getParameter(35661);let E=!1,T=0;const A=l.getParameter(7938);-1!==A.indexOf("WebGL")?(T=parseFloat(/^WebGL (\d)/.exec(A)[1]),E=T>=1):-1!==A.indexOf("OpenGL ES")&&(T=parseFloat(/^OpenGL ES (\d)/.exec(A)[1]),E=T>=2);let L=null,C={};const R=l.getParameter(3088),P=l.getParameter(2978),I=(new K).fromArray(R),D=(new K).fromArray(P);function N(t,e,n){const i=new Uint8Array(4),a=l.createTexture();l.bindTexture(t,a),l.texParameteri(t,10241,9728),l.texParameteri(t,10240,9728);for(let t=0;t<n;t++)l.texImage2D(e+t,0,6408,1,1,0,6408,5121,i);return a}const O={};function B(t){!0!==s[t]&&(l.enable(t),s[t]=!0)}function F(t){!1!==s[t]&&(l.disable(t),s[t]=!1)}O[3553]=N(3553,3553,1),O[34067]=N(34067,34069,6),i.setClear(0,0,0,1),a.setClear(1),o.setClear(0),B(2929),a.setFunc(3),G(!1),V(1),B(2884),U(0);const k={[r]:32774,101:32778,102:32779};if(n)k[103]=32775,k[104]=32776;else{const l=t.get("EXT_blend_minmax");null!==l&&(k[103]=l.MIN_EXT,k[104]=l.MAX_EXT)}const H={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function U(t,e,n,i,a,o,s,m){if(0!==t){if(!1===q&&(B(3042),q=!0),5===t)a=a||e,o=o||n,s=s||i,e===d&&a===f||(l.blendEquationSeparate(k[e],k[a]),d=e,f=a),n===p&&i===x&&o===_&&s===g||(l.blendFuncSeparate(H[n],H[i],H[o],H[s]),p=n,x=i,_=o,g=s),u=t,v=null;else if(t!==u||m!==v){if(d===r&&f===r||(l.blendEquation(32774),d=r,f=r),m)switch(t){case 1:l.blendFuncSeparate(1,771,1,771);break;case 2:l.blendFunc(1,1);break;case 3:l.blendFuncSeparate(0,0,769,771);break;case 4:l.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:l.blendFuncSeparate(770,771,1,771);break;case 2:l.blendFunc(770,1);break;case 3:l.blendFunc(0,769);break;case 4:l.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}p=null,x=null,_=null,g=null,u=t,v=m}}else!0===q&&(F(3042),q=!1)}function G(t){y!==t&&(t?l.frontFace(2304):l.frontFace(2305),y=t)}function V(t){0!==t?(B(2884),t!==b&&(1===t?l.cullFace(1029):2===t?l.cullFace(1028):l.cullFace(1032))):F(2884),b=t}function W(t,e,n){t?(B(32823),M===e&&z===n||(l.polygonOffset(e,n),M=e,z=n)):F(32823)}function j(t){void 0===t&&(t=33984+S-1),L!==t&&(l.activeTexture(t),L=t)}return{buffers:{color:i,depth:a,stencil:o},enable:B,disable:F,bindFramebuffer:function(t,e){return null===e&&null!==m&&(e=m),h[t]!==e&&(l.bindFramebuffer(t,e),h[t]=e,n&&(36009===t&&(h[36160]=e),36160===t&&(h[36009]=e)),!0)},bindXRFramebuffer:function(t){t!==m&&(l.bindFramebuffer(36160,t),m=t)},useProgram:function(t){return c!==t&&(l.useProgram(t),c=t,!0)},setBlending:U,setMaterial:function(l,t){2===l.side?F(2884):B(2884);let e=1===l.side;t&&(e=!e),G(e),1===l.blending&&!1===l.transparent?U(0):U(l.blending,l.blendEquation,l.blendSrc,l.blendDst,l.blendEquationAlpha,l.blendSrcAlpha,l.blendDstAlpha,l.premultipliedAlpha),a.setFunc(l.depthFunc),a.setTest(l.depthTest),a.setMask(l.depthWrite),i.setMask(l.colorWrite);const n=l.stencilWrite;o.setTest(n),n&&(o.setMask(l.stencilWriteMask),o.setFunc(l.stencilFunc,l.stencilRef,l.stencilFuncMask),o.setOp(l.stencilFail,l.stencilZFail,l.stencilZPass)),W(l.polygonOffset,l.polygonOffsetFactor,l.polygonOffsetUnits),!0===l.alphaToCoverage?B(32926):F(32926)},setFlipSided:G,setCullFace:V,setLineWidth:function(t){t!==w&&(E&&l.lineWidth(t),w=t)},setPolygonOffset:W,setScissorTest:function(l){l?B(3089):F(3089)},activeTexture:j,bindTexture:function(t,e){null===L&&j();let n=C[L];void 0===n&&(n={type:void 0,texture:void 0},C[L]=n),n.type===t&&n.texture===e||(l.bindTexture(t,e||O[t]),n.type=t,n.texture=e)},unbindTexture:function(){const t=C[L];void 0!==t&&void 0!==t.type&&(l.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{l.compressedTexImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texImage2D:function(){try{l.texImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texImage3D:function(){try{l.texImage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},scissor:function(t){!1===I.equals(t)&&(l.scissor(t.x,t.y,t.z,t.w),I.copy(t))},viewport:function(t){!1===D.equals(t)&&(l.viewport(t.x,t.y,t.z,t.w),D.copy(t))},reset:function(){l.disable(3042),l.disable(2884),l.disable(2929),l.disable(32823),l.disable(3089),l.disable(2960),l.disable(32926),l.blendEquation(32774),l.blendFunc(1,0),l.blendFuncSeparate(1,0,1,0),l.colorMask(!0,!0,!0,!0),l.clearColor(0,0,0,0),l.depthMask(!0),l.depthFunc(513),l.clearDepth(1),l.stencilMask(4294967295),l.stencilFunc(519,0,4294967295),l.stencilOp(7680,7680,7680),l.clearStencil(0),l.cullFace(1029),l.frontFace(2305),l.polygonOffset(0,0),l.activeTexture(33984),l.bindFramebuffer(36160,null),!0===n&&(l.bindFramebuffer(36009,null),l.bindFramebuffer(36008,null)),l.useProgram(null),l.lineWidth(1),l.scissor(0,0,l.canvas.width,l.canvas.height),l.viewport(0,0,l.canvas.width,l.canvas.height),s={},L=null,C={},m=null,h={},c=null,q=!1,u=null,d=null,p=null,x=null,f=null,_=null,g=null,v=!1,y=null,b=null,w=null,M=null,z=null,I.set(0,0,l.canvas.width,l.canvas.height),D.set(0,0,l.canvas.width,l.canvas.height),i.reset(),a.reset(),o.reset()}}}function Li(l,t,e,n,i,a,r){const b=i.isWebGL2,w=i.maxTextures,M=i.maxCubemapSize,z=i.maxTextureSize,S=i.maxSamples,E=new WeakMap;let T,A=!1;try{A="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(l){}function L(l,t){return A?new OffscreenCanvas(l,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function C(l,t,e,n){let i=1;if((l.width>n||l.height>n)&&(i=n/Math.max(l.width,l.height)),i<1||!0===t){if("undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&l instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&l instanceof ImageBitmap){const n=t?G:Math.floor,a=n(i*l.width),r=n(i*l.height);void 0===T&&(T=L(a,r));const o=e?L(a,r):T;return o.width=a,o.height=r,o.getContext("2d").drawImage(l,0,0,a,r),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+l.width+"x"+l.height+") to ("+a+"x"+r+")."),o}return"data"in l&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+l.width+"x"+l.height+")."),l}return l}function R(l){return U(l.width)&&U(l.height)}function P(l,t){return l.generateMipmaps&&t&&l.minFilter!==h&&l.minFilter!==c}function I(t,e,i,a){l.generateMipmap(t),n.get(e).__maxMipLevel=Math.log2(Math.max(i,a))}function D(e,n,i){if(!1===b)return n;if(null!==e){if(void 0!==l[e])return l[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=n;return 6403===n&&(5126===i&&(a=33326),5131===i&&(a=33325),5121===i&&(a=33321)),6407===n&&(5126===i&&(a=34837),5131===i&&(a=34843),5121===i&&(a=32849)),6408===n&&(5126===i&&(a=34836),5131===i&&(a=34842),5121===i&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||t.get("EXT_color_buffer_float"),a}function N(l){return l===h||1004===l||1005===l?9728:9729}function O(t){const e=t.target;e.removeEventListener("dispose",O),function(t){const e=n.get(t);void 0!==e.__webglInit&&(l.deleteTexture(e.__webglTexture),n.remove(t))}(e),e.isVideoTexture&&E.delete(e),r.memory.textures--}function B(t){const e=t.target;e.removeEventListener("dispose",B),function(t){const e=t.texture,i=n.get(t),a=n.get(e);if(t){if(void 0!==a.__webglTexture&&(l.deleteTexture(a.__webglTexture),r.memory.textures--),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++)l.deleteFramebuffer(i.__webglFramebuffer[t]),i.__webglDepthbuffer&&l.deleteRenderbuffer(i.__webglDepthbuffer[t]);else l.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&l.deleteRenderbuffer(i.__webglDepthbuffer),i.__webglMultisampledFramebuffer&&l.deleteFramebuffer(i.__webglMultisampledFramebuffer),i.__webglColorRenderbuffer&&l.deleteRenderbuffer(i.__webglColorRenderbuffer),i.__webglDepthRenderbuffer&&l.deleteRenderbuffer(i.__webglDepthRenderbuffer);if(t.isWebGLMultipleRenderTargets)for(let t=0,i=e.length;t<i;t++){const i=n.get(e[t]);i.__webglTexture&&(l.deleteTexture(i.__webglTexture),r.memory.textures--),n.remove(e[t])}n.remove(e),n.remove(t)}}(e)}let F=0;function k(l,t){const i=n.get(l);if(l.isVideoTexture&&function(l){const t=r.render.frame;E.get(l)!==t&&(E.set(l,t),l.update())}(l),l.version>0&&i.__version!==l.version){const e=l.image;if(void 0===e)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==e.complete)return void Y(i,l,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}e.activeTexture(33984+t),e.bindTexture(3553,i.__webglTexture)}function H(t,i){const r=n.get(t);t.version>0&&r.__version!==t.version?function(t,n,i){if(6!==n.image.length)return;X(t,n),e.activeTexture(33984+i),e.bindTexture(34067,t.__webglTexture),l.pixelStorei(37440,n.flipY),l.pixelStorei(37441,n.premultiplyAlpha),l.pixelStorei(3317,n.unpackAlignment),l.pixelStorei(37443,0);const r=n&&(n.isCompressedTexture||n.image[0].isCompressedTexture),o=n.image[0]&&n.image[0].isDataTexture,s=[];for(let l=0;l<6;l++)s[l]=r||o?o?n.image[l].image:n.image[l]:C(n.image[l],!1,!0,M);const m=s[0],h=R(m)||b,c=a.convert(n.format),q=a.convert(n.type),u=D(n.internalFormat,c,q);let d;if(j(34067,n,h),r){for(let l=0;l<6;l++){d=s[l].mipmaps;for(let t=0;t<d.length;t++){const i=d[t];n.format!==g&&n.format!==_?null!==c?e.compressedTexImage2D(34069+l,t,u,i.width,i.height,0,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):e.texImage2D(34069+l,t,u,i.width,i.height,0,c,q,i.data)}}t.__maxMipLevel=d.length-1}else{d=n.mipmaps;for(let l=0;l<6;l++)if(o){e.texImage2D(34069+l,0,u,s[l].width,s[l].height,0,c,q,s[l].data);for(let t=0;t<d.length;t++){const n=d[t].image[l].image;e.texImage2D(34069+l,t+1,u,n.width,n.height,0,c,q,n.data)}}else{e.texImage2D(34069+l,0,u,c,q,s[l]);for(let t=0;t<d.length;t++){const n=d[t];e.texImage2D(34069+l,t+1,u,c,q,n.image[l])}}t.__maxMipLevel=d.length}P(n,h)&&I(34067,n,m.width,m.height),t.__version=n.version,n.onUpdate&&n.onUpdate(n)}(r,t,i):(e.activeTexture(33984+i),e.bindTexture(34067,r.__webglTexture))}const V={[o]:10497,[s]:33071,[m]:33648},W={[h]:9728,1004:9984,1005:9986,[c]:9729,1007:9985,[q]:9987};function j(e,a,r){if(r?(l.texParameteri(e,10242,V[a.wrapS]),l.texParameteri(e,10243,V[a.wrapT]),32879!==e&&35866!==e||l.texParameteri(e,32882,V[a.wrapR]),l.texParameteri(e,10240,W[a.magFilter]),l.texParameteri(e,10241,W[a.minFilter])):(l.texParameteri(e,10242,33071),l.texParameteri(e,10243,33071),32879!==e&&35866!==e||l.texParameteri(e,32882,33071),a.wrapS===s&&a.wrapT===s||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),l.texParameteri(e,10240,N(a.magFilter)),l.texParameteri(e,10241,N(a.minFilter)),a.minFilter!==h&&a.minFilter!==c&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");if(a.type===p&&!1===t.has("OES_texture_float_linear"))return;if(!1===b&&a.type===x&&!1===t.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||n.get(a).__currentAnisotropy)&&(l.texParameterf(e,r.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy)}}function X(t,e){void 0===t.__webglInit&&(t.__webglInit=!0,e.addEventListener("dispose",O),t.__webglTexture=l.createTexture(),r.memory.textures++)}function Y(t,n,i){let r=3553;n.isDataTexture2DArray&&(r=35866),n.isDataTexture3D&&(r=32879),X(t,n),e.activeTexture(33984+i),e.bindTexture(r,t.__webglTexture),l.pixelStorei(37440,n.flipY),l.pixelStorei(37441,n.premultiplyAlpha),l.pixelStorei(3317,n.unpackAlignment),l.pixelStorei(37443,0);const o=function(l){return!b&&(l.wrapS!==s||l.wrapT!==s||l.minFilter!==h&&l.minFilter!==c)}(n)&&!1===R(n.image),m=C(n.image,o,!1,z),q=R(m)||b,x=a.convert(n.format);let w,M=a.convert(n.type),S=D(n.internalFormat,x,M);j(r,n,q);const E=n.mipmaps;if(n.isDepthTexture)S=6402,b?S=n.type===p?36012:n.type===d?33190:n.type===f?35056:33189:n.type===p&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),n.format===v&&6402===S&&n.type!==u&&n.type!==d&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=u,M=a.convert(n.type)),n.format===y&&6402===S&&(S=34041,n.type!==f&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=f,M=a.convert(n.type))),e.texImage2D(3553,0,S,m.width,m.height,0,x,M,null);else if(n.isDataTexture)if(E.length>0&&q){for(let l=0,t=E.length;l<t;l++)w=E[l],e.texImage2D(3553,l,S,w.width,w.height,0,x,M,w.data);n.generateMipmaps=!1,t.__maxMipLevel=E.length-1}else e.texImage2D(3553,0,S,m.width,m.height,0,x,M,m.data),t.__maxMipLevel=0;else if(n.isCompressedTexture){for(let l=0,t=E.length;l<t;l++)w=E[l],n.format!==g&&n.format!==_?null!==x?e.compressedTexImage2D(3553,l,S,w.width,w.height,0,w.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):e.texImage2D(3553,l,S,w.width,w.height,0,x,M,w.data);t.__maxMipLevel=E.length-1}else if(n.isDataTexture2DArray)e.texImage3D(35866,0,S,m.width,m.height,m.depth,0,x,M,m.data),t.__maxMipLevel=0;else if(n.isDataTexture3D)e.texImage3D(32879,0,S,m.width,m.height,m.depth,0,x,M,m.data),t.__maxMipLevel=0;else if(E.length>0&&q){for(let l=0,t=E.length;l<t;l++)w=E[l],e.texImage2D(3553,l,S,x,M,w);n.generateMipmaps=!1,t.__maxMipLevel=E.length-1}else e.texImage2D(3553,0,S,x,M,m),t.__maxMipLevel=0;P(n,q)&&I(r,n,m.width,m.height),t.__version=n.version,n.onUpdate&&n.onUpdate(n)}function J(t,i,r,o,s){const m=a.convert(r.format),h=a.convert(r.type),c=D(r.internalFormat,m,h);32879===s||35866===s?e.texImage3D(s,0,c,i.width,i.height,i.depth,0,m,h,null):e.texImage2D(s,0,c,i.width,i.height,0,m,h,null),e.bindFramebuffer(36160,t),l.framebufferTexture2D(36160,o,s,n.get(r).__webglTexture,0),e.bindFramebuffer(36160,null)}function Z(t,e,n){if(l.bindRenderbuffer(36161,t),e.depthBuffer&&!e.stencilBuffer){let i=33189;if(n){const t=e.depthTexture;t&&t.isDepthTexture&&(t.type===p?i=36012:t.type===d&&(i=33190));const n=Q(e);l.renderbufferStorageMultisample(36161,n,i,e.width,e.height)}else l.renderbufferStorage(36161,i,e.width,e.height);l.framebufferRenderbuffer(36160,36096,36161,t)}else if(e.depthBuffer&&e.stencilBuffer){if(n){const t=Q(e);l.renderbufferStorageMultisample(36161,t,35056,e.width,e.height)}else l.renderbufferStorage(36161,34041,e.width,e.height);l.framebufferRenderbuffer(36160,33306,36161,t)}else{const t=!0===e.isWebGLMultipleRenderTargets?e.texture[0]:e.texture,i=a.convert(t.format),r=a.convert(t.type),o=D(t.internalFormat,i,r);if(n){const t=Q(e);l.renderbufferStorageMultisample(36161,t,o,e.width,e.height)}else l.renderbufferStorage(36161,o,e.width,e.height)}l.bindRenderbuffer(36161,null)}function Q(l){return b&&l.isWebGLMultisampleRenderTarget?Math.min(S,l.samples):0}let K=!1,$=!1;this.allocateTextureUnit=function(){const l=F;return l>=w&&console.warn("THREE.WebGLTextures: Trying to use "+l+" texture units while this GPU supports only "+w),F+=1,l},this.resetTextureUnits=function(){F=0},this.setTexture2D=k,this.setTexture2DArray=function(l,t){const i=n.get(l);l.version>0&&i.__version!==l.version?Y(i,l,t):(e.activeTexture(33984+t),e.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(l,t){const i=n.get(l);l.version>0&&i.__version!==l.version?Y(i,l,t):(e.activeTexture(33984+t),e.bindTexture(32879,i.__webglTexture))},this.setTextureCube=H,this.setupRenderTarget=function(t){const o=t.texture,s=n.get(t),m=n.get(o);t.addEventListener("dispose",B),!0!==t.isWebGLMultipleRenderTargets&&(m.__webglTexture=l.createTexture(),m.__version=o.version,r.memory.textures++);const h=!0===t.isWebGLCubeRenderTarget,c=!0===t.isWebGLMultipleRenderTargets,q=!0===t.isWebGLMultisampleRenderTarget,u=o.isDataTexture3D||o.isDataTexture2DArray,d=R(t)||b;if(!b||o.format!==_||o.type!==p&&o.type!==x||(o.format=g,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),h){s.__webglFramebuffer=[];for(let t=0;t<6;t++)s.__webglFramebuffer[t]=l.createFramebuffer()}else if(s.__webglFramebuffer=l.createFramebuffer(),c)if(i.drawBuffers){const e=t.texture;for(let t=0,i=e.length;t<i;t++){const i=n.get(e[t]);void 0===i.__webglTexture&&(i.__webglTexture=l.createTexture(),r.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(q)if(b){s.__webglMultisampledFramebuffer=l.createFramebuffer(),s.__webglColorRenderbuffer=l.createRenderbuffer(),l.bindRenderbuffer(36161,s.__webglColorRenderbuffer);const n=a.convert(o.format),i=a.convert(o.type),r=D(o.internalFormat,n,i),m=Q(t);l.renderbufferStorageMultisample(36161,m,r,t.width,t.height),e.bindFramebuffer(36160,s.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(36160,36064,36161,s.__webglColorRenderbuffer),l.bindRenderbuffer(36161,null),t.depthBuffer&&(s.__webglDepthRenderbuffer=l.createRenderbuffer(),Z(s.__webglDepthRenderbuffer,t,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(h){e.bindTexture(34067,m.__webglTexture),j(34067,o,d);for(let l=0;l<6;l++)J(s.__webglFramebuffer[l],t,o,36064,34069+l);P(o,d)&&I(34067,o,t.width,t.height),e.bindTexture(34067,null)}else if(c){const l=t.texture;for(let i=0,a=l.length;i<a;i++){const a=l[i],r=n.get(a);e.bindTexture(3553,r.__webglTexture),j(3553,a,d),J(s.__webglFramebuffer,t,a,36064+i,3553),P(a,d)&&I(3553,a,t.width,t.height)}e.bindTexture(3553,null)}else{let l=3553;u&&(b?l=o.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),e.bindTexture(l,m.__webglTexture),j(l,o,d),J(s.__webglFramebuffer,t,o,36064,l),P(o,d)&&I(3553,o,t.width,t.height),e.bindTexture(3553,null)}t.depthBuffer&&function(t){const i=n.get(t),a=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),k(i.depthTexture,0);const a=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===v)l.framebufferTexture2D(36160,36096,3553,a,0);else{if(i.depthTexture.format!==y)throw new Error("Unknown depthTexture format");l.framebufferTexture2D(36160,33306,3553,a,0)}}(i.__webglFramebuffer,t)}else if(a){i.__webglDepthbuffer=[];for(let n=0;n<6;n++)e.bindFramebuffer(36160,i.__webglFramebuffer[n]),i.__webglDepthbuffer[n]=l.createRenderbuffer(),Z(i.__webglDepthbuffer[n],t,!1)}else e.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=l.createRenderbuffer(),Z(i.__webglDepthbuffer,t,!1);e.bindFramebuffer(36160,null)}(t)},this.updateRenderTargetMipmap=function(l){const t=R(l)||b,i=!0===l.isWebGLMultipleRenderTargets?l.texture:[l.texture];for(let a=0,r=i.length;a<r;a++){const r=i[a];if(P(r,t)){const t=l.isWebGLCubeRenderTarget?34067:3553,i=n.get(r).__webglTexture;e.bindTexture(t,i),I(t,r,l.width,l.height),e.bindTexture(t,null)}}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(b){const i=t.width,a=t.height;let r=16384;t.depthBuffer&&(r|=256),t.stencilBuffer&&(r|=1024);const o=n.get(t);e.bindFramebuffer(36008,o.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,o.__webglFramebuffer),l.blitFramebuffer(0,0,i,a,0,0,i,a,r,9728),e.bindFramebuffer(36008,null),e.bindFramebuffer(36009,o.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(l,t){l&&l.isWebGLRenderTarget&&(!1===K&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),K=!0),l=l.texture),k(l,t)},this.safeSetTextureCube=function(l,t){l&&l.isWebGLCubeRenderTarget&&(!1===$&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),$=!0),l=l.texture),H(l,t)}}function Ci(l,t,e){const n=e.isWebGL2;return{convert:function(l){let e;if(1009===l)return 5121;if(1017===l)return 32819;if(1018===l)return 32820;if(1019===l)return 33635;if(1010===l)return 5120;if(1011===l)return 5122;if(l===u)return 5123;if(1013===l)return 5124;if(l===d)return 5125;if(l===p)return 5126;if(l===x)return n?5131:(e=t.get("OES_texture_half_float"),null!==e?e.HALF_FLOAT_OES:null);if(1021===l)return 6406;if(l===_)return 6407;if(l===g)return 6408;if(1024===l)return 6409;if(1025===l)return 6410;if(l===v)return 6402;if(l===y)return 34041;if(1028===l)return 6403;if(1029===l)return 36244;if(1030===l)return 33319;if(1031===l)return 33320;if(1032===l)return 36248;if(1033===l)return 36249;if(33776===l||33777===l||33778===l||33779===l){if(e=t.get("WEBGL_compressed_texture_s3tc"),null===e)return null;if(33776===l)return e.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===l)return e.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===l)return e.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===l)return e.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===l||35841===l||35842===l||35843===l){if(e=t.get("WEBGL_compressed_texture_pvrtc"),null===e)return null;if(35840===l)return e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===l)return e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===l)return e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===l)return e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===l)return e=t.get("WEBGL_compressed_texture_etc1"),null!==e?e.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===l||37496===l)&&(e=t.get("WEBGL_compressed_texture_etc"),null!==e)){if(37492===l)return e.COMPRESSED_RGB8_ETC2;if(37496===l)return e.COMPRESSED_RGBA8_ETC2_EAC}return 37808===l||37809===l||37810===l||37811===l||37812===l||37813===l||37814===l||37815===l||37816===l||37817===l||37818===l||37819===l||37820===l||37821===l||37840===l||37841===l||37842===l||37843===l||37844===l||37845===l||37846===l||37847===l||37848===l||37849===l||37850===l||37851===l||37852===l||37853===l?(e=t.get("WEBGL_compressed_texture_astc"),null!==e?l:null):36492===l?(e=t.get("EXT_texture_compression_bptc"),null!==e?l:null):l===f?n?34042:(e=t.get("WEBGL_depth_texture"),null!==e?e.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}Ei.prototype.isMeshDistanceMaterial=!0;class Ri extends pe{constructor(l=[]){super(),this.cameras=l}}Ri.prototype.isArrayCamera=!0;class Pi extends nt{constructor(){super(),this.type="Group"}}Pi.prototype.isGroup=!0;const Ii={type:"move"};class Di{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Pi,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Pi,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new tl,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new tl),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Pi,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new tl,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new tl),this._grip}dispatchEvent(l){return null!==this._targetRay&&this._targetRay.dispatchEvent(l),null!==this._grip&&this._grip.dispatchEvent(l),null!==this._hand&&this._hand.dispatchEvent(l),this}disconnect(l){return this.dispatchEvent({type:"disconnected",data:l}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(l,t,e){let n=null,i=null,a=null;const r=this._targetRay,o=this._grip,s=this._hand;if(l&&"visible-blurred"!==t.session.visibilityState)if(null!==r&&(n=t.getPose(l.targetRaySpace,e),null!==n&&(r.matrix.fromArray(n.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),n.linearVelocity?(r.hasLinearVelocity=!0,r.linearVelocity.copy(n.linearVelocity)):r.hasLinearVelocity=!1,n.angularVelocity?(r.hasAngularVelocity=!0,r.angularVelocity.copy(n.angularVelocity)):r.hasAngularVelocity=!1,this.dispatchEvent(Ii))),s&&l.hand){a=!0;for(const n of l.hand.values()){const l=t.getJointPose(n,e);if(void 0===s.joints[n.jointName]){const l=new Pi;l.matrixAutoUpdate=!1,l.visible=!1,s.joints[n.jointName]=l,s.add(l)}const i=s.joints[n.jointName];null!==l&&(i.matrix.fromArray(l.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.jointRadius=l.radius),i.visible=null!==l}const n=s.joints["index-finger-tip"],i=s.joints["thumb-tip"],r=n.position.distanceTo(i.position),o=.02,m=.005;s.inputState.pinching&&r>o+m?(s.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:l.handedness,target:this})):!s.inputState.pinching&&r<=o-m&&(s.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:l.handedness,target:this}))}else null!==o&&l.gripSpace&&(i=t.getPose(l.gripSpace,e),null!==i&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1));return null!==r&&(r.visible=null!==n),null!==o&&(o.visible=null!==i),null!==s&&(s.visible=null!==a),this}}class Ni extends P{constructor(l,t){super();const e=this,n=l.state;let i=null,a=1,r=null,o="local-floor",s=null;const m=[],h=new Map,c=new pe;c.layers.enable(1),c.viewport=new K;const q=new pe;q.layers.enable(2),q.viewport=new K;const u=[c,q],d=new Ri;d.layers.enable(1),d.layers.enable(2);let p=null,x=null;function f(l){const t=h.get(l.inputSource);t&&t.dispatchEvent({type:l.type,data:l.inputSource})}function _(){h.forEach((function(l,t){l.disconnect(t)})),h.clear(),p=null,x=null,n.bindXRFramebuffer(null),l.setRenderTarget(l.getRenderTarget()),M.stop(),e.isPresenting=!1,e.dispatchEvent({type:"sessionend"})}function g(l){const t=i.inputSources;for(let l=0;l<m.length;l++)h.set(t[l],m[l]);for(let t=0;t<l.removed.length;t++){const e=l.removed[t],n=h.get(e);n&&(n.dispatchEvent({type:"disconnected",data:e}),h.delete(e))}for(let t=0;t<l.added.length;t++){const e=l.added[t],n=h.get(e);n&&n.dispatchEvent({type:"connected",data:e})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(l){let t=m[l];return void 0===t&&(t=new Di,m[l]=t),t.getTargetRaySpace()},this.getControllerGrip=function(l){let t=m[l];return void 0===t&&(t=new Di,m[l]=t),t.getGripSpace()},this.getHand=function(l){let t=m[l];return void 0===t&&(t=new Di,m[l]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(l){a=l,!0===e.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(l){o=l,!0===e.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return r},this.getSession=function(){return i},this.setSession=async function(l){if(i=l,null!==i){i.addEventListener("select",f),i.addEventListener("selectstart",f),i.addEventListener("selectend",f),i.addEventListener("squeeze",f),i.addEventListener("squeezestart",f),i.addEventListener("squeezeend",f),i.addEventListener("end",_),i.addEventListener("inputsourceschange",g);const l=t.getContextAttributes();!0!==l.xrCompatible&&await t.makeXRCompatible();const n={antialias:l.antialias,alpha:l.alpha,depth:l.depth,stencil:l.stencil,framebufferScaleFactor:a},s=new XRWebGLLayer(i,t,n);i.updateRenderState({baseLayer:s}),r=await i.requestReferenceSpace(o),M.setContext(i),M.start(),e.isPresenting=!0,e.dispatchEvent({type:"sessionstart"})}};const v=new tl,y=new tl;function b(l,t){null===t?l.matrixWorld.copy(l.matrix):l.matrixWorld.multiplyMatrices(t.matrixWorld,l.matrix),l.matrixWorldInverse.copy(l.matrixWorld).invert()}this.updateCamera=function(l){if(null===i)return;d.near=q.near=c.near=l.near,d.far=q.far=c.far=l.far,p===d.near&&x===d.far||(i.updateRenderState({depthNear:d.near,depthFar:d.far}),p=d.near,x=d.far);const t=l.parent,e=d.cameras;b(d,t);for(let l=0;l<e.length;l++)b(e[l],t);l.matrixWorld.copy(d.matrixWorld),l.matrix.copy(d.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale);const n=l.children;for(let l=0,t=n.length;l<t;l++)n[l].updateMatrixWorld(!0);2===e.length?function(l,t,e){v.setFromMatrixPosition(t.matrixWorld),y.setFromMatrixPosition(e.matrixWorld);const n=v.distanceTo(y),i=t.projectionMatrix.elements,a=e.projectionMatrix.elements,r=i[14]/(i[10]-1),o=i[14]/(i[10]+1),s=(i[9]+1)/i[5],m=(i[9]-1)/i[5],h=(i[8]-1)/i[0],c=(a[8]+1)/a[0],q=r*h,u=r*c,d=n/(-h+c),p=d*-h;t.matrixWorld.decompose(l.position,l.quaternion,l.scale),l.translateX(p),l.translateZ(d),l.matrixWorld.compose(l.position,l.quaternion,l.scale),l.matrixWorldInverse.copy(l.matrixWorld).invert();const x=r+d,f=o+d,_=q-p,g=u+(n-p),b=s*o/f*x,w=m*o/f*x;l.projectionMatrix.makePerspective(_,g,b,w,x,f)}(d,c,q):d.projectionMatrix.copy(c.projectionMatrix)},this.getCamera=function(){return d};let w=null;const M=new we;M.setAnimationLoop((function(l,t){if(s=t.getViewerPose(r),null!==s){const l=s.views,t=i.renderState.baseLayer;n.bindXRFramebuffer(t.framebuffer);let e=!1;l.length!==d.cameras.length&&(d.cameras.length=0,e=!0);for(let n=0;n<l.length;n++){const i=l[n],a=t.getViewport(i),r=u[n];r.matrix.fromArray(i.transform.matrix),r.projectionMatrix.fromArray(i.projectionMatrix),r.viewport.set(a.x,a.y,a.width,a.height),0===n&&d.matrix.copy(r.matrix),!0===e&&d.cameras.push(r)}}const e=i.inputSources;for(let l=0;l<m.length;l++){const n=m[l],i=e[l];n.update(i,t,r)}w&&w(l,t)})),this.setAnimationLoop=function(l){w=l},this.dispose=function(){}}}function Oi(l){function t(t,e){t.opacity.value=e.opacity,e.color&&t.diffuse.value.copy(e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap);const n=l.get(e).envMap;if(n){t.envMap.value=n,t.flipEnvMap.value=n.isCubeTexture&&n._needsFlipEnvMap?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio;const i=l.get(n).__maxMipLevel;void 0!==i&&(t.maxMipLevel.value=i)}let i,a;e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?i=e.map:e.specularMap?i=e.specularMap:e.displacementMap?i=e.displacementMap:e.normalMap?i=e.normalMap:e.bumpMap?i=e.bumpMap:e.roughnessMap?i=e.roughnessMap:e.metalnessMap?i=e.metalnessMap:e.alphaMap?i=e.alphaMap:e.emissiveMap?i=e.emissiveMap:e.clearcoatMap?i=e.clearcoatMap:e.clearcoatNormalMap?i=e.clearcoatNormalMap:e.clearcoatRoughnessMap&&(i=e.clearcoatRoughnessMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix)),e.aoMap?a=e.aoMap:e.lightMap&&(a=e.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),t.uv2Transform.value.copy(a.matrix))}function e(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),l.get(e).envMap&&(t.envMapIntensity.value=e.envMapIntensity)}return{refreshFogUniforms:function(l,t){l.fogColor.value.copy(t.color),t.isFog?(l.fogNear.value=t.near,l.fogFar.value=t.far):t.isFogExp2&&(l.fogDensity.value=t.density)},refreshMaterialUniforms:function(l,n,i,a,r){n.isMeshBasicMaterial?t(l,n):n.isMeshLambertMaterial?(t(l,n),function(l,t){t.emissiveMap&&(l.emissiveMap.value=t.emissiveMap)}(l,n)):n.isMeshToonMaterial?(t(l,n),function(l,t){t.gradientMap&&(l.gradientMap.value=t.gradientMap),t.emissiveMap&&(l.emissiveMap.value=t.emissiveMap),t.bumpMap&&(l.bumpMap.value=t.bumpMap,l.bumpScale.value=t.bumpScale,1===t.side&&(l.bumpScale.value*=-1)),t.normalMap&&(l.normalMap.value=t.normalMap,l.normalScale.value.copy(t.normalScale),1===t.side&&l.normalScale.value.negate()),t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias)}(l,n)):n.isMeshPhongMaterial?(t(l,n),function(l,t){l.specular.value.copy(t.specular),l.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(l.emissiveMap.value=t.emissiveMap),t.bumpMap&&(l.bumpMap.value=t.bumpMap,l.bumpScale.value=t.bumpScale,1===t.side&&(l.bumpScale.value*=-1)),t.normalMap&&(l.normalMap.value=t.normalMap,l.normalScale.value.copy(t.normalScale),1===t.side&&l.normalScale.value.negate()),t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias)}(l,n)):n.isMeshStandardMaterial?(t(l,n),n.isMeshPhysicalMaterial?function(l,t,n){e(l,t),l.reflectivity.value=t.reflectivity,l.clearcoat.value=t.clearcoat,l.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&l.sheen.value.copy(t.sheen),t.clearcoatMap&&(l.clearcoatMap.value=t.clearcoatMap),t.clearcoatRoughnessMap&&(l.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap),t.clearcoatNormalMap&&(l.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),l.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&l.clearcoatNormalScale.value.negate()),l.transmission.value=t.transmission,t.transmissionMap&&(l.transmissionMap.value=t.transmissionMap),t.transmission>0&&(l.transmissionSamplerMap.value=n.texture,l.transmissionSamplerSize.value.set(n.width,n.height)),l.thickness.value=t.thickness,t.thicknessMap&&(l.thicknessMap.value=t.thicknessMap),l.attenuationDistance.value=t.attenuationDistance,l.attenuationColor.value.copy(t.attenuationColor)}(l,n,r):e(l,n)):n.isMeshMatcapMaterial?(t(l,n),function(l,t){t.matcap&&(l.matcap.value=t.matcap),t.bumpMap&&(l.bumpMap.value=t.bumpMap,l.bumpScale.value=t.bumpScale,1===t.side&&(l.bumpScale.value*=-1)),t.normalMap&&(l.normalMap.value=t.normalMap,l.normalScale.value.copy(t.normalScale),1===t.side&&l.normalScale.value.negate()),t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias)}(l,n)):n.isMeshDepthMaterial?(t(l,n),function(l,t){t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias)}(l,n)):n.isMeshDistanceMaterial?(t(l,n),function(l,t){t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias),l.referencePosition.value.copy(t.referencePosition),l.nearDistance.value=t.nearDistance,l.farDistance.value=t.farDistance}(l,n)):n.isMeshNormalMaterial?(t(l,n),function(l,t){t.bumpMap&&(l.bumpMap.value=t.bumpMap,l.bumpScale.value=t.bumpScale,1===t.side&&(l.bumpScale.value*=-1)),t.normalMap&&(l.normalMap.value=t.normalMap,l.normalScale.value.copy(t.normalScale),1===t.side&&l.normalScale.value.negate()),t.displacementMap&&(l.displacementMap.value=t.displacementMap,l.displacementScale.value=t.displacementScale,l.displacementBias.value=t.displacementBias)}(l,n)):n.isLineBasicMaterial?(function(l,t){l.diffuse.value.copy(t.color),l.opacity.value=t.opacity}(l,n),n.isLineDashedMaterial&&function(l,t){l.dashSize.value=t.dashSize,l.totalSize.value=t.dashSize+t.gapSize,l.scale.value=t.scale}(l,n)):n.isPointsMaterial?function(l,t,e,n){let i;l.diffuse.value.copy(t.color),l.opacity.value=t.opacity,l.size.value=t.size*e,l.scale.value=.5*n,t.map&&(l.map.value=t.map),t.alphaMap&&(l.alphaMap.value=t.alphaMap),t.map?i=t.map:t.alphaMap&&(i=t.alphaMap),void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),l.uvTransform.value.copy(i.matrix))}(l,n,i,a):n.isSpriteMaterial?function(l,t){let e;l.diffuse.value.copy(t.color),l.opacity.value=t.opacity,l.rotation.value=t.rotation,t.map&&(l.map.value=t.map),t.alphaMap&&(l.alphaMap.value=t.alphaMap),t.map?e=t.map:t.alphaMap&&(e=t.alphaMap),void 0!==e&&(!0===e.matrixAutoUpdate&&e.updateMatrix(),l.uvTransform.value.copy(e.matrix))}(l,n):n.isShadowMaterial?(l.color.value.copy(n.color),l.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function Bi(l){const t=void 0!==(l=l||{}).canvas?l.canvas:function(){const l=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return l.style.display="block",l}(),e=void 0!==l.context?l.context:null,n=void 0!==l.alpha&&l.alpha,i=void 0===l.depth||l.depth,a=void 0===l.stencil||l.stencil,r=void 0!==l.antialias&&l.antialias,o=void 0===l.premultipliedAlpha||l.premultipliedAlpha,m=void 0!==l.preserveDrawingBuffer&&l.preserveDrawingBuffer,c=void 0!==l.powerPreference?l.powerPreference:"default",u=void 0!==l.failIfMajorPerformanceCaveat&&l.failIfMajorPerformanceCaveat;let d=null,f=null;const _=[],v=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=T,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const y=this;let b=!1,w=0,M=0,z=null,S=-1,E=null;const A=new K,L=new K;let C=null,R=t.width,P=t.height,I=1,D=null,N=null;const O=new K(0,0,R,P),B=new K(0,0,R,P);let F=!1;const k=[],H=new be;let U=!1,G=!1,V=null;const j=new Rl,X=new tl,Y={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function J(){return null===z?I:1}let Z,Q,ll,el,nl,il,al,rl,ol,sl,ml,hl,cl,ql,ul,dl,pl,xl,fl,_l,gl,vl,yl=e;function bl(l,e){for(let n=0;n<l.length;n++){const i=l[n],a=t.getContext(i,e);if(null!==a)return a}return null}try{const l={alpha:n,depth:i,stencil:a,antialias:r,premultipliedAlpha:o,preserveDrawingBuffer:m,powerPreference:c,failIfMajorPerformanceCaveat:u};if(t.addEventListener("webglcontextlost",zl,!1),t.addEventListener("webglcontextrestored",Sl,!1),null===yl){const t=["webgl2","webgl","experimental-webgl"];if(!0===y.isWebGL1Renderer&&t.shift(),yl=bl(t,l),null===yl)throw bl(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===yl.getShaderPrecisionFormat&&(yl.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(l){throw console.error("THREE.WebGLRenderer: "+l.message),l}function wl(){Z=new De(yl),Q=new Re(yl,Z,l),Z.init(Q),gl=new Ci(yl,Z,Q),ll=new Ai(yl,Z,Q),k[0]=1029,el=new Be(yl),nl=new pi,il=new Li(yl,Z,ll,nl,Q,gl,el),al=new Ie(y),rl=new Me(yl,Q),vl=new Le(yl,Z,rl,Q),ol=new Ne(yl,rl,el,vl),sl=new Ue(yl,ol,rl,el),xl=new He(yl),ul=new Pe(nl),ml=new di(y,al,Z,Q,vl,ul),hl=new Oi(nl),cl=new gi(nl),ql=new zi(Z,Q),pl=new Ae(y,al,ll,sl,o),dl=new Ti(y,sl,Q),fl=new Ce(yl,Z,el,Q),_l=new Oe(yl,Z,el,Q),el.programs=ml.programs,y.capabilities=Q,y.extensions=Z,y.properties=nl,y.renderLists=cl,y.shadowMap=dl,y.state=ll,y.info=el}wl();const Ml=new Ni(y,yl);function zl(l){l.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function Sl(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const l=el.autoReset,t=dl.enabled,e=dl.autoUpdate,n=dl.needsUpdate,i=dl.type;wl(),el.autoReset=l,dl.enabled=t,dl.autoUpdate=e,dl.needsUpdate=n,dl.type=i}function El(l){const t=l.target;t.removeEventListener("dispose",El),function(l){(function(l){const t=nl.get(l).programs;void 0!==t&&t.forEach((function(l){ml.releaseProgram(l)}))})(l),nl.remove(l)}(t)}this.xr=Ml,this.getContext=function(){return yl},this.getContextAttributes=function(){return yl.getContextAttributes()},this.forceContextLoss=function(){const l=Z.get("WEBGL_lose_context");l&&l.loseContext()},this.forceContextRestore=function(){const l=Z.get("WEBGL_lose_context");l&&l.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(l){void 0!==l&&(I=l,this.setSize(R,P,!1))},this.getSize=function(l){return void 0===l&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),l=new W),l.set(R,P)},this.setSize=function(l,e,n){Ml.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(R=l,P=e,t.width=Math.floor(l*I),t.height=Math.floor(e*I),!1!==n&&(t.style.width=l+"px",t.style.height=e+"px"),this.setViewport(0,0,l,e))},this.getDrawingBufferSize=function(l){return void 0===l&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),l=new W),l.set(R*I,P*I).floor()},this.setDrawingBufferSize=function(l,e,n){R=l,P=e,I=n,t.width=Math.floor(l*n),t.height=Math.floor(e*n),this.setViewport(0,0,l,e)},this.getCurrentViewport=function(l){return void 0===l&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),l=new K),l.copy(A)},this.getViewport=function(l){return l.copy(O)},this.setViewport=function(l,t,e,n){l.isVector4?O.set(l.x,l.y,l.z,l.w):O.set(l,t,e,n),ll.viewport(A.copy(O).multiplyScalar(I).floor())},this.getScissor=function(l){return l.copy(B)},this.setScissor=function(l,t,e,n){l.isVector4?B.set(l.x,l.y,l.z,l.w):B.set(l,t,e,n),ll.scissor(L.copy(B).multiplyScalar(I).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(l){ll.setScissorTest(F=l)},this.setOpaqueSort=function(l){D=l},this.setTransparentSort=function(l){N=l},this.getClearColor=function(l){return void 0===l&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),l=new Et),l.copy(pl.getClearColor())},this.setClearColor=function(){pl.setClearColor.apply(pl,arguments)},this.getClearAlpha=function(){return pl.getClearAlpha()},this.setClearAlpha=function(){pl.setClearAlpha.apply(pl,arguments)},this.clear=function(l,t,e){let n=0;(void 0===l||l)&&(n|=16384),(void 0===t||t)&&(n|=256),(void 0===e||e)&&(n|=1024),yl.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",zl,!1),t.removeEventListener("webglcontextrestored",Sl,!1),cl.dispose(),ql.dispose(),nl.dispose(),al.dispose(),sl.dispose(),vl.dispose(),Ml.dispose(),Ml.removeEventListener("sessionstart",Al),Ml.removeEventListener("sessionend",Ll),V&&(V.dispose(),V=null),Cl.stop()},this.renderBufferImmediate=function(l,t){vl.initAttributes();const e=nl.get(l);l.hasPositions&&!e.position&&(e.position=yl.createBuffer()),l.hasNormals&&!e.normal&&(e.normal=yl.createBuffer()),l.hasUvs&&!e.uv&&(e.uv=yl.createBuffer()),l.hasColors&&!e.color&&(e.color=yl.createBuffer());const n=t.getAttributes();l.hasPositions&&(yl.bindBuffer(34962,e.position),yl.bufferData(34962,l.positionArray,35048),vl.enableAttribute(n.position),yl.vertexAttribPointer(n.position,3,5126,!1,0,0)),l.hasNormals&&(yl.bindBuffer(34962,e.normal),yl.bufferData(34962,l.normalArray,35048),vl.enableAttribute(n.normal),yl.vertexAttribPointer(n.normal,3,5126,!1,0,0)),l.hasUvs&&(yl.bindBuffer(34962,e.uv),yl.bufferData(34962,l.uvArray,35048),vl.enableAttribute(n.uv),yl.vertexAttribPointer(n.uv,2,5126,!1,0,0)),l.hasColors&&(yl.bindBuffer(34962,e.color),yl.bufferData(34962,l.colorArray,35048),vl.enableAttribute(n.color),yl.vertexAttribPointer(n.color,3,5126,!1,0,0)),vl.disableUnusedAttributes(),yl.drawArrays(4,0,l.count),l.count=0},this.renderBufferDirect=function(l,t,e,n,i,a){null===t&&(t=Y);const r=i.isMesh&&i.matrixWorld.determinant()<0,o=Bl(l,t,n,i);ll.setMaterial(n,r);let s=e.index;const m=e.attributes.position;if(null===s){if(void 0===m||0===m.count)return}else if(0===s.count)return;let h,c=1;!0===n.wireframe&&(s=ol.getWireframeAttribute(e),c=2),(n.morphTargets||n.morphNormals)&&xl.update(i,e,n,o),vl.setup(i,n,o,e,s);let q=fl;null!==s&&(h=rl.get(s),q=_l,q.setIndex(h));const u=null!==s?s.count:m.count,d=e.drawRange.start*c,p=e.drawRange.count*c,x=null!==a?a.start*c:0,f=null!==a?a.count*c:1/0,_=Math.max(d,x),g=Math.min(u,d+p,x+f)-1,v=Math.max(0,g-_+1);if(0!==v){if(i.isMesh)!0===n.wireframe?(ll.setLineWidth(n.wireframeLinewidth*J()),q.setMode(1)):q.setMode(4);else if(i.isLine){let l=n.linewidth;void 0===l&&(l=1),ll.setLineWidth(l*J()),i.isLineSegments?q.setMode(1):i.isLineLoop?q.setMode(2):q.setMode(3)}else i.isPoints?q.setMode(0):i.isSprite&&q.setMode(4);if(i.isInstancedMesh)q.renderInstances(_,v,i.count);else if(e.isInstancedBufferGeometry){const l=Math.min(e.instanceCount,e._maxInstanceCount);q.renderInstances(_,v,l)}else q.render(_,v)}},this.compile=function(l,t){f=ql.get(l),f.init(),l.traverseVisible((function(l){l.isLight&&l.layers.test(t.layers)&&(f.pushLight(l),l.castShadow&&f.pushShadow(l))})),f.setupLights(),l.traverse((function(t){const e=t.material;if(e)if(Array.isArray(e))for(let n=0;n<e.length;n++)Nl(e[n],l,t);else Nl(e,l,t)}))};let Tl=null;function Al(){Cl.stop()}function Ll(){Cl.start()}const Cl=new we;function Pl(l,t,e,n){if(!1===l.visible)return;if(l.layers.test(t.layers))if(l.isGroup)e=l.renderOrder;else if(l.isLOD)!0===l.autoUpdate&&l.update(t);else if(l.isLight)f.pushLight(l),l.castShadow&&f.pushShadow(l);else if(l.isSprite){if(!l.frustumCulled||H.intersectsSprite(l)){n&&X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(j);const t=sl.update(l),i=l.material;i.visible&&d.push(l,t,i,e,X.z,null)}}else if(l.isImmediateRenderObject)n&&X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(j),d.push(l,null,l.material,e,X.z,null);else if((l.isMesh||l.isLine||l.isPoints)&&(l.isSkinnedMesh&&l.skeleton.frame!==el.render.frame&&(l.skeleton.update(),l.skeleton.frame=el.render.frame),!l.frustumCulled||H.intersectsObject(l))){n&&X.setFromMatrixPosition(l.matrixWorld).applyMatrix4(j);const t=sl.update(l),i=l.material;if(Array.isArray(i)){const n=t.groups;for(let a=0,r=n.length;a<r;a++){const r=n[a],o=i[r.materialIndex];o&&o.visible&&d.push(l,t,o,e,X.z,r)}}else i.visible&&d.push(l,t,i,e,X.z,null)}const i=l.children;for(let l=0,a=i.length;l<a;l++)Pl(i[l],t,e,n)}function Il(l,t,e){const n=!0===t.isScene?t.overrideMaterial:null;for(let i=0,a=l.length;i<a;i++){const a=l[i],r=a.object,o=a.geometry,s=null===n?a.material:n,m=a.group;if(e.isArrayCamera){const l=e.cameras;for(let e=0,n=l.length;e<n;e++){const n=l[e];r.layers.test(n.layers)&&(ll.viewport(A.copy(n.viewport)),f.setupLightsView(n),Dl(r,t,n,o,s,m))}}else Dl(r,t,e,o,s,m)}}function Dl(l,t,e,n,i,a){if(l.onBeforeRender(y,t,e,n,i,a),l.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,l.matrixWorld),l.normalMatrix.getNormalMatrix(l.modelViewMatrix),l.isImmediateRenderObject){const n=Bl(e,t,i,l);ll.setMaterial(i),vl.reset(),function(l,t){l.render((function(l){y.renderBufferImmediate(l,t)}))}(l,n)}else y.renderBufferDirect(e,t,n,i,l,a);l.onAfterRender(y,t,e,n,i,a)}function Nl(l,t,e){!0!==t.isScene&&(t=Y);const n=nl.get(l),i=f.state.lights,a=f.state.shadowsArray,r=i.state.version,o=ml.getParameters(l,i.state,a,t,e),s=ml.getProgramCacheKey(o);let m=n.programs;n.environment=l.isMeshStandardMaterial?t.environment:null,n.fog=t.fog,n.envMap=al.get(l.envMap||n.environment),void 0===m&&(l.addEventListener("dispose",El),m=new Map,n.programs=m);let h=m.get(s);if(void 0!==h){if(n.currentProgram===h&&n.lightsStateVersion===r)return Ol(l,o),h}else o.uniforms=ml.getUniforms(l),l.onBuild(o,y),l.onBeforeCompile(o,y),h=ml.acquireProgram(o,s),m.set(s,h),n.uniforms=o.uniforms;const c=n.uniforms;(l.isShaderMaterial||l.isRawShaderMaterial)&&!0!==l.clipping||(c.clippingPlanes=ul.uniform),Ol(l,o),n.needsLights=function(l){return l.isMeshLambertMaterial||l.isMeshToonMaterial||l.isMeshPhongMaterial||l.isMeshStandardMaterial||l.isShadowMaterial||l.isShaderMaterial&&!0===l.lights}(l),n.lightsStateVersion=r,n.needsLights&&(c.ambientLightColor.value=i.state.ambient,c.lightProbe.value=i.state.probe,c.directionalLights.value=i.state.directional,c.directionalLightShadows.value=i.state.directionalShadow,c.spotLights.value=i.state.spot,c.spotLightShadows.value=i.state.spotShadow,c.rectAreaLights.value=i.state.rectArea,c.ltc_1.value=i.state.rectAreaLTC1,c.ltc_2.value=i.state.rectAreaLTC2,c.pointLights.value=i.state.point,c.pointLightShadows.value=i.state.pointShadow,c.hemisphereLights.value=i.state.hemi,c.directionalShadowMap.value=i.state.directionalShadowMap,c.directionalShadowMatrix.value=i.state.directionalShadowMatrix,c.spotShadowMap.value=i.state.spotShadowMap,c.spotShadowMatrix.value=i.state.spotShadowMatrix,c.pointShadowMap.value=i.state.pointShadowMap,c.pointShadowMatrix.value=i.state.pointShadowMatrix);const q=h.getUniforms(),u=Xn.seqWithValue(q.seq,c);return n.currentProgram=h,n.uniformsList=u,h}function Ol(l,t){const e=nl.get(l);e.outputEncoding=t.outputEncoding,e.instancing=t.instancing,e.skinning=t.skinning,e.numClippingPlanes=t.numClippingPlanes,e.numIntersection=t.numClipIntersection,e.vertexAlphas=t.vertexAlphas}function Bl(l,t,e,n){!0!==t.isScene&&(t=Y),il.resetTextureUnits();const i=t.fog,a=e.isMeshStandardMaterial?t.environment:null,r=null===z?y.outputEncoding:z.texture.encoding,o=al.get(e.envMap||a),s=!0===e.vertexColors&&n.geometry&&n.geometry.attributes.color&&4===n.geometry.attributes.color.itemSize,m=nl.get(e),h=f.state.lights;if(!0===U&&(!0===G||l!==E)){const t=l===E&&e.id===S;ul.setState(e,l,t)}let c=!1;e.version===m.__version?m.needsLights&&m.lightsStateVersion!==h.state.version||m.outputEncoding!==r||n.isInstancedMesh&&!1===m.instancing?c=!0:n.isInstancedMesh||!0!==m.instancing?n.isSkinnedMesh&&!1===m.skinning?c=!0:n.isSkinnedMesh||!0!==m.skinning?m.envMap!==o||e.fog&&m.fog!==i?c=!0:void 0===m.numClippingPlanes||m.numClippingPlanes===ul.numPlanes&&m.numIntersection===ul.numIntersection?m.vertexAlphas!==s&&(c=!0):c=!0:c=!0:c=!0:(c=!0,m.__version=e.version);let q=m.currentProgram;!0===c&&(q=Nl(e,t,n));let u=!1,d=!1,p=!1;const x=q.getUniforms(),_=m.uniforms;if(ll.useProgram(q.program)&&(u=!0,d=!0,p=!0),e.id!==S&&(S=e.id,d=!0),u||E!==l){if(x.setValue(yl,"projectionMatrix",l.projectionMatrix),Q.logarithmicDepthBuffer&&x.setValue(yl,"logDepthBufFC",2/(Math.log(l.far+1)/Math.LN2)),E!==l&&(E=l,d=!0,p=!0),e.isShaderMaterial||e.isMeshPhongMaterial||e.isMeshToonMaterial||e.isMeshStandardMaterial||e.envMap){const t=x.map.cameraPosition;void 0!==t&&t.setValue(yl,X.setFromMatrixPosition(l.matrixWorld))}(e.isMeshPhongMaterial||e.isMeshToonMaterial||e.isMeshLambertMaterial||e.isMeshBasicMaterial||e.isMeshStandardMaterial||e.isShaderMaterial)&&x.setValue(yl,"isOrthographic",!0===l.isOrthographicCamera),(e.isMeshPhongMaterial||e.isMeshToonMaterial||e.isMeshLambertMaterial||e.isMeshBasicMaterial||e.isMeshStandardMaterial||e.isShaderMaterial||e.isShadowMaterial||n.isSkinnedMesh)&&x.setValue(yl,"viewMatrix",l.matrixWorldInverse)}if(n.isSkinnedMesh){x.setOptional(yl,n,"bindMatrix"),x.setOptional(yl,n,"bindMatrixInverse");const l=n.skeleton;l&&(Q.floatVertexTextures?(null===l.boneTexture&&l.computeBoneTexture(),x.setValue(yl,"boneTexture",l.boneTexture,il),x.setValue(yl,"boneTextureSize",l.boneTextureSize)):x.setOptional(yl,l,"boneMatrices"))}var g,v;return(d||m.receiveShadow!==n.receiveShadow)&&(m.receiveShadow=n.receiveShadow,x.setValue(yl,"receiveShadow",n.receiveShadow)),d&&(x.setValue(yl,"toneMappingExposure",y.toneMappingExposure),m.needsLights&&(v=p,(g=_).ambientLightColor.needsUpdate=v,g.lightProbe.needsUpdate=v,g.directionalLights.needsUpdate=v,g.directionalLightShadows.needsUpdate=v,g.pointLights.needsUpdate=v,g.pointLightShadows.needsUpdate=v,g.spotLights.needsUpdate=v,g.spotLightShadows.needsUpdate=v,g.rectAreaLights.needsUpdate=v,g.hemisphereLights.needsUpdate=v),i&&e.fog&&hl.refreshFogUniforms(_,i),hl.refreshMaterialUniforms(_,e,I,P,V),Xn.upload(yl,m.uniformsList,_,il)),e.isShaderMaterial&&!0===e.uniformsNeedUpdate&&(Xn.upload(yl,m.uniformsList,_,il),e.uniformsNeedUpdate=!1),e.isSpriteMaterial&&x.setValue(yl,"center",n.center),x.setValue(yl,"modelViewMatrix",n.modelViewMatrix),x.setValue(yl,"normalMatrix",n.normalMatrix),x.setValue(yl,"modelMatrix",n.matrixWorld),q}Cl.setAnimationLoop((function(l){Tl&&Tl(l)})),"undefined"!=typeof window&&Cl.setContext(window),this.setAnimationLoop=function(l){Tl=l,Ml.setAnimationLoop(l),null===l?Cl.stop():Cl.start()},Ml.addEventListener("sessionstart",Al),Ml.addEventListener("sessionend",Ll),this.render=function(l,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===b)return;!0===l.autoUpdate&&l.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),!0===Ml.enabled&&!0===Ml.isPresenting&&(!0===Ml.cameraAutoUpdate&&Ml.updateCamera(t),t=Ml.getCamera()),!0===l.isScene&&l.onBeforeRender(y,l,t,z),f=ql.get(l,v.length),f.init(),v.push(f),j.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),H.setFromProjectionMatrix(j),G=this.localClippingEnabled,U=ul.init(this.clippingPlanes,G,t),d=cl.get(l,_.length),d.init(),_.push(d),Pl(l,t,0,y.sortObjects),d.finish(),!0===y.sortObjects&&d.sort(D,N),!0===U&&ul.beginShadows();const e=f.state.shadowsArray;dl.render(e,l,t),f.setupLights(),f.setupLightsView(t),!0===U&&ul.endShadows(),!0===this.info.autoReset&&this.info.reset(),pl.render(d,l);const n=d.opaque,i=d.transmissive,a=d.transparent;n.length>0&&Il(n,l,t),i.length>0&&function(l,t,e,n){null===V&&(V=new $(1024,1024,{generateMipmaps:!0,minFilter:q,magFilter:h,wrapS:s,wrapT:s}));const i=y.getRenderTarget();y.setRenderTarget(V),y.clear(),Il(l,e,n),il.updateRenderTargetMipmap(V),y.setRenderTarget(i),Il(t,e,n)}(n,i,l,t),a.length>0&&Il(a,l,t),null!==z&&(il.updateRenderTargetMipmap(z),il.updateMultisampleRenderTarget(z)),!0===l.isScene&&l.onAfterRender(y,l,t),ll.buffers.depth.setTest(!0),ll.buffers.depth.setMask(!0),ll.buffers.color.setMask(!0),ll.setPolygonOffset(!1),vl.resetDefaultState(),S=-1,E=null,v.pop(),f=v.length>0?v[v.length-1]:null,_.pop(),d=_.length>0?_[_.length-1]:null},this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return z},this.setRenderTarget=function(l,t=0,e=0){z=l,w=t,M=e,l&&void 0===nl.get(l).__webglFramebuffer&&il.setupRenderTarget(l);let n=null,i=!1,a=!1;if(l){const e=l.texture;(e.isDataTexture3D||e.isDataTexture2DArray)&&(a=!0);const r=nl.get(l).__webglFramebuffer;l.isWebGLCubeRenderTarget?(n=r[t],i=!0):n=l.isWebGLMultisampleRenderTarget?nl.get(l).__webglMultisampledFramebuffer:r,A.copy(l.viewport),L.copy(l.scissor),C=l.scissorTest}else A.copy(O).multiplyScalar(I).floor(),L.copy(B).multiplyScalar(I).floor(),C=F;if(ll.bindFramebuffer(36160,n)&&Q.drawBuffers){let t=!1;if(l)if(l.isWebGLMultipleRenderTargets){const e=l.texture;if(k.length!==e.length||36064!==k[0]){for(let l=0,t=e.length;l<t;l++)k[l]=36064+l;k.length=e.length,t=!0}}else 1===k.length&&36064===k[0]||(k[0]=36064,k.length=1,t=!0);else 1===k.length&&1029===k[0]||(k[0]=1029,k.length=1,t=!0);t&&(Q.isWebGL2?yl.drawBuffers(k):Z.get("WEBGL_draw_buffers").drawBuffersWEBGL(k))}if(ll.viewport(A),ll.scissor(L),ll.setScissorTest(C),i){const n=nl.get(l.texture);yl.framebufferTexture2D(36160,36064,34069+t,n.__webglTexture,e)}else if(a){const n=nl.get(l.texture),i=t||0;yl.framebufferTextureLayer(36160,36064,n.__webglTexture,e||0,i)}},this.readRenderTargetPixels=function(l,t,e,n,i,a,r){if(!l||!l.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=nl.get(l).__webglFramebuffer;if(l.isWebGLCubeRenderTarget&&void 0!==r&&(o=o[r]),o){ll.bindFramebuffer(36160,o);try{const r=l.texture,o=r.format,s=r.type;if(o!==g&&gl.convert(o)!==yl.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const m=s===x&&(Z.has("EXT_color_buffer_half_float")||Q.isWebGL2&&Z.has("EXT_color_buffer_float"));if(!(1009===s||gl.convert(s)===yl.getParameter(35738)||s===p&&(Q.isWebGL2||Z.has("OES_texture_float")||Z.has("WEBGL_color_buffer_float"))||m))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===yl.checkFramebufferStatus(36160)?t>=0&&t<=l.width-n&&e>=0&&e<=l.height-i&&yl.readPixels(t,e,n,i,gl.convert(o),gl.convert(s),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const l=null!==z?nl.get(z).__webglFramebuffer:null;ll.bindFramebuffer(36160,l)}}},this.copyFramebufferToTexture=function(l,t,e=0){const n=Math.pow(2,-e),i=Math.floor(t.image.width*n),a=Math.floor(t.image.height*n);let r=gl.convert(t.format);Q.isWebGL2&&(6407===r&&(r=32849),6408===r&&(r=32856)),il.setTexture2D(t,0),yl.copyTexImage2D(3553,e,r,l.x,l.y,i,a,0),ll.unbindTexture()},this.copyTextureToTexture=function(l,t,e,n=0){const i=t.image.width,a=t.image.height,r=gl.convert(e.format),o=gl.convert(e.type);il.setTexture2D(e,0),yl.pixelStorei(37440,e.flipY),yl.pixelStorei(37441,e.premultiplyAlpha),yl.pixelStorei(3317,e.unpackAlignment),t.isDataTexture?yl.texSubImage2D(3553,n,l.x,l.y,i,a,r,o,t.image.data):t.isCompressedTexture?yl.compressedTexSubImage2D(3553,n,l.x,l.y,t.mipmaps[0].width,t.mipmaps[0].height,r,t.mipmaps[0].data):yl.texSubImage2D(3553,n,l.x,l.y,r,o,t.image),0===n&&e.generateMipmaps&&yl.generateMipmap(3553),ll.unbindTexture()},this.copyTextureToTexture3D=function(l,t,e,n,i=0){if(y.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const{width:a,height:r,data:o}=e.image,s=gl.convert(n.format),m=gl.convert(n.type);let h;if(n.isDataTexture3D)il.setTexture3D(n,0),h=32879;else{if(!n.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");il.setTexture2DArray(n,0),h=35866}yl.pixelStorei(37440,n.flipY),yl.pixelStorei(37441,n.premultiplyAlpha),yl.pixelStorei(3317,n.unpackAlignment);const c=yl.getParameter(3314),q=yl.getParameter(32878),u=yl.getParameter(3316),d=yl.getParameter(3315),p=yl.getParameter(32877);yl.pixelStorei(3314,a),yl.pixelStorei(32878,r),yl.pixelStorei(3316,l.min.x),yl.pixelStorei(3315,l.min.y),yl.pixelStorei(32877,l.min.z),yl.texSubImage3D(h,i,t.x,t.y,t.z,l.max.x-l.min.x+1,l.max.y-l.min.y+1,l.max.z-l.min.z+1,s,m,o),yl.pixelStorei(3314,c),yl.pixelStorei(32878,q),yl.pixelStorei(3316,u),yl.pixelStorei(3315,d),yl.pixelStorei(32877,p),0===i&&n.generateMipmaps&&yl.generateMipmap(h),ll.unbindTexture()},this.initTexture=function(l){il.setTexture2D(l,0),ll.unbindTexture()},this.resetState=function(){w=0,M=0,z=null,ll.reset(),vl.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}(class extends Bi{}).prototype.isWebGL1Renderer=!0;class Fi{constructor(l,t=25e-5){this.name="",this.color=new Et(l),this.density=t}clone(){return new Fi(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}Fi.prototype.isFogExp2=!0;class ki{constructor(l,t=1,e=1e3){this.name="",this.color=new Et(l),this.near=t,this.far=e}clone(){return new ki(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}ki.prototype.isFog=!0;class Hi extends nt{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(l,t){return super.copy(l,t),null!==l.background&&(this.background=l.background.clone()),null!==l.environment&&(this.environment=l.environment.clone()),null!==l.fog&&(this.fog=l.fog.clone()),null!==l.overrideMaterial&&(this.overrideMaterial=l.overrideMaterial.clone()),this.autoUpdate=l.autoUpdate,this.matrixAutoUpdate=l.matrixAutoUpdate,this}toJSON(l){const t=super.toJSON(l);return null!==this.background&&(t.object.background=this.background.toJSON(l)),null!==this.environment&&(t.object.environment=this.environment.toJSON(l)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t}}Hi.prototype.isScene=!0;class Ui{constructor(l,t){this.array=l,this.stride=t,this.count=void 0!==l?l.length/t:0,this.usage=L,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=B()}onUploadCallback(){}set needsUpdate(l){!0===l&&this.version++}setUsage(l){return this.usage=l,this}copy(l){return this.array=new l.array.constructor(l.array),this.count=l.count,this.stride=l.stride,this.usage=l.usage,this}copyAt(l,t,e){l*=this.stride,e*=t.stride;for(let n=0,i=this.stride;n<i;n++)this.array[l+n]=t.array[e+n];return this}set(l,t=0){return this.array.set(l,t),this}clone(l){void 0===l.arrayBuffers&&(l.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=B()),void 0===l.arrayBuffers[this.array.buffer._uuid]&&(l.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(l.arrayBuffers[this.array.buffer._uuid]),e=new this.constructor(t,this.stride);return e.setUsage(this.usage),e}onUpload(l){return this.onUploadCallback=l,this}toJSON(l){return void 0===l.arrayBuffers&&(l.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=B()),void 0===l.arrayBuffers[this.array.buffer._uuid]&&(l.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Ui.prototype.isInterleavedBuffer=!0;const Gi=new tl;class Vi{constructor(l,t,e,n){this.name="",this.data=l,this.itemSize=t,this.offset=e,this.normalized=!0===n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(l){this.data.needsUpdate=l}applyMatrix4(l){for(let t=0,e=this.data.count;t<e;t++)Gi.x=this.getX(t),Gi.y=this.getY(t),Gi.z=this.getZ(t),Gi.applyMatrix4(l),this.setXYZ(t,Gi.x,Gi.y,Gi.z);return this}applyNormalMatrix(l){for(let t=0,e=this.count;t<e;t++)Gi.x=this.getX(t),Gi.y=this.getY(t),Gi.z=this.getZ(t),Gi.applyNormalMatrix(l),this.setXYZ(t,Gi.x,Gi.y,Gi.z);return this}transformDirection(l){for(let t=0,e=this.count;t<e;t++)Gi.x=this.getX(t),Gi.y=this.getY(t),Gi.z=this.getZ(t),Gi.transformDirection(l),this.setXYZ(t,Gi.x,Gi.y,Gi.z);return this}setX(l,t){return this.data.array[l*this.data.stride+this.offset]=t,this}setY(l,t){return this.data.array[l*this.data.stride+this.offset+1]=t,this}setZ(l,t){return this.data.array[l*this.data.stride+this.offset+2]=t,this}setW(l,t){return this.data.array[l*this.data.stride+this.offset+3]=t,this}getX(l){return this.data.array[l*this.data.stride+this.offset]}getY(l){return this.data.array[l*this.data.stride+this.offset+1]}getZ(l){return this.data.array[l*this.data.stride+this.offset+2]}getW(l){return this.data.array[l*this.data.stride+this.offset+3]}setXY(l,t,e){return l=l*this.data.stride+this.offset,this.data.array[l+0]=t,this.data.array[l+1]=e,this}setXYZ(l,t,e,n){return l=l*this.data.stride+this.offset,this.data.array[l+0]=t,this.data.array[l+1]=e,this.data.array[l+2]=n,this}setXYZW(l,t,e,n,i){return l=l*this.data.stride+this.offset,this.data.array[l+0]=t,this.data.array[l+1]=e,this.data.array[l+2]=n,this.data.array[l+3]=i,this}clone(l){if(void 0===l){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const l=[];for(let t=0;t<this.count;t++){const e=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)l.push(this.data.array[e+t])}return new Ct(new this.array.constructor(l),this.itemSize,this.normalized)}return void 0===l.interleavedBuffers&&(l.interleavedBuffers={}),void 0===l.interleavedBuffers[this.data.uuid]&&(l.interleavedBuffers[this.data.uuid]=this.data.clone(l)),new Vi(l.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(l){if(void 0===l){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const l=[];for(let t=0;t<this.count;t++){const e=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)l.push(this.data.array[e+t])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:l,normalized:this.normalized}}return void 0===l.interleavedBuffers&&(l.interleavedBuffers={}),void 0===l.interleavedBuffers[this.data.uuid]&&(l.interleavedBuffers[this.data.uuid]=this.data.toJSON(l)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Vi.prototype.isInterleavedBufferAttribute=!0;class Wi extends vt{constructor(l){super(),this.type="SpriteMaterial",this.color=new Et(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.alphaMap=l.alphaMap,this.rotation=l.rotation,this.sizeAttenuation=l.sizeAttenuation,this}}let ji;Wi.prototype.isSpriteMaterial=!0;const Xi=new tl,Yi=new tl,Ji=new tl,Zi=new W,Qi=new W,Ki=new Rl,$i=new tl,la=new tl,ta=new tl,ea=new W,na=new W,ia=new W;function aa(l,t,e,n,i,a){Zi.subVectors(l,e).addScalar(.5).multiply(n),void 0!==i?(Qi.x=a*Zi.x-i*Zi.y,Qi.y=i*Zi.x+a*Zi.y):Qi.copy(Zi),l.copy(t),l.x+=Qi.x,l.y+=Qi.y,l.applyMatrix4(Ki)}(class extends nt{constructor(l){if(super(),this.type="Sprite",void 0===ji){ji=new Gt;const l=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),t=new Ui(l,5);ji.setIndex([0,1,2,0,2,3]),ji.setAttribute("position",new Vi(t,3,0,!1)),ji.setAttribute("uv",new Vi(t,2,3,!1))}this.geometry=ji,this.material=void 0!==l?l:new Wi,this.center=new W(.5,.5)}raycast(l,t){null===l.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Yi.setFromMatrixScale(this.matrixWorld),Ki.copy(l.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(l.camera.matrixWorldInverse,this.matrixWorld),Ji.setFromMatrixPosition(this.modelViewMatrix),l.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Yi.multiplyScalar(-Ji.z);const e=this.material.rotation;let n,i;0!==e&&(i=Math.cos(e),n=Math.sin(e));const a=this.center;aa($i.set(-.5,-.5,0),Ji,a,Yi,n,i),aa(la.set(.5,-.5,0),Ji,a,Yi,n,i),aa(ta.set(.5,.5,0),Ji,a,Yi,n,i),ea.set(0,0),na.set(1,0),ia.set(1,1);let r=l.ray.intersectTriangle($i,la,ta,!1,Xi);if(null===r&&(aa(la.set(-.5,.5,0),Ji,a,Yi,n,i),na.set(0,1),r=l.ray.intersectTriangle($i,ta,la,!1,Xi),null===r))return;const o=l.ray.origin.distanceTo(Xi);o<l.near||o>l.far||t.push({distance:o,point:Xi.clone(),uv:_t.getUV(Xi,$i,la,ta,ea,na,ia,new W),face:null,object:this})}copy(l){return super.copy(l),void 0!==l.center&&this.center.copy(l.center),this.material=l.material,this}}).prototype.isSprite=!0;const ra=new tl,oa=new K,sa=new K,ma=new tl,ha=new Rl;class ca extends oe{constructor(l,t){super(l,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Rl,this.bindMatrixInverse=new Rl}copy(l){return super.copy(l),this.bindMode=l.bindMode,this.bindMatrix.copy(l.bindMatrix),this.bindMatrixInverse.copy(l.bindMatrixInverse),this.skeleton=l.skeleton,this}bind(l,t){this.skeleton=l,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const l=new K,t=this.geometry.attributes.skinWeight;for(let e=0,n=t.count;e<n;e++){l.x=t.getX(e),l.y=t.getY(e),l.z=t.getZ(e),l.w=t.getW(e);const n=1/l.manhattanLength();n!==1/0?l.multiplyScalar(n):l.set(1,0,0,0),t.setXYZW(e,l.x,l.y,l.z,l.w)}}updateMatrixWorld(l){super.updateMatrixWorld(l),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(l,t){const e=this.skeleton,n=this.geometry;oa.fromBufferAttribute(n.attributes.skinIndex,l),sa.fromBufferAttribute(n.attributes.skinWeight,l),ra.fromBufferAttribute(n.attributes.position,l).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let l=0;l<4;l++){const n=sa.getComponent(l);if(0!==n){const i=oa.getComponent(l);ha.multiplyMatrices(e.bones[i].matrixWorld,e.boneInverses[i]),t.addScaledVector(ma.copy(ra).applyMatrix4(ha),n)}}return t.applyMatrix4(this.bindMatrixInverse)}}ca.prototype.isSkinnedMesh=!0;(class extends nt{constructor(){super(),this.type="Bone"}}).prototype.isBone=!0;(class extends Z{constructor(l,t,e,n,i,a,r,o,s,m,c,q){super(null,a,r,o,s,m,n,i,c,q),this.image={data:l||null,width:t||1,height:e||1},this.magFilter=void 0!==s?s:h,this.minFilter=void 0!==m?m:h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}).prototype.isDataTexture=!0;const qa=new Rl,ua=new Rl,da=[],pa=new oe;(class extends oe{constructor(l,t,e){super(l,t),this.instanceMatrix=new Ct(new Float32Array(16*e),16),this.instanceColor=null,this.count=e,this.frustumCulled=!1}copy(l){return super.copy(l),this.instanceMatrix.copy(l.instanceMatrix),null!==l.instanceColor&&(this.instanceColor=l.instanceColor.clone()),this.count=l.count,this}getColorAt(l,t){t.fromArray(this.instanceColor.array,3*l)}getMatrixAt(l,t){t.fromArray(this.instanceMatrix.array,16*l)}raycast(l,t){const e=this.matrixWorld,n=this.count;if(pa.geometry=this.geometry,pa.material=this.material,void 0!==pa.material)for(let i=0;i<n;i++){this.getMatrixAt(i,qa),ua.multiplyMatrices(e,qa),pa.matrixWorld=ua,pa.raycast(l,da);for(let l=0,e=da.length;l<e;l++){const e=da[l];e.instanceId=i,e.object=this,t.push(e)}da.length=0}}setColorAt(l,t){null===this.instanceColor&&(this.instanceColor=new Ct(new Float32Array(3*this.count),3)),t.toArray(this.instanceColor.array,3*l)}setMatrixAt(l,t){t.toArray(this.instanceMatrix.array,16*l)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class xa extends vt{constructor(l){super(),this.type="LineBasicMaterial",this.color=new Et(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.linewidth=l.linewidth,this.linecap=l.linecap,this.linejoin=l.linejoin,this.morphTargets=l.morphTargets,this}}xa.prototype.isLineBasicMaterial=!0;const fa=new tl,_a=new tl,ga=new Rl,va=new Cl,ya=new wl;class ba extends nt{constructor(l=new Gt,t=new xa){super(),this.type="Line",this.geometry=l,this.material=t,this.updateMorphTargets()}copy(l){return super.copy(l),this.material=l.material,this.geometry=l.geometry,this}computeLineDistances(){const l=this.geometry;if(l.isBufferGeometry)if(null===l.index){const t=l.attributes.position,e=[0];for(let l=1,n=t.count;l<n;l++)fa.fromBufferAttribute(t,l-1),_a.fromBufferAttribute(t,l),e[l]=e[l-1],e[l]+=fa.distanceTo(_a);l.setAttribute("lineDistance",new It(e,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else l.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(l,t){const e=this.geometry,n=this.matrixWorld,i=l.params.Line.threshold,a=e.drawRange;if(null===e.boundingSphere&&e.computeBoundingSphere(),ya.copy(e.boundingSphere),ya.applyMatrix4(n),ya.radius+=i,!1===l.ray.intersectsSphere(ya))return;ga.copy(n).invert(),va.copy(l.ray).applyMatrix4(ga);const r=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=r*r,s=new tl,m=new tl,h=new tl,c=new tl,q=this.isLineSegments?2:1;if(e.isBufferGeometry){const n=e.index,i=e.attributes.position;if(null!==n)for(let e=Math.max(0,a.start),r=Math.min(n.count,a.start+a.count)-1;e<r;e+=q){const a=n.getX(e),r=n.getX(e+1);if(s.fromBufferAttribute(i,a),m.fromBufferAttribute(i,r),va.distanceSqToSegment(s,m,c,h)>o)continue;c.applyMatrix4(this.matrixWorld);const q=l.ray.origin.distanceTo(c);q<l.near||q>l.far||t.push({distance:q,point:h.clone().applyMatrix4(this.matrixWorld),index:e,face:null,faceIndex:null,object:this})}else for(let e=Math.max(0,a.start),n=Math.min(i.count,a.start+a.count)-1;e<n;e+=q){if(s.fromBufferAttribute(i,e),m.fromBufferAttribute(i,e+1),va.distanceSqToSegment(s,m,c,h)>o)continue;c.applyMatrix4(this.matrixWorld);const n=l.ray.origin.distanceTo(c);n<l.near||n>l.far||t.push({distance:n,point:h.clone().applyMatrix4(this.matrixWorld),index:e,face:null,faceIndex:null,object:this})}}else e.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const l=this.geometry;if(l.isBufferGeometry){const t=l.morphAttributes,e=Object.keys(t);if(e.length>0){const l=t[e[0]];if(void 0!==l){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=l.length;t<e;t++){const e=l[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}else{const t=l.morphTargets;void 0!==t&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}ba.prototype.isLine=!0;const wa=new tl,Ma=new tl;class za extends ba{constructor(l,t){super(l,t),this.type="LineSegments"}computeLineDistances(){const l=this.geometry;if(l.isBufferGeometry)if(null===l.index){const t=l.attributes.position,e=[];for(let l=0,n=t.count;l<n;l+=2)wa.fromBufferAttribute(t,l),Ma.fromBufferAttribute(t,l+1),e[l]=0===l?0:e[l-1],e[l+1]=e[l]+wa.distanceTo(Ma);l.setAttribute("lineDistance",new It(e,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else l.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}za.prototype.isLineSegments=!0;(class extends ba{constructor(l,t){super(l,t),this.type="LineLoop"}}).prototype.isLineLoop=!0;class Sa extends vt{constructor(l){super(),this.type="PointsMaterial",this.color=new Et(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.alphaMap=l.alphaMap,this.size=l.size,this.sizeAttenuation=l.sizeAttenuation,this.morphTargets=l.morphTargets,this}}Sa.prototype.isPointsMaterial=!0;const Ea=new Rl,Ta=new Cl,Aa=new wl,La=new tl;function Ca(l,t,e,n,i,a,r){const o=Ta.distanceSqToPoint(l);if(o<e){const e=new tl;Ta.closestPointToPoint(l,e),e.applyMatrix4(n);const s=i.ray.origin.distanceTo(e);if(s<i.near||s>i.far)return;a.push({distance:s,distanceToRay:Math.sqrt(o),point:e,index:t,face:null,object:r})}}(class extends nt{constructor(l=new Gt,t=new Sa){super(),this.type="Points",this.geometry=l,this.material=t,this.updateMorphTargets()}copy(l){return super.copy(l),this.material=l.material,this.geometry=l.geometry,this}raycast(l,t){const e=this.geometry,n=this.matrixWorld,i=l.params.Points.threshold,a=e.drawRange;if(null===e.boundingSphere&&e.computeBoundingSphere(),Aa.copy(e.boundingSphere),Aa.applyMatrix4(n),Aa.radius+=i,!1===l.ray.intersectsSphere(Aa))return;Ea.copy(n).invert(),Ta.copy(l.ray).applyMatrix4(Ea);const r=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=r*r;if(e.isBufferGeometry){const i=e.index,r=e.attributes.position;if(null!==i)for(let e=Math.max(0,a.start),s=Math.min(i.count,a.start+a.count);e<s;e++){const a=i.getX(e);La.fromBufferAttribute(r,a),Ca(La,a,o,n,l,t,this)}else for(let e=Math.max(0,a.start),i=Math.min(r.count,a.start+a.count);e<i;e++)La.fromBufferAttribute(r,e),Ca(La,e,o,n,l,t,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const l=this.geometry;if(l.isBufferGeometry){const t=l.morphAttributes,e=Object.keys(t);if(e.length>0){const l=t[e[0]];if(void 0!==l){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=l.length;t<e;t++){const e=l[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}else{const t=l.morphTargets;void 0!==t&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}).prototype.isPoints=!0,class extends Z{constructor(l,t,e,n,i,a,r,o,s){super(l,t,e,n,i,a,r,o,s),this.format=void 0!==r?r:_,this.minFilter=void 0!==a?a:c,this.magFilter=void 0!==i?i:c,this.generateMipmaps=!1;const m=this;"requestVideoFrameCallback"in l&&l.requestVideoFrameCallback((function t(){m.needsUpdate=!0,l.requestVideoFrameCallback(t)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const l=this.image;!1=="requestVideoFrameCallback"in l&&l.readyState>=l.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}.prototype.isVideoTexture=!0;(class extends Z{constructor(l,t,e,n,i,a,r,o,s,m,h,c){super(null,a,r,o,s,m,n,i,h,c),this.image={width:t,height:e},this.mipmaps=l,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,class extends Z{constructor(l,t,e,n,i,a,r,o,s){super(l,t,e,n,i,a,r,o,s),this.needsUpdate=!0}}.prototype.isCanvasTexture=!0,class extends Z{constructor(l,t,e,n,i,a,r,o,s,m){if((m=void 0!==m?m:v)!==v&&m!==y)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===e&&m===v&&(e=u),void 0===e&&m===y&&(e=f),super(null,n,i,a,r,o,m,e,s),this.image={width:l,height:t},this.magFilter=void 0!==r?r:h,this.minFilter=void 0!==o?o:h,this.flipY=!1,this.generateMipmaps=!1}}.prototype.isDepthTexture=!0,new tl,new tl,new tl,new _t;function Ra(l,t,e,n,i){let a,r;if(i===function(l,t,e,n){let i=0;for(let a=t,r=e-n;a<e;a+=n)i+=(l[r]-l[a])*(l[a+1]+l[r+1]),r=a;return i}(l,t,e,n)>0)for(a=t;a<e;a+=n)r=$a(a,l[a],l[a+1],r);else for(a=e-n;a>=t;a-=n)r=$a(a,l[a],l[a+1],r);return r&&Xa(r,r.next)&&(lr(r),r=r.next),r}function Pa(l,t){if(!l)return l;t||(t=l);let e,n=l;do{if(e=!1,n.steiner||!Xa(n,n.next)&&0!==ja(n.prev,n,n.next))n=n.next;else{if(lr(n),n=t=n.prev,n===n.next)break;e=!0}}while(e||n!==t);return t}function Ia(l,t,e,n,i,a,r){if(!l)return;!r&&a&&function(l,t,e,n){let i=l;do{null===i.z&&(i.z=Ua(i.x,i.y,t,e,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==l);i.prevZ.nextZ=null,i.prevZ=null,function(l){let t,e,n,i,a,r,o,s,m=1;do{for(e=l,l=null,a=null,r=0;e;){for(r++,n=e,o=0,t=0;t<m&&(o++,n=n.nextZ,n);t++);for(s=m;o>0||s>0&&n;)0!==o&&(0===s||!n||e.z<=n.z)?(i=e,e=e.nextZ,o--):(i=n,n=n.nextZ,s--),a?a.nextZ=i:l=i,i.prevZ=a,a=i;e=n}a.nextZ=null,m*=2}while(r>1)}(i)}(l,n,i,a);let o,s,m=l;for(;l.prev!==l.next;)if(o=l.prev,s=l.next,a?Na(l,n,i,a):Da(l))t.push(o.i/e),t.push(l.i/e),t.push(s.i/e),lr(l),l=s.next,m=s.next;else if((l=s)===m){r?1===r?Ia(l=Oa(Pa(l),t,e),t,e,n,i,a,2):2===r&&Ba(l,t,e,n,i,a):Ia(Pa(l),t,e,n,i,a,1);break}}function Da(l){const t=l.prev,e=l,n=l.next;if(ja(t,e,n)>=0)return!1;let i=l.next.next;for(;i!==l.prev;){if(Va(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)&&ja(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Na(l,t,e,n){const i=l.prev,a=l,r=l.next;if(ja(i,a,r)>=0)return!1;const o=i.x<a.x?i.x<r.x?i.x:r.x:a.x<r.x?a.x:r.x,s=i.y<a.y?i.y<r.y?i.y:r.y:a.y<r.y?a.y:r.y,m=i.x>a.x?i.x>r.x?i.x:r.x:a.x>r.x?a.x:r.x,h=i.y>a.y?i.y>r.y?i.y:r.y:a.y>r.y?a.y:r.y,c=Ua(o,s,t,e,n),q=Ua(m,h,t,e,n);let u=l.prevZ,d=l.nextZ;for(;u&&u.z>=c&&d&&d.z<=q;){if(u!==l.prev&&u!==l.next&&Va(i.x,i.y,a.x,a.y,r.x,r.y,u.x,u.y)&&ja(u.prev,u,u.next)>=0)return!1;if(u=u.prevZ,d!==l.prev&&d!==l.next&&Va(i.x,i.y,a.x,a.y,r.x,r.y,d.x,d.y)&&ja(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;u&&u.z>=c;){if(u!==l.prev&&u!==l.next&&Va(i.x,i.y,a.x,a.y,r.x,r.y,u.x,u.y)&&ja(u.prev,u,u.next)>=0)return!1;u=u.prevZ}for(;d&&d.z<=q;){if(d!==l.prev&&d!==l.next&&Va(i.x,i.y,a.x,a.y,r.x,r.y,d.x,d.y)&&ja(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function Oa(l,t,e){let n=l;do{const i=n.prev,a=n.next.next;!Xa(i,a)&&Ya(i,n,n.next,a)&&Qa(i,a)&&Qa(a,i)&&(t.push(i.i/e),t.push(n.i/e),t.push(a.i/e),lr(n),lr(n.next),n=l=a),n=n.next}while(n!==l);return Pa(n)}function Ba(l,t,e,n,i,a){let r=l;do{let l=r.next.next;for(;l!==r.prev;){if(r.i!==l.i&&Wa(r,l)){let o=Ka(r,l);return r=Pa(r,r.next),o=Pa(o,o.next),Ia(r,t,e,n,i,a),void Ia(o,t,e,n,i,a)}l=l.next}r=r.next}while(r!==l)}function Fa(l,t){return l.x-t.x}function ka(l,t){if(t=function(l,t){let e=t;const n=l.x,i=l.y;let a,r=-1/0;do{if(i<=e.y&&i>=e.next.y&&e.next.y!==e.y){const l=e.x+(i-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(l<=n&&l>r){if(r=l,l===n){if(i===e.y)return e;if(i===e.next.y)return e.next}a=e.x<e.next.x?e:e.next}}e=e.next}while(e!==t);if(!a)return null;if(n===r)return a;const o=a,s=a.x,m=a.y;let h,c=1/0;e=a;do{n>=e.x&&e.x>=s&&n!==e.x&&Va(i<m?n:r,i,s,m,i<m?r:n,i,e.x,e.y)&&(h=Math.abs(i-e.y)/(n-e.x),Qa(e,l)&&(h<c||h===c&&(e.x>a.x||e.x===a.x&&Ha(a,e)))&&(a=e,c=h)),e=e.next}while(e!==o);return a}(l,t)){const e=Ka(t,l);Pa(t,t.next),Pa(e,e.next)}}function Ha(l,t){return ja(l.prev,l,t.prev)<0&&ja(t.next,l,l.next)<0}function Ua(l,t,e,n,i){return(l=1431655765&((l=858993459&((l=252645135&((l=16711935&((l=32767*(l-e)*i)|l<<8))|l<<4))|l<<2))|l<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function Ga(l){let t=l,e=l;do{(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next}while(t!==l);return e}function Va(l,t,e,n,i,a,r,o){return(i-r)*(t-o)-(l-r)*(a-o)>=0&&(l-r)*(n-o)-(e-r)*(t-o)>=0&&(e-r)*(a-o)-(i-r)*(n-o)>=0}function Wa(l,t){return l.next.i!==t.i&&l.prev.i!==t.i&&!function(l,t){let e=l;do{if(e.i!==l.i&&e.next.i!==l.i&&e.i!==t.i&&e.next.i!==t.i&&Ya(e,e.next,l,t))return!0;e=e.next}while(e!==l);return!1}(l,t)&&(Qa(l,t)&&Qa(t,l)&&function(l,t){let e=l,n=!1;const i=(l.x+t.x)/2,a=(l.y+t.y)/2;do{e.y>a!=e.next.y>a&&e.next.y!==e.y&&i<(e.next.x-e.x)*(a-e.y)/(e.next.y-e.y)+e.x&&(n=!n),e=e.next}while(e!==l);return n}(l,t)&&(ja(l.prev,l,t.prev)||ja(l,t.prev,t))||Xa(l,t)&&ja(l.prev,l,l.next)>0&&ja(t.prev,t,t.next)>0)}function ja(l,t,e){return(t.y-l.y)*(e.x-t.x)-(t.x-l.x)*(e.y-t.y)}function Xa(l,t){return l.x===t.x&&l.y===t.y}function Ya(l,t,e,n){const i=Za(ja(l,t,e)),a=Za(ja(l,t,n)),r=Za(ja(e,n,l)),o=Za(ja(e,n,t));return i!==a&&r!==o||!(0!==i||!Ja(l,e,t))||!(0!==a||!Ja(l,n,t))||!(0!==r||!Ja(e,l,n))||!(0!==o||!Ja(e,t,n))}function Ja(l,t,e){return t.x<=Math.max(l.x,e.x)&&t.x>=Math.min(l.x,e.x)&&t.y<=Math.max(l.y,e.y)&&t.y>=Math.min(l.y,e.y)}function Za(l){return l>0?1:l<0?-1:0}function Qa(l,t){return ja(l.prev,l,l.next)<0?ja(l,t,l.next)>=0&&ja(l,l.prev,t)>=0:ja(l,t,l.prev)<0||ja(l,l.next,t)<0}function Ka(l,t){const e=new tr(l.i,l.x,l.y),n=new tr(t.i,t.x,t.y),i=l.next,a=t.prev;return l.next=t,t.prev=l,e.next=i,i.prev=e,n.next=e,e.prev=n,a.next=n,n.prev=a,n}function $a(l,t,e,n){const i=new tr(l,t,e);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function lr(l){l.next.prev=l.prev,l.prev.next=l.next,l.prevZ&&(l.prevZ.nextZ=l.nextZ),l.nextZ&&(l.nextZ.prevZ=l.prevZ)}function tr(l,t,e){this.i=l,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class er{static area(l){const t=l.length;let e=0;for(let n=t-1,i=0;i<t;n=i++)e+=l[n].x*l[i].y-l[i].x*l[n].y;return.5*e}static isClockWise(l){return er.area(l)<0}static triangulateShape(l,t){const e=[],n=[],i=[];nr(l),ir(e,l);let a=l.length;t.forEach(nr);for(let l=0;l<t.length;l++)n.push(a),a+=t[l].length,ir(e,t[l]);const r=function(l,t,e){e=e||2;const n=t&&t.length,i=n?t[0]*e:l.length;let a=Ra(l,0,i,e,!0);const r=[];if(!a||a.next===a.prev)return r;let o,s,m,h,c,q,u;if(n&&(a=function(l,t,e,n){const i=[];let a,r,o,s,m;for(a=0,r=t.length;a<r;a++)o=t[a]*n,s=a<r-1?t[a+1]*n:l.length,m=Ra(l,o,s,n,!1),m===m.next&&(m.steiner=!0),i.push(Ga(m));for(i.sort(Fa),a=0;a<i.length;a++)ka(i[a],e),e=Pa(e,e.next);return e}(l,t,a,e)),l.length>80*e){o=m=l[0],s=h=l[1];for(let t=e;t<i;t+=e)c=l[t],q=l[t+1],c<o&&(o=c),q<s&&(s=q),c>m&&(m=c),q>h&&(h=q);u=Math.max(m-o,h-s),u=0!==u?1/u:0}return Ia(a,r,e,o,s,u),r}(e,n);for(let l=0;l<r.length;l+=3)i.push(r.slice(l,l+3));return i}}function nr(l){const t=l.length;t>2&&l[t-1].equals(l[0])&&l.pop()}function ir(l,t){for(let e=0;e<t.length;e++)l.push(t[e].x),l.push(t[e].y)}class ar extends Gt{constructor(l,t){super(),this.type="ExtrudeGeometry",this.parameters={shapes:l,options:t},l=Array.isArray(l)?l:[l];const e=this,n=[],i=[];for(let t=0,e=l.length;t<e;t++)a(l[t]);function a(l){const a=[],r=void 0!==t.curveSegments?t.curveSegments:12,o=void 0!==t.steps?t.steps:1;let s=void 0!==t.depth?t.depth:100,m=void 0===t.bevelEnabled||t.bevelEnabled,h=void 0!==t.bevelThickness?t.bevelThickness:6,c=void 0!==t.bevelSize?t.bevelSize:h-2,q=void 0!==t.bevelOffset?t.bevelOffset:0,u=void 0!==t.bevelSegments?t.bevelSegments:3;const d=t.extrudePath,p=void 0!==t.UVGenerator?t.UVGenerator:rr;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),s=t.amount);let x,f,_,g,v,y=!1;d&&(x=d.getSpacedPoints(o),y=!0,m=!1,f=d.computeFrenetFrames(o,!1),_=new tl,g=new tl,v=new tl),m||(u=0,h=0,c=0,q=0);const b=l.extractPoints(r);let w=b.shape;const M=b.holes;if(!er.isClockWise(w)){w=w.reverse();for(let l=0,t=M.length;l<t;l++){const t=M[l];er.isClockWise(t)&&(M[l]=t.reverse())}}const z=er.triangulateShape(w,M),S=w;for(let l=0,t=M.length;l<t;l++){const t=M[l];w=w.concat(t)}function E(l,t,e){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(e).add(l)}const T=w.length,A=z.length;function L(l,t,e){let n,i,a;const r=l.x-t.x,o=l.y-t.y,s=e.x-l.x,m=e.y-l.y,h=r*r+o*o,c=r*m-o*s;if(Math.abs(c)>Number.EPSILON){const c=Math.sqrt(h),q=Math.sqrt(s*s+m*m),u=t.x-o/c,d=t.y+r/c,p=((e.x-m/q-u)*m-(e.y+s/q-d)*s)/(r*m-o*s);n=u+r*p-l.x,i=d+o*p-l.y;const x=n*n+i*i;if(x<=2)return new W(n,i);a=Math.sqrt(x/2)}else{let l=!1;r>Number.EPSILON?s>Number.EPSILON&&(l=!0):r<-Number.EPSILON?s<-Number.EPSILON&&(l=!0):Math.sign(o)===Math.sign(m)&&(l=!0),l?(n=-o,i=r,a=Math.sqrt(h)):(n=r,i=o,a=Math.sqrt(h/2))}return new W(n/a,i/a)}const C=[];for(let l=0,t=S.length,e=t-1,n=l+1;l<t;l++,e++,n++)e===t&&(e=0),n===t&&(n=0),C[l]=L(S[l],S[e],S[n]);const R=[];let P,I=C.concat();for(let l=0,t=M.length;l<t;l++){const t=M[l];P=[];for(let l=0,e=t.length,n=e-1,i=l+1;l<e;l++,n++,i++)n===e&&(n=0),i===e&&(i=0),P[l]=L(t[l],t[n],t[i]);R.push(P),I=I.concat(P)}for(let l=0;l<u;l++){const t=l/u,e=h*Math.cos(t*Math.PI/2),n=c*Math.sin(t*Math.PI/2)+q;for(let l=0,t=S.length;l<t;l++){const t=E(S[l],C[l],n);O(t.x,t.y,-e)}for(let l=0,t=M.length;l<t;l++){const t=M[l];P=R[l];for(let l=0,i=t.length;l<i;l++){const i=E(t[l],P[l],n);O(i.x,i.y,-e)}}}const D=c+q;for(let l=0;l<T;l++){const t=m?E(w[l],I[l],D):w[l];y?(g.copy(f.normals[0]).multiplyScalar(t.x),_.copy(f.binormals[0]).multiplyScalar(t.y),v.copy(x[0]).add(g).add(_),O(v.x,v.y,v.z)):O(t.x,t.y,0)}for(let l=1;l<=o;l++)for(let t=0;t<T;t++){const e=m?E(w[t],I[t],D):w[t];y?(g.copy(f.normals[l]).multiplyScalar(e.x),_.copy(f.binormals[l]).multiplyScalar(e.y),v.copy(x[l]).add(g).add(_),O(v.x,v.y,v.z)):O(e.x,e.y,s/o*l)}for(let l=u-1;l>=0;l--){const t=l/u,e=h*Math.cos(t*Math.PI/2),n=c*Math.sin(t*Math.PI/2)+q;for(let l=0,t=S.length;l<t;l++){const t=E(S[l],C[l],n);O(t.x,t.y,s+e)}for(let l=0,t=M.length;l<t;l++){const t=M[l];P=R[l];for(let l=0,i=t.length;l<i;l++){const i=E(t[l],P[l],n);y?O(i.x,i.y+x[o-1].y,x[o-1].x+e):O(i.x,i.y,s+e)}}}function N(l,t){let e=l.length;for(;--e>=0;){const n=e;let i=e-1;i<0&&(i=l.length-1);for(let l=0,e=o+2*u;l<e;l++){const e=T*l,a=T*(l+1);F(t+n+e,t+i+e,t+i+a,t+n+a)}}}function O(l,t,e){a.push(l),a.push(t),a.push(e)}function B(l,t,i){k(l),k(t),k(i);const a=n.length/3,r=p.generateTopUV(e,n,a-3,a-2,a-1);H(r[0]),H(r[1]),H(r[2])}function F(l,t,i,a){k(l),k(t),k(a),k(t),k(i),k(a);const r=n.length/3,o=p.generateSideWallUV(e,n,r-6,r-3,r-2,r-1);H(o[0]),H(o[1]),H(o[3]),H(o[1]),H(o[2]),H(o[3])}function k(l){n.push(a[3*l+0]),n.push(a[3*l+1]),n.push(a[3*l+2])}function H(l){i.push(l.x),i.push(l.y)}!function(){const l=n.length/3;if(m){let l=0,t=T*l;for(let l=0;l<A;l++){const e=z[l];B(e[2]+t,e[1]+t,e[0]+t)}l=o+2*u,t=T*l;for(let l=0;l<A;l++){const e=z[l];B(e[0]+t,e[1]+t,e[2]+t)}}else{for(let l=0;l<A;l++){const t=z[l];B(t[2],t[1],t[0])}for(let l=0;l<A;l++){const t=z[l];B(t[0]+T*o,t[1]+T*o,t[2]+T*o)}}e.addGroup(l,n.length/3-l,0)}(),function(){const l=n.length/3;let t=0;N(S,t),t+=S.length;for(let l=0,e=M.length;l<e;l++){const e=M[l];N(e,t),t+=e.length}e.addGroup(l,n.length/3-l,1)}()}this.setAttribute("position",new It(n,3)),this.setAttribute("uv",new It(i,2)),this.computeVertexNormals()}toJSON(){const l=super.toJSON();return function(l,t,e){if(e.shapes=[],Array.isArray(l))for(let t=0,n=l.length;t<n;t++){const n=l[t];e.shapes.push(n.uuid)}else e.shapes.push(l.uuid);return void 0!==t.extrudePath&&(e.options.extrudePath=t.extrudePath.toJSON()),e}(this.parameters.shapes,this.parameters.options,l)}}const rr={generateTopUV:function(l,t,e,n,i){const a=t[3*e],r=t[3*e+1],o=t[3*n],s=t[3*n+1],m=t[3*i],h=t[3*i+1];return[new W(a,r),new W(o,s),new W(m,h)]},generateSideWallUV:function(l,t,e,n,i,a){const r=t[3*e],o=t[3*e+1],s=t[3*e+2],m=t[3*n],h=t[3*n+1],c=t[3*n+2],q=t[3*i],u=t[3*i+1],d=t[3*i+2],p=t[3*a],x=t[3*a+1],f=t[3*a+2];return Math.abs(o-h)<Math.abs(r-m)?[new W(r,1-s),new W(m,1-c),new W(q,1-d),new W(p,1-f)]:[new W(o,1-s),new W(h,1-c),new W(u,1-d),new W(x,1-f)]}};class or extends Gt{constructor(l,t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:l,curveSegments:t};const e=[],n=[],i=[],a=[];let r=0,o=0;if(!1===Array.isArray(l))s(l);else for(let t=0;t<l.length;t++)s(l[t]),this.addGroup(r,o,t),r+=o,o=0;function s(l){const r=n.length/3,s=l.extractPoints(t);let m=s.shape;const h=s.holes;!1===er.isClockWise(m)&&(m=m.reverse());for(let l=0,t=h.length;l<t;l++){const t=h[l];!0===er.isClockWise(t)&&(h[l]=t.reverse())}const c=er.triangulateShape(m,h);for(let l=0,t=h.length;l<t;l++){const t=h[l];m=m.concat(t)}for(let l=0,t=m.length;l<t;l++){const t=m[l];n.push(t.x,t.y,0),i.push(0,0,1),a.push(t.x,t.y)}for(let l=0,t=c.length;l<t;l++){const t=c[l],n=t[0]+r,i=t[1]+r,a=t[2]+r;e.push(n,i,a),o+=3}}this.setIndex(e),this.setAttribute("position",new It(n,3)),this.setAttribute("normal",new It(i,3)),this.setAttribute("uv",new It(a,2))}toJSON(){const l=super.toJSON();return function(l,t){if(t.shapes=[],Array.isArray(l))for(let e=0,n=l.length;e<n;e++){const n=l[e];t.shapes.push(n.uuid)}else t.shapes.push(l.uuid);return t}(this.parameters.shapes,l)}}class sr extends ar{constructor(l,t={}){const e=t.font;if(!e||!e.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Gt;const n=e.generateShapes(l,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),super(n,t),this.type="TextGeometry"}}(class extends vt{constructor(l){super(),this.type="ShadowMaterial",this.color=new Et(0),this.transparent=!0,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this}}).prototype.isShadowMaterial=!0;(class extends ue{constructor(l){super(l),this.type="RawShaderMaterial"}}).prototype.isRawShaderMaterial=!0;class mr extends vt{constructor(l){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Et(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Et(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new W(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(l)}copy(l){return super.copy(l),this.defines={STANDARD:""},this.color.copy(l.color),this.roughness=l.roughness,this.metalness=l.metalness,this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.emissive.copy(l.emissive),this.emissiveMap=l.emissiveMap,this.emissiveIntensity=l.emissiveIntensity,this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.roughnessMap=l.roughnessMap,this.metalnessMap=l.metalnessMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.envMapIntensity=l.envMapIntensity,this.refractionRatio=l.refractionRatio,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this.flatShading=l.flatShading,this.vertexTangents=l.vertexTangents,this}}mr.prototype.isMeshStandardMaterial=!0;(class extends mr{constructor(l){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new W(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(l){this.reflectivity=F(2.5*(l-1)/(l+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Et(1,1,1),this.setValues(l)}copy(l){return super.copy(l),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=l.clearcoat,this.clearcoatMap=l.clearcoatMap,this.clearcoatRoughness=l.clearcoatRoughness,this.clearcoatRoughnessMap=l.clearcoatRoughnessMap,this.clearcoatNormalMap=l.clearcoatNormalMap,this.clearcoatNormalScale.copy(l.clearcoatNormalScale),this.reflectivity=l.reflectivity,l.sheen?this.sheen=(this.sheen||new Et).copy(l.sheen):this.sheen=null,this.transmission=l.transmission,this.transmissionMap=l.transmissionMap,this.thickness=l.thickness,this.thicknessMap=l.thicknessMap,this.attenuationDistance=l.attenuationDistance,this.attenuationColor.copy(l.attenuationColor),this}}).prototype.isMeshPhysicalMaterial=!0;(class extends vt{constructor(l){super(),this.type="MeshPhongMaterial",this.color=new Et(16777215),this.specular=new Et(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Et(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new W(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.specular.copy(l.specular),this.shininess=l.shininess,this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.emissive.copy(l.emissive),this.emissiveMap=l.emissiveMap,this.emissiveIntensity=l.emissiveIntensity,this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.specularMap=l.specularMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.combine=l.combine,this.reflectivity=l.reflectivity,this.refractionRatio=l.refractionRatio,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this.flatShading=l.flatShading,this}}).prototype.isMeshPhongMaterial=!0;(class extends vt{constructor(l){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Et(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Et(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new W(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.gradientMap=l.gradientMap,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.emissive.copy(l.emissive),this.emissiveMap=l.emissiveMap,this.emissiveIntensity=l.emissiveIntensity,this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.alphaMap=l.alphaMap,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this}}).prototype.isMeshToonMaterial=!0;(class extends vt{constructor(l){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new W(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(l)}copy(l){return super.copy(l),this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this.flatShading=l.flatShading,this}}).prototype.isMeshNormalMaterial=!0;class hr extends vt{constructor(l){super(),this.type="MeshLambertMaterial",this.color=new Et(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Et(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.emissive.copy(l.emissive),this.emissiveMap=l.emissiveMap,this.emissiveIntensity=l.emissiveIntensity,this.specularMap=l.specularMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.combine=l.combine,this.reflectivity=l.reflectivity,this.refractionRatio=l.refractionRatio,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this}}hr.prototype.isMeshLambertMaterial=!0;(class extends vt{constructor(l){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Et(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new W(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(l)}copy(l){return super.copy(l),this.defines={MATCAP:""},this.color.copy(l.color),this.matcap=l.matcap,this.map=l.map,this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.alphaMap=l.alphaMap,this.morphTargets=l.morphTargets,this.morphNormals=l.morphNormals,this.flatShading=l.flatShading,this}}).prototype.isMeshMatcapMaterial=!0;(class extends xa{constructor(l){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(l)}copy(l){return super.copy(l),this.scale=l.scale,this.dashSize=l.dashSize,this.gapSize=l.gapSize,this}}).prototype.isLineDashedMaterial=!0;const cr={arraySlice:function(l,t,e){return cr.isTypedArray(l)?new l.constructor(l.subarray(t,void 0!==e?e:l.length)):l.slice(t,e)},convertArray:function(l,t,e){return!l||!e&&l.constructor===t?l:"number"==typeof t.BYTES_PER_ELEMENT?new t(l):Array.prototype.slice.call(l)},isTypedArray:function(l){return ArrayBuffer.isView(l)&&!(l instanceof DataView)},getKeyframeOrder:function(l){const t=l.length,e=new Array(t);for(let l=0;l!==t;++l)e[l]=l;return e.sort((function(t,e){return l[t]-l[e]})),e},sortedArray:function(l,t,e){const n=l.length,i=new l.constructor(n);for(let a=0,r=0;r!==n;++a){const n=e[a]*t;for(let e=0;e!==t;++e)i[r++]=l[n+e]}return i},flattenJSON:function(l,t,e,n){let i=1,a=l[0];for(;void 0!==a&&void 0===a[n];)a=l[i++];if(void 0===a)return;let r=a[n];if(void 0!==r)if(Array.isArray(r))do{r=a[n],void 0!==r&&(t.push(a.time),e.push.apply(e,r)),a=l[i++]}while(void 0!==a);else if(void 0!==r.toArray)do{r=a[n],void 0!==r&&(t.push(a.time),r.toArray(e,e.length)),a=l[i++]}while(void 0!==a);else do{r=a[n],void 0!==r&&(t.push(a.time),e.push(r)),a=l[i++]}while(void 0!==a)},subclip:function(l,t,e,n,i=30){const a=l.clone();a.name=t;const r=[];for(let l=0;l<a.tracks.length;++l){const t=a.tracks[l],o=t.getValueSize(),s=[],m=[];for(let l=0;l<t.times.length;++l){const a=t.times[l]*i;if(!(a<e||a>=n)){s.push(t.times[l]);for(let e=0;e<o;++e)m.push(t.values[l*o+e])}}0!==s.length&&(t.times=cr.convertArray(s,t.times.constructor),t.values=cr.convertArray(m,t.values.constructor),r.push(t))}a.tracks=r;let o=1/0;for(let l=0;l<a.tracks.length;++l)o>a.tracks[l].times[0]&&(o=a.tracks[l].times[0]);for(let l=0;l<a.tracks.length;++l)a.tracks[l].shift(-1*o);return a.resetDuration(),a},makeClipAdditive:function(l,t=0,e=l,n=30){n<=0&&(n=30);const i=e.tracks.length,a=t/n;for(let t=0;t<i;++t){const n=e.tracks[t],i=n.ValueTypeName;if("bool"===i||"string"===i)continue;const r=l.tracks.find((function(l){return l.name===n.name&&l.ValueTypeName===i}));if(void 0===r)continue;let o=0;const s=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=s/3);let m=0;const h=r.getValueSize();r.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(m=h/3);const c=n.times.length-1;let q;if(a<=n.times[0]){const l=o,t=s-o;q=cr.arraySlice(n.values,l,t)}else if(a>=n.times[c]){const l=c*s+o,t=l+s-o;q=cr.arraySlice(n.values,l,t)}else{const l=n.createInterpolant(),t=o,e=s-o;l.evaluate(a),q=cr.arraySlice(l.resultBuffer,t,e)}"quaternion"===i&&(new ll).fromArray(q).normalize().conjugate().toArray(q);const u=r.times.length;for(let l=0;l<u;++l){const t=l*h+m;if("quaternion"===i)ll.multiplyQuaternionsFlat(r.values,t,q,0,r.values,t);else{const l=h-2*m;for(let e=0;e<l;++e)r.values[t+e]-=q[e]}}}return l.blendMode=2501,l}};class qr{constructor(l,t,e,n){this.parameterPositions=l,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(e),this.sampleValues=t,this.valueSize=e,this.settings=null,this.DefaultSettings_={}}evaluate(l){const t=this.parameterPositions;let e=this._cachedIndex,n=t[e],i=t[e-1];l:{t:{let a;e:{n:if(!(l<n)){for(let a=e+2;;){if(void 0===n){if(l<i)break n;return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,l,i)}if(e===a)break;if(i=n,n=t[++e],l<n)break t}a=t.length;break e}if(l>=i)break l;{const r=t[1];l<r&&(e=2,i=r);for(let a=e-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,l,n);if(e===a)break;if(n=i,i=t[--e-1],l>=i)break t}a=e,e=0}}for(;e<a;){const n=e+a>>>1;l<t[n]?a=n:e=n+1}if(n=t[e],i=t[e-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,l,n);if(void 0===n)return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,i,l)}this._cachedIndex=e,this.intervalChanged_(e,i,n)}return this.interpolate_(e,i,l,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(l){const t=this.resultBuffer,e=this.sampleValues,n=this.valueSize,i=l*n;for(let l=0;l!==n;++l)t[l]=e[i+l];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}qr.prototype.beforeStart_=qr.prototype.copySampleValue_,qr.prototype.afterEnd_=qr.prototype.copySampleValue_;class ur extends qr{constructor(l,t,e,n){super(l,t,e,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:z,endingEnd:z}}intervalChanged_(l,t,e){const n=this.parameterPositions;let i=l-2,a=l+1,r=n[i],o=n[a];if(void 0===r)switch(this.getSettings_().endingStart){case S:i=l,r=2*t-e;break;case E:i=n.length-2,r=t+n[i]-n[i+1];break;default:i=l,r=e}if(void 0===o)switch(this.getSettings_().endingEnd){case S:a=l,o=2*e-t;break;case E:a=1,o=e+n[1]-n[0];break;default:a=l-1,o=t}const s=.5*(e-t),m=this.valueSize;this._weightPrev=s/(t-r),this._weightNext=s/(o-e),this._offsetPrev=i*m,this._offsetNext=a*m}interpolate_(l,t,e,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,o=l*r,s=o-r,m=this._offsetPrev,h=this._offsetNext,c=this._weightPrev,q=this._weightNext,u=(e-t)/(n-t),d=u*u,p=d*u,x=-c*p+2*c*d-c*u,f=(1+c)*p+(-1.5-2*c)*d+(-.5+c)*u+1,_=(-1-q)*p+(1.5+q)*d+.5*u,g=q*p-q*d;for(let l=0;l!==r;++l)i[l]=x*a[m+l]+f*a[s+l]+_*a[o+l]+g*a[h+l];return i}}class dr extends qr{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l,t,e,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,o=l*r,s=o-r,m=(e-t)/(n-t),h=1-m;for(let l=0;l!==r;++l)i[l]=a[s+l]*h+a[o+l]*m;return i}}class pr extends qr{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l){return this.copySampleValue_(l-1)}}class xr{constructor(l,t,e,n){if(void 0===l)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+l);this.name=l,this.times=cr.convertArray(t,this.TimeBufferType),this.values=cr.convertArray(e,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(l){const t=l.constructor;let e;if(t.toJSON!==this.toJSON)e=t.toJSON(l);else{e={name:l.name,times:cr.convertArray(l.times,Array),values:cr.convertArray(l.values,Array)};const t=l.getInterpolation();t!==l.DefaultInterpolation&&(e.interpolation=t)}return e.type=l.ValueTypeName,e}InterpolantFactoryMethodDiscrete(l){return new pr(this.times,this.values,this.getValueSize(),l)}InterpolantFactoryMethodLinear(l){return new dr(this.times,this.values,this.getValueSize(),l)}InterpolantFactoryMethodSmooth(l){return new ur(this.times,this.values,this.getValueSize(),l)}setInterpolation(l){let t;switch(l){case b:t=this.InterpolantFactoryMethodDiscrete;break;case w:t=this.InterpolantFactoryMethodLinear;break;case M:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(l===this.DefaultInterpolation)throw new Error(t);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return b;case this.InterpolantFactoryMethodLinear:return w;case this.InterpolantFactoryMethodSmooth:return M}}getValueSize(){return this.values.length/this.times.length}shift(l){if(0!==l){const t=this.times;for(let e=0,n=t.length;e!==n;++e)t[e]+=l}return this}scale(l){if(1!==l){const t=this.times;for(let e=0,n=t.length;e!==n;++e)t[e]*=l}return this}trim(l,t){const e=this.times,n=e.length;let i=0,a=n-1;for(;i!==n&&e[i]<l;)++i;for(;-1!==a&&e[a]>t;)--a;if(++a,0!==i||a!==n){i>=a&&(a=Math.max(a,1),i=a-1);const l=this.getValueSize();this.times=cr.arraySlice(e,i,a),this.values=cr.arraySlice(this.values,i*l,a*l)}return this}validate(){let l=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),l=!1);const e=this.times,n=this.values,i=e.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),l=!1);let a=null;for(let t=0;t!==i;t++){const n=e[t];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,n),l=!1;break}if(null!==a&&a>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,n,a),l=!1;break}a=n}if(void 0!==n&&cr.isTypedArray(n))for(let t=0,e=n.length;t!==e;++t){const e=n[t];if(isNaN(e)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,e),l=!1;break}}return l}optimize(){const l=cr.arraySlice(this.times),t=cr.arraySlice(this.values),e=this.getValueSize(),n=this.getInterpolation()===M,i=l.length-1;let a=1;for(let r=1;r<i;++r){let i=!1;const o=l[r];if(o!==l[r+1]&&(1!==r||o!==l[0]))if(n)i=!0;else{const l=r*e,n=l-e,a=l+e;for(let r=0;r!==e;++r){const e=t[l+r];if(e!==t[n+r]||e!==t[a+r]){i=!0;break}}}if(i){if(r!==a){l[a]=l[r];const n=r*e,i=a*e;for(let l=0;l!==e;++l)t[i+l]=t[n+l]}++a}}if(i>0){l[a]=l[i];for(let l=i*e,n=a*e,r=0;r!==e;++r)t[n+r]=t[l+r];++a}return a!==l.length?(this.times=cr.arraySlice(l,0,a),this.values=cr.arraySlice(t,0,a*e)):(this.times=l,this.values=t),this}clone(){const l=cr.arraySlice(this.times,0),t=cr.arraySlice(this.values,0),e=new(0,this.constructor)(this.name,l,t);return e.createInterpolant=this.createInterpolant,e}}xr.prototype.TimeBufferType=Float32Array,xr.prototype.ValueBufferType=Float32Array,xr.prototype.DefaultInterpolation=w;class fr extends xr{}fr.prototype.ValueTypeName="bool",fr.prototype.ValueBufferType=Array,fr.prototype.DefaultInterpolation=b,fr.prototype.InterpolantFactoryMethodLinear=void 0,fr.prototype.InterpolantFactoryMethodSmooth=void 0;class _r extends xr{}_r.prototype.ValueTypeName="color";class gr extends xr{}gr.prototype.ValueTypeName="number";class vr extends qr{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l,t,e,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,o=(e-t)/(n-t);let s=l*r;for(let l=s+r;s!==l;s+=4)ll.slerpFlat(i,0,a,s-r,a,s,o);return i}}class yr extends xr{InterpolantFactoryMethodLinear(l){return new vr(this.times,this.values,this.getValueSize(),l)}}yr.prototype.ValueTypeName="quaternion",yr.prototype.DefaultInterpolation=w,yr.prototype.InterpolantFactoryMethodSmooth=void 0;class br extends xr{}br.prototype.ValueTypeName="string",br.prototype.ValueBufferType=Array,br.prototype.DefaultInterpolation=b,br.prototype.InterpolantFactoryMethodLinear=void 0,br.prototype.InterpolantFactoryMethodSmooth=void 0;class wr extends xr{}wr.prototype.ValueTypeName="vector";class Mr{constructor(l,t=-1,e,n=2500){this.name=l,this.tracks=e,this.duration=t,this.blendMode=n,this.uuid=B(),this.duration<0&&this.resetDuration()}static parse(l){const t=[],e=l.tracks,n=1/(l.fps||1);for(let l=0,i=e.length;l!==i;++l)t.push(zr(e[l]).scale(n));const i=new this(l.name,l.duration,t,l.blendMode);return i.uuid=l.uuid,i}static toJSON(l){const t=[],e=l.tracks,n={name:l.name,duration:l.duration,tracks:t,uuid:l.uuid,blendMode:l.blendMode};for(let l=0,n=e.length;l!==n;++l)t.push(xr.toJSON(e[l]));return n}static CreateFromMorphTargetSequence(l,t,e,n){const i=t.length,a=[];for(let l=0;l<i;l++){let r=[],o=[];r.push((l+i-1)%i,l,(l+1)%i),o.push(0,1,0);const s=cr.getKeyframeOrder(r);r=cr.sortedArray(r,1,s),o=cr.sortedArray(o,1,s),n||0!==r[0]||(r.push(i),o.push(o[0])),a.push(new gr(".morphTargetInfluences["+t[l].name+"]",r,o).scale(1/e))}return new this(l,-1,a)}static findByName(l,t){let e=l;if(!Array.isArray(l)){const t=l;e=t.geometry&&t.geometry.animations||t.animations}for(let l=0;l<e.length;l++)if(e[l].name===t)return e[l];return null}static CreateClipsFromMorphTargetSequences(l,t,e){const n={},i=/^([\w-]*?)([\d]+)$/;for(let t=0,e=l.length;t<e;t++){const e=l[t],a=e.name.match(i);if(a&&a.length>1){const l=a[1];let t=n[l];t||(n[l]=t=[]),t.push(e)}}const a=[];for(const l in n)a.push(this.CreateFromMorphTargetSequence(l,n[l],t,e));return a}static parseAnimation(l,t){if(!l)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const e=function(l,t,e,n,i){if(0!==e.length){const a=[],r=[];cr.flattenJSON(e,a,r,n),0!==a.length&&i.push(new l(t,a,r))}},n=[],i=l.name||"default",a=l.fps||30,r=l.blendMode;let o=l.length||-1;const s=l.hierarchy||[];for(let l=0;l<s.length;l++){const i=s[l].keys;if(i&&0!==i.length)if(i[0].morphTargets){const l={};let t;for(t=0;t<i.length;t++)if(i[t].morphTargets)for(let e=0;e<i[t].morphTargets.length;e++)l[i[t].morphTargets[e]]=-1;for(const e in l){const l=[],a=[];for(let n=0;n!==i[t].morphTargets.length;++n){const n=i[t];l.push(n.time),a.push(n.morphTarget===e?1:0)}n.push(new gr(".morphTargetInfluence["+e+"]",l,a))}o=l.length*(a||1)}else{const a=".bones["+t[l].name+"]";e(wr,a+".position",i,"pos",n),e(yr,a+".quaternion",i,"rot",n),e(wr,a+".scale",i,"scl",n)}}return 0===n.length?null:new this(i,o,n,r)}resetDuration(){let l=0;for(let t=0,e=this.tracks.length;t!==e;++t){const e=this.tracks[t];l=Math.max(l,e.times[e.times.length-1])}return this.duration=l,this}trim(){for(let l=0;l<this.tracks.length;l++)this.tracks[l].trim(0,this.duration);return this}validate(){let l=!0;for(let t=0;t<this.tracks.length;t++)l=l&&this.tracks[t].validate();return l}optimize(){for(let l=0;l<this.tracks.length;l++)this.tracks[l].optimize();return this}clone(){const l=[];for(let t=0;t<this.tracks.length;t++)l.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,l,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function zr(l){if(void 0===l.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=function(l){switch(l.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return gr;case"vector":case"vector2":case"vector3":case"vector4":return wr;case"color":return _r;case"quaternion":return yr;case"bool":case"boolean":return fr;case"string":return br}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+l)}(l.type);if(void 0===l.times){const t=[],e=[];cr.flattenJSON(l.keys,t,e,"value"),l.times=t,l.values=e}return void 0!==t.parse?t.parse(l):new t(l.name,l.times,l.values,l.interpolation)}const Sr={enabled:!1,files:{},add:function(l,t){!1!==this.enabled&&(this.files[l]=t)},get:function(l){if(!1!==this.enabled)return this.files[l]},remove:function(l){delete this.files[l]},clear:function(){this.files={}}};const Er=new class{constructor(l,t,e){const n=this;let i,a=!1,r=0,o=0;const s=[];this.onStart=void 0,this.onLoad=l,this.onProgress=t,this.onError=e,this.itemStart=function(l){o++,!1===a&&void 0!==n.onStart&&n.onStart(l,r,o),a=!0},this.itemEnd=function(l){r++,void 0!==n.onProgress&&n.onProgress(l,r,o),r===o&&(a=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(l){void 0!==n.onError&&n.onError(l)},this.resolveURL=function(l){return i?i(l):l},this.setURLModifier=function(l){return i=l,this},this.addHandler=function(l,t){return s.push(l,t),this},this.removeHandler=function(l){const t=s.indexOf(l);return-1!==t&&s.splice(t,2),this},this.getHandler=function(l){for(let t=0,e=s.length;t<e;t+=2){const e=s[t],n=s[t+1];if(e.global&&(e.lastIndex=0),e.test(l))return n}return null}}};class Tr{constructor(l){this.manager=void 0!==l?l:Er,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(l,t){const e=this;return new Promise((function(n,i){e.load(l,n,t,i)}))}parse(){}setCrossOrigin(l){return this.crossOrigin=l,this}setWithCredentials(l){return this.withCredentials=l,this}setPath(l){return this.path=l,this}setResourcePath(l){return this.resourcePath=l,this}setRequestHeader(l){return this.requestHeader=l,this}}const Ar={};class Lr extends Tr{constructor(l){super(l)}load(l,t,e,n){void 0===l&&(l=""),void 0!==this.path&&(l=this.path+l),l=this.manager.resolveURL(l);const i=this,a=Sr.get(l);if(void 0!==a)return i.manager.itemStart(l),setTimeout((function(){t&&t(a),i.manager.itemEnd(l)}),0),a;if(void 0!==Ar[l])return void Ar[l].push({onLoad:t,onProgress:e,onError:n});const r=l.match(/^data:(.*?)(;base64)?,(.*)$/);let o;if(r){const e=r[1],a=!!r[2];let o=r[3];o=decodeURIComponent(o),a&&(o=atob(o));try{let n;const a=(this.responseType||"").toLowerCase();switch(a){case"arraybuffer":case"blob":const l=new Uint8Array(o.length);for(let t=0;t<o.length;t++)l[t]=o.charCodeAt(t);n="blob"===a?new Blob([l.buffer],{type:e}):l.buffer;break;case"document":const t=new DOMParser;n=t.parseFromString(o,e);break;case"json":n=JSON.parse(o);break;default:n=o}setTimeout((function(){t&&t(n),i.manager.itemEnd(l)}),0)}catch(t){setTimeout((function(){n&&n(t),i.manager.itemError(l),i.manager.itemEnd(l)}),0)}}else{Ar[l]=[],Ar[l].push({onLoad:t,onProgress:e,onError:n}),o=new XMLHttpRequest,o.open("GET",l,!0),o.addEventListener("load",(function(t){const e=this.response,n=Ar[l];if(delete Ar[l],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Sr.add(l,e);for(let l=0,t=n.length;l<t;l++){const t=n[l];t.onLoad&&t.onLoad(e)}i.manager.itemEnd(l)}else{for(let l=0,e=n.length;l<e;l++){const e=n[l];e.onError&&e.onError(t)}i.manager.itemError(l),i.manager.itemEnd(l)}}),!1),o.addEventListener("progress",(function(t){const e=Ar[l];for(let l=0,n=e.length;l<n;l++){const n=e[l];n.onProgress&&n.onProgress(t)}}),!1),o.addEventListener("error",(function(t){const e=Ar[l];delete Ar[l];for(let l=0,n=e.length;l<n;l++){const n=e[l];n.onError&&n.onError(t)}i.manager.itemError(l),i.manager.itemEnd(l)}),!1),o.addEventListener("abort",(function(t){const e=Ar[l];delete Ar[l];for(let l=0,n=e.length;l<n;l++){const n=e[l];n.onError&&n.onError(t)}i.manager.itemError(l),i.manager.itemEnd(l)}),!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.overrideMimeType&&o.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const l in this.requestHeader)o.setRequestHeader(l,this.requestHeader[l]);o.send(null)}return i.manager.itemStart(l),o}setResponseType(l){return this.responseType=l,this}setMimeType(l){return this.mimeType=l,this}}class Cr extends Tr{constructor(l){super(l)}load(l,t,e,n){void 0!==this.path&&(l=this.path+l),l=this.manager.resolveURL(l);const i=this,a=Sr.get(l);if(void 0!==a)return i.manager.itemStart(l),setTimeout((function(){t&&t(a),i.manager.itemEnd(l)}),0),a;const r=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){r.removeEventListener("load",o,!1),r.removeEventListener("error",s,!1),Sr.add(l,this),t&&t(this),i.manager.itemEnd(l)}function s(t){r.removeEventListener("load",o,!1),r.removeEventListener("error",s,!1),n&&n(t),i.manager.itemError(l),i.manager.itemEnd(l)}return r.addEventListener("load",o,!1),r.addEventListener("error",s,!1),"data:"!==l.substr(0,5)&&void 0!==this.crossOrigin&&(r.crossOrigin=this.crossOrigin),i.manager.itemStart(l),r.src=l,r}}class Rr extends Tr{constructor(l){super(l)}load(l,t,e,n){const i=new _e,a=new Cr(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let r=0;function o(e){a.load(l[e],(function(l){i.images[e]=l,r++,6===r&&(i.needsUpdate=!0,t&&t(i))}),void 0,n)}for(let t=0;t<l.length;++t)o(t);return i}}class Pr extends Tr{constructor(l){super(l)}load(l,t,e,n){const i=new Z,a=new Cr(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(l,(function(e){i.image=e;const n=l.search(/\.jpe?g($|\?)/i)>0||0===l.search(/^data\:image\/jpeg/);i.format=n?_:g,i.needsUpdate=!0,void 0!==t&&t(i)}),e,n),i}}class Ir{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(l,t){const e=this.getUtoTmapping(l);return this.getPoint(e,t)}getPoints(l=5){const t=[];for(let e=0;e<=l;e++)t.push(this.getPoint(e/l));return t}getSpacedPoints(l=5){const t=[];for(let e=0;e<=l;e++)t.push(this.getPointAt(e/l));return t}getLength(){const l=this.getLengths();return l[l.length-1]}getLengths(l=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===l+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let e,n=this.getPoint(0),i=0;t.push(0);for(let a=1;a<=l;a++)e=this.getPoint(a/l),i+=e.distanceTo(n),t.push(i),n=e;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(l,t){const e=this.getLengths();let n=0;const i=e.length;let a;a=t||l*e[i-1];let r,o=0,s=i-1;for(;o<=s;)if(n=Math.floor(o+(s-o)/2),r=e[n]-a,r<0)o=n+1;else{if(!(r>0)){s=n;break}s=n-1}if(n=s,e[n]===a)return n/(i-1);const m=e[n];return(n+(a-m)/(e[n+1]-m))/(i-1)}getTangent(l,t){const e=1e-4;let n=l-e,i=l+e;n<0&&(n=0),i>1&&(i=1);const a=this.getPoint(n),r=this.getPoint(i),o=t||(a.isVector2?new W:new tl);return o.copy(r).sub(a).normalize(),o}getTangentAt(l,t){const e=this.getUtoTmapping(l);return this.getTangent(e,t)}computeFrenetFrames(l,t){const e=new tl,n=[],i=[],a=[],r=new tl,o=new Rl;for(let t=0;t<=l;t++){const e=t/l;n[t]=this.getTangentAt(e,new tl),n[t].normalize()}i[0]=new tl,a[0]=new tl;let s=Number.MAX_VALUE;const m=Math.abs(n[0].x),h=Math.abs(n[0].y),c=Math.abs(n[0].z);m<=s&&(s=m,e.set(1,0,0)),h<=s&&(s=h,e.set(0,1,0)),c<=s&&e.set(0,0,1),r.crossVectors(n[0],e).normalize(),i[0].crossVectors(n[0],r),a[0].crossVectors(n[0],i[0]);for(let t=1;t<=l;t++){if(i[t]=i[t-1].clone(),a[t]=a[t-1].clone(),r.crossVectors(n[t-1],n[t]),r.length()>Number.EPSILON){r.normalize();const l=Math.acos(F(n[t-1].dot(n[t]),-1,1));i[t].applyMatrix4(o.makeRotationAxis(r,l))}a[t].crossVectors(n[t],i[t])}if(!0===t){let t=Math.acos(F(i[0].dot(i[l]),-1,1));t/=l,n[0].dot(r.crossVectors(i[0],i[l]))>0&&(t=-t);for(let e=1;e<=l;e++)i[e].applyMatrix4(o.makeRotationAxis(n[e],t*e)),a[e].crossVectors(n[e],i[e])}return{tangents:n,normals:i,binormals:a}}clone(){return(new this.constructor).copy(this)}copy(l){return this.arcLengthDivisions=l.arcLengthDivisions,this}toJSON(){const l={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return l.arcLengthDivisions=this.arcLengthDivisions,l.type=this.type,l}fromJSON(l){return this.arcLengthDivisions=l.arcLengthDivisions,this}}class Dr extends Ir{constructor(l=0,t=0,e=1,n=1,i=0,a=2*Math.PI,r=!1,o=0){super(),this.type="EllipseCurve",this.aX=l,this.aY=t,this.xRadius=e,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=a,this.aClockwise=r,this.aRotation=o}getPoint(l,t){const e=t||new W,n=2*Math.PI;let i=this.aEndAngle-this.aStartAngle;const a=Math.abs(i)<Number.EPSILON;for(;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=a?0:n),!0!==this.aClockwise||a||(i===n?i=-n:i-=n);const r=this.aStartAngle+l*i;let o=this.aX+this.xRadius*Math.cos(r),s=this.aY+this.yRadius*Math.sin(r);if(0!==this.aRotation){const l=Math.cos(this.aRotation),t=Math.sin(this.aRotation),e=o-this.aX,n=s-this.aY;o=e*l-n*t+this.aX,s=e*t+n*l+this.aY}return e.set(o,s)}copy(l){return super.copy(l),this.aX=l.aX,this.aY=l.aY,this.xRadius=l.xRadius,this.yRadius=l.yRadius,this.aStartAngle=l.aStartAngle,this.aEndAngle=l.aEndAngle,this.aClockwise=l.aClockwise,this.aRotation=l.aRotation,this}toJSON(){const l=super.toJSON();return l.aX=this.aX,l.aY=this.aY,l.xRadius=this.xRadius,l.yRadius=this.yRadius,l.aStartAngle=this.aStartAngle,l.aEndAngle=this.aEndAngle,l.aClockwise=this.aClockwise,l.aRotation=this.aRotation,l}fromJSON(l){return super.fromJSON(l),this.aX=l.aX,this.aY=l.aY,this.xRadius=l.xRadius,this.yRadius=l.yRadius,this.aStartAngle=l.aStartAngle,this.aEndAngle=l.aEndAngle,this.aClockwise=l.aClockwise,this.aRotation=l.aRotation,this}}Dr.prototype.isEllipseCurve=!0;class Nr extends Dr{constructor(l,t,e,n,i,a){super(l,t,e,e,n,i,a),this.type="ArcCurve"}}function Or(){let l=0,t=0,e=0,n=0;function i(i,a,r,o){l=i,t=r,e=-3*i+3*a-2*r-o,n=2*i-2*a+r+o}return{initCatmullRom:function(l,t,e,n,a){i(t,e,a*(e-l),a*(n-t))},initNonuniformCatmullRom:function(l,t,e,n,a,r,o){let s=(t-l)/a-(e-l)/(a+r)+(e-t)/r,m=(e-t)/r-(n-t)/(r+o)+(n-e)/o;s*=r,m*=r,i(t,e,s,m)},calc:function(i){const a=i*i;return l+t*i+e*a+n*(a*i)}}}Nr.prototype.isArcCurve=!0;const Br=new tl,Fr=new Or,kr=new Or,Hr=new Or;class Ur extends Ir{constructor(l=[],t=!1,e="centripetal",n=.5){super(),this.type="CatmullRomCurve3",this.points=l,this.closed=t,this.curveType=e,this.tension=n}getPoint(l,t=new tl){const e=t,n=this.points,i=n.length,a=(i-(this.closed?0:1))*l;let r,o,s=Math.floor(a),m=a-s;this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/i)+1)*i:0===m&&s===i-1&&(s=i-2,m=1),this.closed||s>0?r=n[(s-1)%i]:(Br.subVectors(n[0],n[1]).add(n[0]),r=Br);const h=n[s%i],c=n[(s+1)%i];if(this.closed||s+2<i?o=n[(s+2)%i]:(Br.subVectors(n[i-1],n[i-2]).add(n[i-1]),o=Br),"centripetal"===this.curveType||"chordal"===this.curveType){const l="chordal"===this.curveType?.5:.25;let t=Math.pow(r.distanceToSquared(h),l),e=Math.pow(h.distanceToSquared(c),l),n=Math.pow(c.distanceToSquared(o),l);e<1e-4&&(e=1),t<1e-4&&(t=e),n<1e-4&&(n=e),Fr.initNonuniformCatmullRom(r.x,h.x,c.x,o.x,t,e,n),kr.initNonuniformCatmullRom(r.y,h.y,c.y,o.y,t,e,n),Hr.initNonuniformCatmullRom(r.z,h.z,c.z,o.z,t,e,n)}else"catmullrom"===this.curveType&&(Fr.initCatmullRom(r.x,h.x,c.x,o.x,this.tension),kr.initCatmullRom(r.y,h.y,c.y,o.y,this.tension),Hr.initCatmullRom(r.z,h.z,c.z,o.z,this.tension));return e.set(Fr.calc(m),kr.calc(m),Hr.calc(m)),e}copy(l){super.copy(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push(e.clone())}return this.closed=l.closed,this.curveType=l.curveType,this.tension=l.tension,this}toJSON(){const l=super.toJSON();l.points=[];for(let t=0,e=this.points.length;t<e;t++){const e=this.points[t];l.points.push(e.toArray())}return l.closed=this.closed,l.curveType=this.curveType,l.tension=this.tension,l}fromJSON(l){super.fromJSON(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push((new tl).fromArray(e))}return this.closed=l.closed,this.curveType=l.curveType,this.tension=l.tension,this}}function Gr(l,t,e,n,i){const a=.5*(n-t),r=.5*(i-e),o=l*l;return(2*e-2*n+a+r)*(l*o)+(-3*e+3*n-2*a-r)*o+a*l+e}function Vr(l,t,e,n){return function(l,t){const e=1-l;return e*e*t}(l,t)+function(l,t){return 2*(1-l)*l*t}(l,e)+function(l,t){return l*l*t}(l,n)}function Wr(l,t,e,n,i){return function(l,t){const e=1-l;return e*e*e*t}(l,t)+function(l,t){const e=1-l;return 3*e*e*l*t}(l,e)+function(l,t){return 3*(1-l)*l*l*t}(l,n)+function(l,t){return l*l*l*t}(l,i)}Ur.prototype.isCatmullRomCurve3=!0;class jr extends Ir{constructor(l=new W,t=new W,e=new W,n=new W){super(),this.type="CubicBezierCurve",this.v0=l,this.v1=t,this.v2=e,this.v3=n}getPoint(l,t=new W){const e=t,n=this.v0,i=this.v1,a=this.v2,r=this.v3;return e.set(Wr(l,n.x,i.x,a.x,r.x),Wr(l,n.y,i.y,a.y,r.y)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this.v3.copy(l.v3),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l.v3=this.v3.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this.v3.fromArray(l.v3),this}}jr.prototype.isCubicBezierCurve=!0;class Xr extends Ir{constructor(l=new tl,t=new tl,e=new tl,n=new tl){super(),this.type="CubicBezierCurve3",this.v0=l,this.v1=t,this.v2=e,this.v3=n}getPoint(l,t=new tl){const e=t,n=this.v0,i=this.v1,a=this.v2,r=this.v3;return e.set(Wr(l,n.x,i.x,a.x,r.x),Wr(l,n.y,i.y,a.y,r.y),Wr(l,n.z,i.z,a.z,r.z)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this.v3.copy(l.v3),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l.v3=this.v3.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this.v3.fromArray(l.v3),this}}Xr.prototype.isCubicBezierCurve3=!0;class Yr extends Ir{constructor(l=new W,t=new W){super(),this.type="LineCurve",this.v1=l,this.v2=t}getPoint(l,t=new W){const e=t;return 1===l?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(l).add(this.v1)),e}getPointAt(l,t){return this.getPoint(l,t)}getTangent(l,t){const e=t||new W;return e.copy(this.v2).sub(this.v1).normalize(),e}copy(l){return super.copy(l),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}}Yr.prototype.isLineCurve=!0;class Jr extends Ir{constructor(l=new W,t=new W,e=new W){super(),this.type="QuadraticBezierCurve",this.v0=l,this.v1=t,this.v2=e}getPoint(l,t=new W){const e=t,n=this.v0,i=this.v1,a=this.v2;return e.set(Vr(l,n.x,i.x,a.x),Vr(l,n.y,i.y,a.y)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}}Jr.prototype.isQuadraticBezierCurve=!0;class Zr extends Ir{constructor(l=new tl,t=new tl,e=new tl){super(),this.type="QuadraticBezierCurve3",this.v0=l,this.v1=t,this.v2=e}getPoint(l,t=new tl){const e=t,n=this.v0,i=this.v1,a=this.v2;return e.set(Vr(l,n.x,i.x,a.x),Vr(l,n.y,i.y,a.y),Vr(l,n.z,i.z,a.z)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}}Zr.prototype.isQuadraticBezierCurve3=!0;class Qr extends Ir{constructor(l=[]){super(),this.type="SplineCurve",this.points=l}getPoint(l,t=new W){const e=t,n=this.points,i=(n.length-1)*l,a=Math.floor(i),r=i-a,o=n[0===a?a:a-1],s=n[a],m=n[a>n.length-2?n.length-1:a+1],h=n[a>n.length-3?n.length-1:a+2];return e.set(Gr(r,o.x,s.x,m.x,h.x),Gr(r,o.y,s.y,m.y,h.y)),e}copy(l){super.copy(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push(e.clone())}return this}toJSON(){const l=super.toJSON();l.points=[];for(let t=0,e=this.points.length;t<e;t++){const e=this.points[t];l.points.push(e.toArray())}return l}fromJSON(l){super.fromJSON(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push((new W).fromArray(e))}return this}}Qr.prototype.isSplineCurve=!0;var Kr=Object.freeze({__proto__:null,ArcCurve:Nr,CatmullRomCurve3:Ur,CubicBezierCurve:jr,CubicBezierCurve3:Xr,EllipseCurve:Dr,LineCurve:Yr,LineCurve3:class extends Ir{constructor(l=new tl,t=new tl){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=l,this.v2=t}getPoint(l,t=new tl){const e=t;return 1===l?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(l).add(this.v1)),e}getPointAt(l,t){return this.getPoint(l,t)}copy(l){return super.copy(l),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}},QuadraticBezierCurve:Jr,QuadraticBezierCurve3:Zr,SplineCurve:Qr});class $r extends Ir{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(l){this.curves.push(l)}closePath(){const l=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);l.equals(t)||this.curves.push(new Yr(t,l))}getPoint(l){const t=l*this.getLength(),e=this.getCurveLengths();let n=0;for(;n<e.length;){if(e[n]>=t){const l=e[n]-t,i=this.curves[n],a=i.getLength(),r=0===a?0:1-l/a;return i.getPointAt(r)}n++}return null}getLength(){const l=this.getCurveLengths();return l[l.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const l=[];let t=0;for(let e=0,n=this.curves.length;e<n;e++)t+=this.curves[e].getLength(),l.push(t);return this.cacheLengths=l,l}getSpacedPoints(l=40){const t=[];for(let e=0;e<=l;e++)t.push(this.getPoint(e/l));return this.autoClose&&t.push(t[0]),t}getPoints(l=12){const t=[];let e;for(let n=0,i=this.curves;n<i.length;n++){const a=i[n],r=a&&a.isEllipseCurve?2*l:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?l*a.points.length:l,o=a.getPoints(r);for(let l=0;l<o.length;l++){const n=o[l];e&&e.equals(n)||(t.push(n),e=n)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(l){super.copy(l),this.curves=[];for(let t=0,e=l.curves.length;t<e;t++){const e=l.curves[t];this.curves.push(e.clone())}return this.autoClose=l.autoClose,this}toJSON(){const l=super.toJSON();l.autoClose=this.autoClose,l.curves=[];for(let t=0,e=this.curves.length;t<e;t++){const e=this.curves[t];l.curves.push(e.toJSON())}return l}fromJSON(l){super.fromJSON(l),this.autoClose=l.autoClose,this.curves=[];for(let t=0,e=l.curves.length;t<e;t++){const e=l.curves[t];this.curves.push((new Kr[e.type]).fromJSON(e))}return this}}class lo extends $r{constructor(l){super(),this.type="Path",this.currentPoint=new W,l&&this.setFromPoints(l)}setFromPoints(l){this.moveTo(l[0].x,l[0].y);for(let t=1,e=l.length;t<e;t++)this.lineTo(l[t].x,l[t].y);return this}moveTo(l,t){return this.currentPoint.set(l,t),this}lineTo(l,t){const e=new Yr(this.currentPoint.clone(),new W(l,t));return this.curves.push(e),this.currentPoint.set(l,t),this}quadraticCurveTo(l,t,e,n){const i=new Jr(this.currentPoint.clone(),new W(l,t),new W(e,n));return this.curves.push(i),this.currentPoint.set(e,n),this}bezierCurveTo(l,t,e,n,i,a){const r=new jr(this.currentPoint.clone(),new W(l,t),new W(e,n),new W(i,a));return this.curves.push(r),this.currentPoint.set(i,a),this}splineThru(l){const t=[this.currentPoint.clone()].concat(l),e=new Qr(t);return this.curves.push(e),this.currentPoint.copy(l[l.length-1]),this}arc(l,t,e,n,i,a){const r=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(l+r,t+o,e,n,i,a),this}absarc(l,t,e,n,i,a){return this.absellipse(l,t,e,e,n,i,a),this}ellipse(l,t,e,n,i,a,r,o){const s=this.currentPoint.x,m=this.currentPoint.y;return this.absellipse(l+s,t+m,e,n,i,a,r,o),this}absellipse(l,t,e,n,i,a,r,o){const s=new Dr(l,t,e,n,i,a,r,o);if(this.curves.length>0){const l=s.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(s);const m=s.getPoint(1);return this.currentPoint.copy(m),this}copy(l){return super.copy(l),this.currentPoint.copy(l.currentPoint),this}toJSON(){const l=super.toJSON();return l.currentPoint=this.currentPoint.toArray(),l}fromJSON(l){return super.fromJSON(l),this.currentPoint.fromArray(l.currentPoint),this}}class to extends lo{constructor(l){super(l),this.uuid=B(),this.type="Shape",this.holes=[]}getPointsHoles(l){const t=[];for(let e=0,n=this.holes.length;e<n;e++)t[e]=this.holes[e].getPoints(l);return t}extractPoints(l){return{shape:this.getPoints(l),holes:this.getPointsHoles(l)}}copy(l){super.copy(l),this.holes=[];for(let t=0,e=l.holes.length;t<e;t++){const e=l.holes[t];this.holes.push(e.clone())}return this}toJSON(){const l=super.toJSON();l.uuid=this.uuid,l.holes=[];for(let t=0,e=this.holes.length;t<e;t++){const e=this.holes[t];l.holes.push(e.toJSON())}return l}fromJSON(l){super.fromJSON(l),this.uuid=l.uuid,this.holes=[];for(let t=0,e=l.holes.length;t<e;t++){const e=l.holes[t];this.holes.push((new lo).fromJSON(e))}return this}}class eo extends nt{constructor(l,t=1){super(),this.type="Light",this.color=new Et(l),this.intensity=t}dispose(){}copy(l){return super.copy(l),this.color.copy(l.color),this.intensity=l.intensity,this}toJSON(l){const t=super.toJSON(l);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}eo.prototype.isLight=!0;(class extends eo{constructor(l,t,e){super(l,e),this.type="HemisphereLight",this.position.copy(nt.DefaultUp),this.updateMatrix(),this.groundColor=new Et(t)}copy(l){return eo.prototype.copy.call(this,l),this.groundColor.copy(l.groundColor),this}}).prototype.isHemisphereLight=!0;const no=new Rl,io=new tl,ao=new tl;class ro{constructor(l){this.camera=l,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new W(512,512),this.map=null,this.mapPass=null,this.matrix=new Rl,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new be,this._frameExtents=new W(1,1),this._viewportCount=1,this._viewports=[new K(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(l){const t=this.camera,e=this.matrix;io.setFromMatrixPosition(l.matrixWorld),t.position.copy(io),ao.setFromMatrixPosition(l.target.matrixWorld),t.lookAt(ao),t.updateMatrixWorld(),no.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(no),e.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),e.multiply(t.projectionMatrix),e.multiply(t.matrixWorldInverse)}getViewport(l){return this._viewports[l]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(l){return this.camera=l.camera.clone(),this.bias=l.bias,this.radius=l.radius,this.mapSize.copy(l.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const l={};return 0!==this.bias&&(l.bias=this.bias),0!==this.normalBias&&(l.normalBias=this.normalBias),1!==this.radius&&(l.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(l.mapSize=this.mapSize.toArray()),l.camera=this.camera.toJSON(!1).object,delete l.camera.matrix,l}}class oo extends ro{constructor(){super(new pe(50,1,.5,500)),this.focus=1}updateMatrices(l){const t=this.camera,e=2*O*l.angle*this.focus,n=this.mapSize.width/this.mapSize.height,i=l.distance||t.far;e===t.fov&&n===t.aspect&&i===t.far||(t.fov=e,t.aspect=n,t.far=i,t.updateProjectionMatrix()),super.updateMatrices(l)}copy(l){return super.copy(l),this.focus=l.focus,this}}oo.prototype.isSpotLightShadow=!0;(class extends eo{constructor(l,t,e=0,n=Math.PI/3,i=0,a=1){super(l,t),this.type="SpotLight",this.position.copy(nt.DefaultUp),this.updateMatrix(),this.target=new nt,this.distance=e,this.angle=n,this.penumbra=i,this.decay=a,this.shadow=new oo}get power(){return this.intensity*Math.PI}set power(l){this.intensity=l/Math.PI}dispose(){this.shadow.dispose()}copy(l){return super.copy(l),this.distance=l.distance,this.angle=l.angle,this.penumbra=l.penumbra,this.decay=l.decay,this.target=l.target.clone(),this.shadow=l.shadow.clone(),this}}).prototype.isSpotLight=!0;const so=new Rl,mo=new tl,ho=new tl;class co extends ro{constructor(){super(new pe(90,1,.5,500)),this._frameExtents=new W(4,2),this._viewportCount=6,this._viewports=[new K(2,1,1,1),new K(0,1,1,1),new K(3,1,1,1),new K(1,1,1,1),new K(3,0,1,1),new K(1,0,1,1)],this._cubeDirections=[new tl(1,0,0),new tl(-1,0,0),new tl(0,0,1),new tl(0,0,-1),new tl(0,1,0),new tl(0,-1,0)],this._cubeUps=[new tl(0,1,0),new tl(0,1,0),new tl(0,1,0),new tl(0,1,0),new tl(0,0,1),new tl(0,0,-1)]}updateMatrices(l,t=0){const e=this.camera,n=this.matrix,i=l.distance||e.far;i!==e.far&&(e.far=i,e.updateProjectionMatrix()),mo.setFromMatrixPosition(l.matrixWorld),e.position.copy(mo),ho.copy(e.position),ho.add(this._cubeDirections[t]),e.up.copy(this._cubeUps[t]),e.lookAt(ho),e.updateMatrixWorld(),n.makeTranslation(-mo.x,-mo.y,-mo.z),so.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(so)}}co.prototype.isPointLightShadow=!0;(class extends eo{constructor(l,t,e=0,n=1){super(l,t),this.type="PointLight",this.distance=e,this.decay=n,this.shadow=new co}get power(){return 4*this.intensity*Math.PI}set power(l){this.intensity=l/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(l){return super.copy(l),this.distance=l.distance,this.decay=l.decay,this.shadow=l.shadow.clone(),this}}).prototype.isPointLight=!0;class qo extends de{constructor(l=-1,t=1,e=1,n=-1,i=.1,a=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=l,this.right=t,this.top=e,this.bottom=n,this.near=i,this.far=a,this.updateProjectionMatrix()}copy(l,t){return super.copy(l,t),this.left=l.left,this.right=l.right,this.top=l.top,this.bottom=l.bottom,this.near=l.near,this.far=l.far,this.zoom=l.zoom,this.view=null===l.view?null:Object.assign({},l.view),this}setViewOffset(l,t,e,n,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=l,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const l=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),e=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let i=e-l,a=e+l,r=n+t,o=n-t;if(null!==this.view&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=l*this.view.offsetX,a=i+l*this.view.width,r-=t*this.view.offsetY,o=r-t*this.view.height}this.projectionMatrix.makeOrthographic(i,a,r,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(l){const t=super.toJSON(l);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}qo.prototype.isOrthographicCamera=!0;class uo extends ro{constructor(){super(new qo(-5,5,5,-5,.5,500))}}uo.prototype.isDirectionalLightShadow=!0;class po extends eo{constructor(l,t){super(l,t),this.type="DirectionalLight",this.position.copy(nt.DefaultUp),this.updateMatrix(),this.target=new nt,this.shadow=new uo}dispose(){this.shadow.dispose()}copy(l){return super.copy(l),this.target=l.target.clone(),this.shadow=l.shadow.clone(),this}}po.prototype.isDirectionalLight=!0;class xo extends eo{constructor(l,t){super(l,t),this.type="AmbientLight"}}xo.prototype.isAmbientLight=!0;(class extends eo{constructor(l,t,e=10,n=10){super(l,t),this.type="RectAreaLight",this.width=e,this.height=n}copy(l){return super.copy(l),this.width=l.width,this.height=l.height,this}toJSON(l){const t=super.toJSON(l);return t.object.width=this.width,t.object.height=this.height,t}}).prototype.isRectAreaLight=!0;class fo{constructor(){this.coefficients=[];for(let l=0;l<9;l++)this.coefficients.push(new tl)}set(l){for(let t=0;t<9;t++)this.coefficients[t].copy(l[t]);return this}zero(){for(let l=0;l<9;l++)this.coefficients[l].set(0,0,0);return this}getAt(l,t){const e=l.x,n=l.y,i=l.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScaledVector(a[1],.488603*n),t.addScaledVector(a[2],.488603*i),t.addScaledVector(a[3],.488603*e),t.addScaledVector(a[4],e*n*1.092548),t.addScaledVector(a[5],n*i*1.092548),t.addScaledVector(a[6],.315392*(3*i*i-1)),t.addScaledVector(a[7],e*i*1.092548),t.addScaledVector(a[8],.546274*(e*e-n*n)),t}getIrradianceAt(l,t){const e=l.x,n=l.y,i=l.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScaledVector(a[1],1.023328*n),t.addScaledVector(a[2],1.023328*i),t.addScaledVector(a[3],1.023328*e),t.addScaledVector(a[4],.858086*e*n),t.addScaledVector(a[5],.858086*n*i),t.addScaledVector(a[6],.743125*i*i-.247708),t.addScaledVector(a[7],.858086*e*i),t.addScaledVector(a[8],.429043*(e*e-n*n)),t}add(l){for(let t=0;t<9;t++)this.coefficients[t].add(l.coefficients[t]);return this}addScaledSH(l,t){for(let e=0;e<9;e++)this.coefficients[e].addScaledVector(l.coefficients[e],t);return this}scale(l){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(l);return this}lerp(l,t){for(let e=0;e<9;e++)this.coefficients[e].lerp(l.coefficients[e],t);return this}equals(l){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(l.coefficients[t]))return!1;return!0}copy(l){return this.set(l.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(l,t=0){const e=this.coefficients;for(let n=0;n<9;n++)e[n].fromArray(l,t+3*n);return this}toArray(l=[],t=0){const e=this.coefficients;for(let n=0;n<9;n++)e[n].toArray(l,t+3*n);return l}static getBasisAt(l,t){const e=l.x,n=l.y,i=l.z;t[0]=.282095,t[1]=.488603*n,t[2]=.488603*i,t[3]=.488603*e,t[4]=1.092548*e*n,t[5]=1.092548*n*i,t[6]=.315392*(3*i*i-1),t[7]=1.092548*e*i,t[8]=.546274*(e*e-n*n)}}fo.prototype.isSphericalHarmonics3=!0;class _o extends eo{constructor(l=new fo,t=1){super(void 0,t),this.sh=l}copy(l){return super.copy(l),this.sh.copy(l.sh),this}fromJSON(l){return this.intensity=l.intensity,this.sh.fromArray(l.sh),this}toJSON(l){const t=super.toJSON(l);return t.object.sh=this.sh.toArray(),t}}_o.prototype.isLightProbe=!0;(class extends Gt{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(l){return super.copy(l),this.instanceCount=l.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const l=super.toJSON(this);return l.instanceCount=this.instanceCount,l.isInstancedBufferGeometry=!0,l}}).prototype.isInstancedBufferGeometry=!0;(class extends Ct{constructor(l,t,e,n){"number"==typeof e&&(n=e,e=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(l,t,e),this.meshPerAttribute=n||1}copy(l){return super.copy(l),this.meshPerAttribute=l.meshPerAttribute,this}toJSON(){const l=super.toJSON();return l.meshPerAttribute=this.meshPerAttribute,l.isInstancedBufferAttribute=!0,l}}).prototype.isInstancedBufferAttribute=!0,class extends Tr{constructor(l){super(l),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(l){return this.options=l,this}load(l,t,e,n){void 0===l&&(l=""),void 0!==this.path&&(l=this.path+l),l=this.manager.resolveURL(l);const i=this,a=Sr.get(l);if(void 0!==a)return i.manager.itemStart(l),setTimeout((function(){t&&t(a),i.manager.itemEnd(l)}),0),a;const r={};r.credentials="anonymous"===this.crossOrigin?"same-origin":"include",r.headers=this.requestHeader,fetch(l,r).then((function(l){return l.blob()})).then((function(l){return createImageBitmap(l,Object.assign(i.options,{colorSpaceConversion:"none"}))})).then((function(e){Sr.add(l,e),t&&t(e),i.manager.itemEnd(l)})).catch((function(t){n&&n(t),i.manager.itemError(l),i.manager.itemEnd(l)})),i.manager.itemStart(l)}}.prototype.isImageBitmapLoader=!0;class go{constructor(){this.type="ShapePath",this.color=new Et,this.subPaths=[],this.currentPath=null}moveTo(l,t){return this.currentPath=new lo,this.subPaths.push(this.currentPath),this.currentPath.moveTo(l,t),this}lineTo(l,t){return this.currentPath.lineTo(l,t),this}quadraticCurveTo(l,t,e,n){return this.currentPath.quadraticCurveTo(l,t,e,n),this}bezierCurveTo(l,t,e,n,i,a){return this.currentPath.bezierCurveTo(l,t,e,n,i,a),this}splineThru(l){return this.currentPath.splineThru(l),this}toShapes(l,t){function e(l){const t=[];for(let e=0,n=l.length;e<n;e++){const n=l[e],i=new to;i.curves=n.curves,t.push(i)}return t}function n(l,t){const e=t.length;let n=!1;for(let i=e-1,a=0;a<e;i=a++){let e=t[i],r=t[a],o=r.x-e.x,s=r.y-e.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(e=t[a],o=-o,r=t[i],s=-s),l.y<e.y||l.y>r.y)continue;if(l.y===e.y){if(l.x===e.x)return!0}else{const t=s*(l.x-e.x)-o*(l.y-e.y);if(0===t)return!0;if(t<0)continue;n=!n}}else{if(l.y!==e.y)continue;if(r.x<=l.x&&l.x<=e.x||e.x<=l.x&&l.x<=r.x)return!0}}return n}const i=er.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===t)return e(a);let r,o,s;const m=[];if(1===a.length)return o=a[0],s=new to,s.curves=o.curves,m.push(s),m;let h=!i(a[0].getPoints());h=l?!h:h;const c=[],q=[];let u,d,p=[],x=0;q[x]=void 0,p[x]=[];for(let t=0,e=a.length;t<e;t++)o=a[t],u=o.getPoints(),r=i(u),r=l?!r:r,r?(!h&&q[x]&&x++,q[x]={s:new to,p:u},q[x].s.curves=o.curves,h&&x++,p[x]=[]):p[x].push({h:o,p:u[0]});if(!q[0])return e(a);if(q.length>1){let l=!1;const t=[];for(let l=0,t=q.length;l<t;l++)c[l]=[];for(let e=0,i=q.length;e<i;e++){const i=p[e];for(let a=0;a<i.length;a++){const r=i[a];let o=!0;for(let i=0;i<q.length;i++)n(r.p,q[i].p)&&(e!==i&&t.push({froms:e,tos:i,hole:a}),o?(o=!1,c[i].push(r)):l=!0);o&&c[e].push(r)}}t.length>0&&(l||(p=c))}for(let l=0,t=q.length;l<t;l++){s=q[l].s,m.push(s),d=p[l];for(let l=0,t=d.length;l<t;l++)s.holes.push(d[l].h)}return m}}class vo{constructor(l){this.type="Font",this.data=l}generateShapes(l,t=100){const e=[],n=function(l,t,e){const n=Array.from(l),i=t/e.resolution,a=(e.boundingBox.yMax-e.boundingBox.yMin+e.underlineThickness)*i,r=[];let o=0,s=0;for(let l=0;l<n.length;l++){const t=n[l];if("\n"===t)o=0,s-=a;else{const l=yo(t,i,o,s,e);o+=l.offsetX,r.push(l.path)}}return r}(l,t,this.data);for(let l=0,t=n.length;l<t;l++)Array.prototype.push.apply(e,n[l].toShapes());return e}}function yo(l,t,e,n,i){const a=i.glyphs[l]||i.glyphs["?"];if(!a)return void console.error('THREE.Font: character "'+l+'" does not exists in font family '+i.familyName+".");const r=new go;let o,s,m,h,c,q,u,d;if(a.o){const l=a._cachedOutline||(a._cachedOutline=a.o.split(" "));for(let i=0,a=l.length;i<a;)switch(l[i++]){case"m":o=l[i++]*t+e,s=l[i++]*t+n,r.moveTo(o,s);break;case"l":o=l[i++]*t+e,s=l[i++]*t+n,r.lineTo(o,s);break;case"q":m=l[i++]*t+e,h=l[i++]*t+n,c=l[i++]*t+e,q=l[i++]*t+n,r.quadraticCurveTo(c,q,m,h);break;case"b":m=l[i++]*t+e,h=l[i++]*t+n,c=l[i++]*t+e,q=l[i++]*t+n,u=l[i++]*t+e,d=l[i++]*t+n,r.bezierCurveTo(c,q,u,d,m,h)}}return{offsetX:a.ha*t,path:r}}let bo;vo.prototype.isFont=!0;class wo extends Tr{constructor(l){super(l)}load(l,t,e,n){const i=this,a=new Lr(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(l,(function(e){try{const l=e.slice(0);(void 0===bo&&(bo=new(window.AudioContext||window.webkitAudioContext)),bo).decodeAudioData(l,(function(l){t(l)}))}catch(t){n?n(t):console.error(t),i.manager.itemError(l)}}),e,n)}}(class extends _o{constructor(l,t,e=1){super(void 0,e);const n=(new Et).set(l),i=(new Et).set(t),a=new tl(n.r,n.g,n.b),r=new tl(i.r,i.g,i.b),o=Math.sqrt(Math.PI),s=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(r).multiplyScalar(o),this.sh.coefficients[1].copy(a).sub(r).multiplyScalar(s)}}).prototype.isHemisphereLightProbe=!0,class extends _o{constructor(l,t=1){super(void 0,t);const e=(new Et).set(l);this.sh.coefficients[0].set(e.r,e.g,e.b).multiplyScalar(2*Math.sqrt(Math.PI))}}.prototype.isAmbientLightProbe=!0;class Mo{constructor(l,t,e){let n,i,a;switch(this.binding=l,this.valueSize=e,t){case"quaternion":n=this._slerp,i=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*e),this._workIndex=5;break;case"string":case"bool":n=this._select,i=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(5*e);break;default:n=this._lerp,i=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*e)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=i,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(l,t){const e=this.buffer,n=this.valueSize,i=l*n+n;let a=this.cumulativeWeight;if(0===a){for(let l=0;l!==n;++l)e[i+l]=e[l];a=t}else{a+=t;const l=t/a;this._mixBufferRegion(e,i,0,l,n)}this.cumulativeWeight=a}accumulateAdditive(l){const t=this.buffer,e=this.valueSize,n=e*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(t,n,0,l,e),this.cumulativeWeightAdditive+=l}apply(l){const t=this.valueSize,e=this.buffer,n=l*t+t,i=this.cumulativeWeight,a=this.cumulativeWeightAdditive,r=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,i<1){const l=t*this._origIndex;this._mixBufferRegion(e,n,l,1-i,t)}a>0&&this._mixBufferRegionAdditive(e,n,this._addIndex*t,1,t);for(let l=t,i=t+t;l!==i;++l)if(e[l]!==e[l+t]){r.setValue(e,n);break}}saveOriginalState(){const l=this.binding,t=this.buffer,e=this.valueSize,n=e*this._origIndex;l.getValue(t,n);for(let l=e,i=n;l!==i;++l)t[l]=t[n+l%e];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const l=3*this.valueSize;this.binding.setValue(this.buffer,l)}_setAdditiveIdentityNumeric(){const l=this._addIndex*this.valueSize,t=l+this.valueSize;for(let e=l;e<t;e++)this.buffer[e]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const l=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let e=0;e<this.valueSize;e++)this.buffer[t+e]=this.buffer[l+e]}_select(l,t,e,n,i){if(n>=.5)for(let n=0;n!==i;++n)l[t+n]=l[e+n]}_slerp(l,t,e,n){ll.slerpFlat(l,t,l,t,l,e,n)}_slerpAdditive(l,t,e,n,i){const a=this._workIndex*i;ll.multiplyQuaternionsFlat(l,a,l,t,l,e),ll.slerpFlat(l,t,l,t,l,a,n)}_lerp(l,t,e,n,i){const a=1-n;for(let r=0;r!==i;++r){const i=t+r;l[i]=l[i]*a+l[e+r]*n}}_lerpAdditive(l,t,e,n,i){for(let a=0;a!==i;++a){const i=t+a;l[i]=l[i]+l[e+a]*n}}}const zo=new RegExp("[\\[\\]\\.:\\/]","g"),So="[^\\[\\]\\.:\\/]",Eo="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",To=/((?:WC+[\/:])*)/.source.replace("WC",So),Ao=/(WCOD+)?/.source.replace("WCOD",Eo),Lo=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",So),Co=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",So),Ro=new RegExp("^"+To+Ao+Lo+Co+"$"),Po=["material","materials","bones"];class Io{constructor(l,t,e){this.path=t,this.parsedPath=e||Io.parseTrackName(t),this.node=Io.findNode(l,this.parsedPath.nodeName)||l,this.rootNode=l,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(l,t,e){return l&&l.isAnimationObjectGroup?new Io.Composite(l,t,e):new Io(l,t,e)}static sanitizeNodeName(l){return l.replace(/\s/g,"_").replace(zo,"")}static parseTrackName(l){const t=Ro.exec(l);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+l);const e={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=e.nodeName&&e.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const l=e.nodeName.substring(n+1);-1!==Po.indexOf(l)&&(e.nodeName=e.nodeName.substring(0,n),e.objectName=l)}if(null===e.propertyName||0===e.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+l);return e}static findNode(l,t){if(!t||""===t||"."===t||-1===t||t===l.name||t===l.uuid)return l;if(l.skeleton){const e=l.skeleton.getBoneByName(t);if(void 0!==e)return e}if(l.children){const e=function(l){for(let n=0;n<l.length;n++){const i=l[n];if(i.name===t||i.uuid===t)return i;const a=e(i.children);if(a)return a}return null},n=e(l.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(l,t){l[t]=this.node[this.propertyName]}_getValue_array(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)l[t++]=e[n]}_getValue_arrayElement(l,t){l[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(l,t){this.resolvedProperty.toArray(l,t)}_setValue_direct(l,t){this.targetObject[this.propertyName]=l[t]}_setValue_direct_setNeedsUpdate(l,t){this.targetObject[this.propertyName]=l[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(l,t){this.targetObject[this.propertyName]=l[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++]}_setValue_array_setNeedsUpdate(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(l,t){this.resolvedProperty[this.propertyIndex]=l[t]}_setValue_arrayElement_setNeedsUpdate(l,t){this.resolvedProperty[this.propertyIndex]=l[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(l,t){this.resolvedProperty[this.propertyIndex]=l[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(l,t){this.resolvedProperty.fromArray(l,t)}_setValue_fromArray_setNeedsUpdate(l,t){this.resolvedProperty.fromArray(l,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(l,t){this.resolvedProperty.fromArray(l,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(l,t){this.bind(),this.getValue(l,t)}_setValue_unbound(l,t){this.bind(),this.setValue(l,t)}bind(){let l=this.node;const t=this.parsedPath,e=t.objectName,n=t.propertyName;let i=t.propertyIndex;if(l||(l=Io.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=l),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!l)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(e){let n=t.objectIndex;switch(e){case"materials":if(!l.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!l.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);l=l.material.materials;break;case"bones":if(!l.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);l=l.skeleton.bones;for(let t=0;t<l.length;t++)if(l[t].name===n){n=t;break}break;default:if(void 0===l[e])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);l=l[e]}if(void 0!==n){if(void 0===l[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,l);l=l[n]}}const a=l[n];if(void 0===a){const e=t.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+e+"."+n+" but it wasn't found.",l)}let r=this.Versioning.None;this.targetObject=l,void 0!==l.needsUpdate?r=this.Versioning.NeedsUpdate:void 0!==l.matrixWorldNeedsUpdate&&(r=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!l.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!l.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!l.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==l.morphTargetDictionary[i]&&(i=l.morphTargetDictionary[i])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=i}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=n;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][r]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Io.Composite=class{constructor(l,t,e){const n=e||Io.parseTrackName(t);this._targetGroup=l,this._bindings=l.subscribe_(t,n)}getValue(l,t){this.bind();const e=this._targetGroup.nCachedObjects_,n=this._bindings[e];void 0!==n&&n.getValue(l,t)}setValue(l,t){const e=this._bindings;for(let n=this._targetGroup.nCachedObjects_,i=e.length;n!==i;++n)e[n].setValue(l,t)}bind(){const l=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=l.length;t!==e;++t)l[t].bind()}unbind(){const l=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=l.length;t!==e;++t)l[t].unbind()}},Io.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Io.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Io.prototype.GetterByBindingType=[Io.prototype._getValue_direct,Io.prototype._getValue_array,Io.prototype._getValue_arrayElement,Io.prototype._getValue_toArray],Io.prototype.SetterByBindingTypeAndVersioning=[[Io.prototype._setValue_direct,Io.prototype._setValue_direct_setNeedsUpdate,Io.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Io.prototype._setValue_array,Io.prototype._setValue_array_setNeedsUpdate,Io.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Io.prototype._setValue_arrayElement,Io.prototype._setValue_arrayElement_setNeedsUpdate,Io.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Io.prototype._setValue_fromArray,Io.prototype._setValue_fromArray_setNeedsUpdate,Io.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Do{constructor(l,t,e=null,n=t.blendMode){this._mixer=l,this._clip=t,this._localRoot=e,this.blendMode=n;const i=t.tracks,a=i.length,r=new Array(a),o={endingStart:z,endingEnd:z};for(let l=0;l!==a;++l){const t=i[l].createInterpolant(null);r[l]=t,t.settings=o}this._interpolantSettings=o,this._interpolants=r,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(l){return this._startTime=l,this}setLoop(l,t){return this.loop=l,this.repetitions=t,this}setEffectiveWeight(l){return this.weight=l,this._effectiveWeight=this.enabled?l:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(l){return this._scheduleFading(l,0,1)}fadeOut(l){return this._scheduleFading(l,1,0)}crossFadeFrom(l,t,e){if(l.fadeOut(t),this.fadeIn(t),e){const e=this._clip.duration,n=l._clip.duration,i=n/e,a=e/n;l.warp(1,i,t),this.warp(a,1,t)}return this}crossFadeTo(l,t,e){return l.crossFadeFrom(this,t,e)}stopFading(){const l=this._weightInterpolant;return null!==l&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(l)),this}setEffectiveTimeScale(l){return this.timeScale=l,this._effectiveTimeScale=this.paused?0:l,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(l){return this.timeScale=this._clip.duration/l,this.stopWarping()}syncWith(l){return this.time=l.time,this.timeScale=l.timeScale,this.stopWarping()}halt(l){return this.warp(this._effectiveTimeScale,0,l)}warp(l,t,e){const n=this._mixer,i=n.time,a=this.timeScale;let r=this._timeScaleInterpolant;null===r&&(r=n._lendControlInterpolant(),this._timeScaleInterpolant=r);const o=r.parameterPositions,s=r.sampleValues;return o[0]=i,o[1]=i+e,s[0]=l/a,s[1]=t/a,this}stopWarping(){const l=this._timeScaleInterpolant;return null!==l&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(l)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(l,t,e,n){if(!this.enabled)return void this._updateWeight(l);const i=this._startTime;if(null!==i){const n=(l-i)*e;if(n<0||0===e)return;this._startTime=null,t=e*n}t*=this._updateTimeScale(l);const a=this._updateTime(t),r=this._updateWeight(l);if(r>0){const l=this._interpolants,t=this._propertyBindings;switch(this.blendMode){case 2501:for(let e=0,n=l.length;e!==n;++e)l[e].evaluate(a),t[e].accumulateAdditive(r);break;case 2500:default:for(let e=0,i=l.length;e!==i;++e)l[e].evaluate(a),t[e].accumulate(n,r)}}}_updateWeight(l){let t=0;if(this.enabled){t=this.weight;const e=this._weightInterpolant;if(null!==e){const n=e.evaluate(l)[0];t*=n,l>e.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(l){let t=0;if(!this.paused){t=this.timeScale;const e=this._timeScaleInterpolant;null!==e&&(t*=e.evaluate(l)[0],l>e.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t))}return this._effectiveTimeScale=t,t}_updateTime(l){const t=this._clip.duration,e=this.loop;let n=this.time+l,i=this._loopCount;const a=2202===e;if(0===l)return-1===i?n:a&&1==(1&i)?t-n:n;if(2200===e){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));l:{if(n>=t)n=t;else{if(!(n<0)){this.time=n;break l}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:l<0?-1:1})}}else{if(-1===i&&(l>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),n>=t||n<0){const e=Math.floor(n/t);n-=t*e,i+=Math.abs(e);const r=this.repetitions-i;if(r<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=l>0?t:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:l>0?1:-1});else{if(1===r){const t=l<0;this._setEndings(t,!t,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:e})}}else this.time=n;if(a&&1==(1&i))return t-n}return n}_setEndings(l,t,e){const n=this._interpolantSettings;e?(n.endingStart=S,n.endingEnd=S):(n.endingStart=l?this.zeroSlopeAtStart?S:z:E,n.endingEnd=t?this.zeroSlopeAtEnd?S:z:E)}_scheduleFading(l,t,e){const n=this._mixer,i=n.time;let a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);const r=a.parameterPositions,o=a.sampleValues;return r[0]=i,o[0]=t,r[1]=i+l,o[1]=e,this}}(class extends P{constructor(l){super(),this._root=l,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(l,t){const e=l._localRoot||this._root,n=l._clip.tracks,i=n.length,a=l._propertyBindings,r=l._interpolants,o=e.uuid,s=this._bindingsByRootAndName;let m=s[o];void 0===m&&(m={},s[o]=m);for(let l=0;l!==i;++l){const i=n[l],s=i.name;let h=m[s];if(void 0!==h)a[l]=h;else{if(h=a[l],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,s));continue}const n=t&&t._propertyBindings[l].binding.parsedPath;h=new Mo(Io.create(e,s,n),i.ValueTypeName,i.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,s),a[l]=h}r[l].resultBuffer=h.buffer}}_activateAction(l){if(!this._isActiveAction(l)){if(null===l._cacheIndex){const t=(l._localRoot||this._root).uuid,e=l._clip.uuid,n=this._actionsByClip[e];this._bindAction(l,n&&n.knownActions[0]),this._addInactiveAction(l,e,t)}const t=l._propertyBindings;for(let l=0,e=t.length;l!==e;++l){const e=t[l];0==e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(l)}}_deactivateAction(l){if(this._isActiveAction(l)){const t=l._propertyBindings;for(let l=0,e=t.length;l!==e;++l){const e=t[l];0==--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(l)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const l=this;this.stats={actions:{get total(){return l._actions.length},get inUse(){return l._nActiveActions}},bindings:{get total(){return l._bindings.length},get inUse(){return l._nActiveBindings}},controlInterpolants:{get total(){return l._controlInterpolants.length},get inUse(){return l._nActiveControlInterpolants}}}}_isActiveAction(l){const t=l._cacheIndex;return null!==t&&t<this._nActiveActions}_addInactiveAction(l,t,e){const n=this._actions,i=this._actionsByClip;let a=i[t];if(void 0===a)a={knownActions:[l],actionByRoot:{}},l._byClipCacheIndex=0,i[t]=a;else{const t=a.knownActions;l._byClipCacheIndex=t.length,t.push(l)}l._cacheIndex=n.length,n.push(l),a.actionByRoot[e]=l}_removeInactiveAction(l){const t=this._actions,e=t[t.length-1],n=l._cacheIndex;e._cacheIndex=n,t[n]=e,t.pop(),l._cacheIndex=null;const i=l._clip.uuid,a=this._actionsByClip,r=a[i],o=r.knownActions,s=o[o.length-1],m=l._byClipCacheIndex;s._byClipCacheIndex=m,o[m]=s,o.pop(),l._byClipCacheIndex=null,delete r.actionByRoot[(l._localRoot||this._root).uuid],0===o.length&&delete a[i],this._removeInactiveBindingsForAction(l)}_removeInactiveBindingsForAction(l){const t=l._propertyBindings;for(let l=0,e=t.length;l!==e;++l){const e=t[l];0==--e.referenceCount&&this._removeInactiveBinding(e)}}_lendAction(l){const t=this._actions,e=l._cacheIndex,n=this._nActiveActions++,i=t[n];l._cacheIndex=n,t[n]=l,i._cacheIndex=e,t[e]=i}_takeBackAction(l){const t=this._actions,e=l._cacheIndex,n=--this._nActiveActions,i=t[n];l._cacheIndex=n,t[n]=l,i._cacheIndex=e,t[e]=i}_addInactiveBinding(l,t,e){const n=this._bindingsByRootAndName,i=this._bindings;let a=n[t];void 0===a&&(a={},n[t]=a),a[e]=l,l._cacheIndex=i.length,i.push(l)}_removeInactiveBinding(l){const t=this._bindings,e=l.binding,n=e.rootNode.uuid,i=e.path,a=this._bindingsByRootAndName,r=a[n],o=t[t.length-1],s=l._cacheIndex;o._cacheIndex=s,t[s]=o,t.pop(),delete r[i],0===Object.keys(r).length&&delete a[n]}_lendBinding(l){const t=this._bindings,e=l._cacheIndex,n=this._nActiveBindings++,i=t[n];l._cacheIndex=n,t[n]=l,i._cacheIndex=e,t[e]=i}_takeBackBinding(l){const t=this._bindings,e=l._cacheIndex,n=--this._nActiveBindings,i=t[n];l._cacheIndex=n,t[n]=l,i._cacheIndex=e,t[e]=i}_lendControlInterpolant(){const l=this._controlInterpolants,t=this._nActiveControlInterpolants++;let e=l[t];return void 0===e&&(e=new dr(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),e.__cacheIndex=t,l[t]=e),e}_takeBackControlInterpolant(l){const t=this._controlInterpolants,e=l.__cacheIndex,n=--this._nActiveControlInterpolants,i=t[n];l.__cacheIndex=n,t[n]=l,i.__cacheIndex=e,t[e]=i}clipAction(l,t,e){const n=t||this._root,i=n.uuid;let a="string"==typeof l?Mr.findByName(n,l):l;const r=null!==a?a.uuid:l,o=this._actionsByClip[r];let s=null;if(void 0===e&&(e=null!==a?a.blendMode:2500),void 0!==o){const l=o.actionByRoot[i];if(void 0!==l&&l.blendMode===e)return l;s=o.knownActions[0],null===a&&(a=s._clip)}if(null===a)return null;const m=new Do(this,a,t,e);return this._bindAction(m,s),this._addInactiveAction(m,r,i),m}existingAction(l,t){const e=t||this._root,n=e.uuid,i="string"==typeof l?Mr.findByName(e,l):l,a=i?i.uuid:l,r=this._actionsByClip[a];return void 0!==r&&r.actionByRoot[n]||null}stopAllAction(){const l=this._actions;for(let t=this._nActiveActions-1;t>=0;--t)l[t].stop();return this}update(l){l*=this.timeScale;const t=this._actions,e=this._nActiveActions,n=this.time+=l,i=Math.sign(l),a=this._accuIndex^=1;for(let r=0;r!==e;++r)t[r]._update(n,l,i,a);const r=this._bindings,o=this._nActiveBindings;for(let l=0;l!==o;++l)r[l].apply(a);return this}setTime(l){this.time=0;for(let l=0;l<this._actions.length;l++)this._actions[l].time=0;return this.update(l)}getRoot(){return this._root}uncacheClip(l){const t=this._actions,e=l.uuid,n=this._actionsByClip,i=n[e];if(void 0!==i){const l=i.knownActions;for(let e=0,n=l.length;e!==n;++e){const n=l[e];this._deactivateAction(n);const i=n._cacheIndex,a=t[t.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,a._cacheIndex=i,t[i]=a,t.pop(),this._removeInactiveBindingsForAction(n)}delete n[e]}}uncacheRoot(l){const t=l.uuid,e=this._actionsByClip;for(const l in e){const n=e[l].actionByRoot[t];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[t];if(void 0!==n)for(const l in n){const t=n[l];t.restoreOriginalState(),this._removeInactiveBinding(t)}}uncacheAction(l,t){const e=this.existingAction(l,t);null!==e&&(this._deactivateAction(e),this._removeInactiveAction(e))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class No{constructor(l){"string"==typeof l&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),l=arguments[1]),this.value=l}clone(){return new No(void 0===this.value.clone?this.value:this.value.clone())}}(class extends Ui{constructor(l,t,e=1){super(l,t),this.meshPerAttribute=e||1}copy(l){return super.copy(l),this.meshPerAttribute=l.meshPerAttribute,this}clone(l){const t=super.clone(l);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(l){const t=super.toJSON(l);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}).prototype.isInstancedInterleavedBuffer=!0;class Oo{constructor(l,t,e=0,n=1/0){this.ray=new Cl(l,t),this.near=e,this.far=n,this.camera=null,this.layers=new Gl,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(l,t){this.ray.set(l,t)}setFromCamera(l,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(l.x,l.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(l.x,l.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(l,t=!1,e=[]){return Fo(l,this,e,t),e.sort(Bo),e}intersectObjects(l,t=!1,e=[]){for(let n=0,i=l.length;n<i;n++)Fo(l[n],this,e,t);return e.sort(Bo),e}}function Bo(l,t){return l.distance-t.distance}function Fo(l,t,e,n){if(l.layers.test(t.layers)&&l.raycast(t,e),!0===n){const n=l.children;for(let l=0,i=n.length;l<i;l++)Fo(n[l],t,e,!0)}}const ko=new W;class Ho{constructor(l=new W(1/0,1/0),t=new W(-1/0,-1/0)){this.min=l,this.max=t}set(l,t){return this.min.copy(l),this.max.copy(t),this}setFromPoints(l){this.makeEmpty();for(let t=0,e=l.length;t<e;t++)this.expandByPoint(l[t]);return this}setFromCenterAndSize(l,t){const e=ko.copy(t).multiplyScalar(.5);return this.min.copy(l).sub(e),this.max.copy(l).add(e),this}clone(){return(new this.constructor).copy(this)}copy(l){return this.min.copy(l.min),this.max.copy(l.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(l){return void 0===l&&(console.warn("THREE.Box2: .getCenter() target is now required"),l=new W),this.isEmpty()?l.set(0,0):l.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(l){return void 0===l&&(console.warn("THREE.Box2: .getSize() target is now required"),l=new W),this.isEmpty()?l.set(0,0):l.subVectors(this.max,this.min)}expandByPoint(l){return this.min.min(l),this.max.max(l),this}expandByVector(l){return this.min.sub(l),this.max.add(l),this}expandByScalar(l){return this.min.addScalar(-l),this.max.addScalar(l),this}containsPoint(l){return!(l.x<this.min.x||l.x>this.max.x||l.y<this.min.y||l.y>this.max.y)}containsBox(l){return this.min.x<=l.min.x&&l.max.x<=this.max.x&&this.min.y<=l.min.y&&l.max.y<=this.max.y}getParameter(l,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new W),t.set((l.x-this.min.x)/(this.max.x-this.min.x),(l.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(l){return!(l.max.x<this.min.x||l.min.x>this.max.x||l.max.y<this.min.y||l.min.y>this.max.y)}clampPoint(l,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new W),t.copy(l).clamp(this.min,this.max)}distanceToPoint(l){return ko.copy(l).clamp(this.min,this.max).sub(l).length()}intersect(l){return this.min.max(l.min),this.max.min(l.max),this}union(l){return this.min.min(l.min),this.max.max(l.max),this}translate(l){return this.min.add(l),this.max.add(l),this}equals(l){return l.min.equals(this.min)&&l.max.equals(this.max)}}Ho.prototype.isBox2=!0,class extends nt{constructor(l){super(),this.material=l,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}.prototype.isImmediateRenderObject=!0;const Uo=new tl,Go=new Rl,Vo=new Rl;function Wo(l){const t=[];l&&l.isBone&&t.push(l);for(let e=0;e<l.children.length;e++)t.push.apply(t,Wo(l.children[e]));return t}const jo=new Float32Array(1);new Int32Array(jo.buffer),Math.pow(2,8);const Xo=[.125,.215,.35,.446,.526,.582],Yo=5+Xo.length,Jo=new Tt({side:1,depthWrite:!1,depthTest:!1}),{_lodPlanes:Zo,_sizeLods:Qo,_sigmas:Ko}=(new oe(new me,Jo),$o());function $o(){const l=[],t=[],e=[];let n=8;for(let i=0;i<Yo;i++){const a=Math.pow(2,n);t.push(a);let r=1/a;i>4?r=Xo[i-8+4-1]:0==i&&(r=0),e.push(r);const o=1/(a-1),s=-o/2,m=1+o/2,h=[s,s,m,s,m,m,s,s,m,m,s,m],c=6,q=6,u=3,d=2,p=1,x=new Float32Array(u*q*c),f=new Float32Array(d*q*c),_=new Float32Array(p*q*c);for(let l=0;l<c;l++){const t=l%3*2/3-1,e=l>2?0:-1,n=[t,e,0,t+2/3,e,0,t+2/3,e+1,0,t,e,0,t+2/3,e+1,0,t,e+1,0];x.set(n,u*q*l),f.set(h,d*q*l);const i=[l,l,l,l,l,l];_.set(i,p*q*l)}const g=new Gt;g.setAttribute("position",new Ct(x,u)),g.setAttribute("uv",new Ct(f,d)),g.setAttribute("faceIndex",new Ct(_,p)),l.push(g),n>4&&n--}return{_lodPlanes:l,_sizeLods:t,_sigmas:e}}Math.sqrt(5),Ir.create=function(l,t){return console.log("THREE.Curve.create() has been deprecated"),l.prototype=Object.create(Ir.prototype),l.prototype.constructor=l,l.prototype.getPoint=t,l},lo.prototype.fromPoints=function(l){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(l)},class extends za{constructor(l=10,t=10,e=4473924,n=8947848){e=new Et(e),n=new Et(n);const i=t/2,a=l/t,r=l/2,o=[],s=[];for(let l=0,m=0,h=-r;l<=t;l++,h+=a){o.push(-r,0,h,r,0,h),o.push(h,0,-r,h,0,r);const t=l===i?e:n;t.toArray(s,m),m+=3,t.toArray(s,m),m+=3,t.toArray(s,m),m+=3,t.toArray(s,m),m+=3}const m=new Gt;m.setAttribute("position",new It(o,3)),m.setAttribute("color",new It(s,3)),super(m,new xa({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},class extends za{constructor(l){const t=Wo(l),e=new Gt,n=[],i=[],a=new Et(0,0,1),r=new Et(0,1,0);for(let l=0;l<t.length;l++){const e=t[l];e.parent&&e.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),i.push(a.r,a.g,a.b),i.push(r.r,r.g,r.b))}e.setAttribute("position",new It(n,3)),e.setAttribute("color",new It(i,3)),super(e,new xa({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=l,this.bones=t,this.matrix=l.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(l){const t=this.bones,e=this.geometry,n=e.getAttribute("position");Vo.copy(this.root.matrixWorld).invert();for(let l=0,e=0;l<t.length;l++){const i=t[l];i.parent&&i.parent.isBone&&(Go.multiplyMatrices(Vo,i.matrixWorld),Uo.setFromMatrixPosition(Go),n.setXYZ(e,Uo.x,Uo.y,Uo.z),Go.multiplyMatrices(Vo,i.parent.matrixWorld),Uo.setFromMatrixPosition(Go),n.setXYZ(e+1,Uo.x,Uo.y,Uo.z),e+=2)}e.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(l)}}.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Tr.prototype.extractUrlBase=function(l){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),class{static decodeText(l){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(l);let t="";for(let e=0,n=l.length;e<n;e++)t+=String.fromCharCode(l[e]);try{return decodeURIComponent(escape(t))}catch(l){return t}}static extractUrlBase(l){const t=l.lastIndexOf("/");return-1===t?"./":l.substr(0,t+1)}}.extractUrlBase(l)},Tr.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Ho.prototype.center=function(l){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(l)},Ho.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Ho.prototype.isIntersectionBox=function(l){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(l)},Ho.prototype.size=function(l){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(l)},il.prototype.center=function(l){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(l)},il.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},il.prototype.isIntersectionBox=function(l){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(l)},il.prototype.isIntersectionSphere=function(l){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(l)},il.prototype.size=function(l){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(l)},wl.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},be.prototype.setFromMatrix=function(l){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(l)},j.prototype.flattenToArrayOffset=function(l,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(l,t)},j.prototype.multiplyVector3=function(l){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),l.applyMatrix3(this)},j.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},j.prototype.applyToBufferAttribute=function(l){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),l.applyMatrix3(this)},j.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},j.prototype.getInverse=function(l){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(l).invert()},Rl.prototype.extractPosition=function(l){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(l)},Rl.prototype.flattenToArrayOffset=function(l,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(l,t)},Rl.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new tl).setFromMatrixColumn(this,3)},Rl.prototype.setRotationFromQuaternion=function(l){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(l)},Rl.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Rl.prototype.multiplyVector3=function(l){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),l.applyMatrix4(this)},Rl.prototype.multiplyVector4=function(l){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),l.applyMatrix4(this)},Rl.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Rl.prototype.rotateAxis=function(l){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),l.transformDirection(this)},Rl.prototype.crossVector=function(l){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),l.applyMatrix4(this)},Rl.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Rl.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Rl.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Rl.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Rl.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Rl.prototype.applyToBufferAttribute=function(l){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),l.applyMatrix4(this)},Rl.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Rl.prototype.makeFrustum=function(l,t,e,n,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(l,t,n,e,i,a)},Rl.prototype.getInverse=function(l){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(l).invert()},ot.prototype.isIntersectionLine=function(l){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(l)},ll.prototype.multiplyVector3=function(l){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),l.applyQuaternion(this)},ll.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Cl.prototype.isIntersectionBox=function(l){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(l)},Cl.prototype.isIntersectionPlane=function(l){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(l)},Cl.prototype.isIntersectionSphere=function(l){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(l)},_t.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},_t.prototype.barycoordFromPoint=function(l,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(l,t)},_t.prototype.midpoint=function(l){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(l)},_t.prototypenormal=function(l){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(l)},_t.prototype.plane=function(l){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(l)},_t.barycoordFromPoint=function(l,t,e,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),_t.getBarycoord(l,t,e,n,i)},_t.normal=function(l,t,e,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),_t.getNormal(l,t,e,n)},to.prototype.extractAllPoints=function(l){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(l)},to.prototype.extrude=function(l){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new ar(this,l)},to.prototype.makeGeometry=function(l){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new or(this,l)},W.prototype.fromAttribute=function(l,t,e){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(l,t,e)},W.prototype.distanceToManhattan=function(l){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(l)},W.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},tl.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},tl.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},tl.prototype.getPositionFromMatrix=function(l){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(l)},tl.prototype.getScaleFromMatrix=function(l){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(l)},tl.prototype.getColumnFromMatrix=function(l,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,l)},tl.prototype.applyProjection=function(l){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(l)},tl.prototype.fromAttribute=function(l,t,e){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(l,t,e)},tl.prototype.distanceToManhattan=function(l){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(l)},tl.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},K.prototype.fromAttribute=function(l,t,e){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(l,t,e)},K.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},nt.prototype.getChildByName=function(l){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(l)},nt.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},nt.prototype.translate=function(l,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,l)},nt.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},nt.prototype.applyMatrix=function(l){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(l)},Object.defineProperties(nt.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(l){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=l}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),oe.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(oe.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),ca.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},pe.prototype.setLens=function(l,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(l)},Object.defineProperties(eo.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(l){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=l}},shadowCameraLeft:{set:function(l){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=l}},shadowCameraRight:{set:function(l){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=l}},shadowCameraTop:{set:function(l){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=l}},shadowCameraBottom:{set:function(l){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=l}},shadowCameraNear:{set:function(l){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=l}},shadowCameraFar:{set:function(l){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=l}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(l){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=l}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(l){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=l}},shadowMapHeight:{set:function(l){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=l}}}),Object.defineProperties(Ct.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===C},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(C)}}}),Ct.prototype.setDynamic=function(l){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===l?C:L),this},Ct.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Ct.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Gt.prototype.addIndex=function(l){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(l)},Gt.prototype.addAttribute=function(l,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===l?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(l,t):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(l,new Ct(arguments[1],arguments[2])))},Gt.prototype.addDrawCall=function(l,t,e){void 0!==e&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(l,t)},Gt.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Gt.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Gt.prototype.removeAttribute=function(l){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(l)},Gt.prototype.applyMatrix=function(l){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(l)},Object.defineProperties(Gt.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Ui.prototype.setDynamic=function(l){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===l?C:L),this},Ui.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},ar.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},ar.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},ar.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},Hi.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},No.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(vt.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Et}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(l){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===l}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(l){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=l}}}),Object.defineProperties(ue.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(l){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=l}}}),Bi.prototype.clearTarget=function(l,t,e,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(l),this.clear(t,e,n)},Bi.prototype.animate=function(l){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(l)},Bi.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},Bi.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},Bi.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},Bi.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},Bi.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},Bi.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},Bi.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},Bi.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},Bi.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},Bi.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},Bi.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},Bi.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},Bi.prototype.enableScissorTest=function(l){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(l)},Bi.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},Bi.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},Bi.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},Bi.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},Bi.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},Bi.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},Bi.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},Bi.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},Bi.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},Bi.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(Bi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(l){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=l}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(l){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=l}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(l){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===l?3001:T}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(Ti.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties($.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(l){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=l}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(l){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=l}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(l){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=l}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(l){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=l}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(l){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=l}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(l){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=l}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(l){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=l}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(l){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=l}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(l){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=l}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(l){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=l}}}),class extends nt{constructor(l){super(),this.type="Audio",this.listener=l,this.context=l.context,this.gain=this.context.createGain(),this.gain.connect(l.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(l){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=l,this.connect(),this}setMediaElementSource(l){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(l),this.connect(),this}setMediaStreamSource(l){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(l),this.connect(),this}setBuffer(l){return this.buffer=l,this.sourceType="buffer",this.autoplay&&this.play(),this}play(l=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+l;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let l=1,t=this.filters.length;l<t;l++)this.filters[l-1].connect(this.filters[l]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let l=1,t=this.filters.length;l<t;l++)this.filters[l-1].disconnect(this.filters[l]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(l){return l||(l=[]),!0===this._connected?(this.disconnect(),this.filters=l.slice(),this.connect()):this.filters=l.slice(),this}setDetune(l){if(this.detune=l,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(l){return this.setFilters(l?[l]:[])}setPlaybackRate(l){if(!1!==this.hasPlaybackControl)return this.playbackRate=l,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(l){if(!1!==this.hasPlaybackControl)return this.loop=l,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(l){return this.loopStart=l,this}setLoopEnd(l){return this.loopEnd=l,this}getVolume(){return this.gain.gain.value}setVolume(l){return this.gain.gain.setTargetAtTime(l,this.context.currentTime,.01),this}}.prototype.load=function(l){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this;return(new wo).load(l,(function(l){t.setBuffer(l)})),this},fe.prototype.updateCubeMap=function(l,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(l,t)},fe.prototype.clear=function(l,t,e,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(l,t,e,n)},Y.crossOrigin=void 0,Y.loadTexture=function(l,t,e,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new Pr;i.setCrossOrigin(this.crossOrigin);const a=i.load(l,e,void 0,n);return t&&(a.mapping=t),a},Y.loadTextureCube=function(l,t,e,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new Rr;i.setCrossOrigin(this.crossOrigin);const a=i.load(l,e,void 0,n);return t&&(a.mapping=t),a},Y.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Y.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"129"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="129");var ls=e(466),ts=e.n(ls);class es{constructor(){}perform(l){console.err("Not Implemented")}}class ns extends es{constructor(l){super(),this.reason=l}}const is="ArrowLeft",as="ArrowRight",rs="ArrowUp",os="ArrowDown",ss="gamepad12",ms="gamepad13",hs="gamepad14",cs="gamepad15",qs="axis0-left",us="axis0-right",ds="axis1-left",ps="axis1-right",xs=new class{constructor(){const l=this;l.defaultDelay=25,l.keysDown=[],l.keysDelayed=[],l.defaults=new Map,l.controls=new Map,l.defaults.set("left",[is,"a","Numpad 4",hs,qs]),l.defaults.set("right",[as,"d","Numpad 6",cs,us]),l.defaults.set("up",[rs,"w","Numpad 8",ss,ds]),l.defaults.set("down",[os,"s","Numpad 2",ms,ps]),l.defaults.set("editor-left",[is,hs,qs]),l.defaults.set("editor-right",[as,cs,us]),l.defaults.set("editor-up",[rs,ss,ds]),l.defaults.set("editor-down",[os,ms,ps]),l.defaults.set("nw",["Numpad 7"]),l.defaults.set("ne",["Numpad 9"]),l.defaults.set("sw",["Numpad 1"]),l.defaults.set("se",["Numpad 3"]),l.defaults.set("wait",["Numpad 5"]),l.defaults.set("action",[" ","Enter","gamepad0"]),l.defaults.set("save",["F8"]),l.defaults.set("load",["F9"]),l.defaults.set("debug",["F2"]),l.defaults.set("debug2",["F4"]),l.defaults.set("reset",["r","gamepad9"]),l.resetToDefault(),addEventListener("keydown",(function(t){let e=l.getKey(t.key,t.code);l.keysDown[e]=!0}),!1),addEventListener("keyup",(function(t){let e=l.getKey(t.key,t.code);delete l.keysDown[e],delete l.keysDelayed[e]}),!1)}getKey(l,t){return t.startsWith("Arrow")||(t.endsWith("Left")?l="Left "+l:t.endsWith("Right")?l="Right "+l:t.startsWith("Numpad")&&(l="Numpad "+l)),l}resetToDefault(){const l=this;l.defaults.forEach((function(t,e){l.controls.set(e,t)}))}setCustomKeys(l,t){this.controls.set(l,t)}isPressed(l){const t=this;let e=!1;return t.controls.get(l).forEach((function(l){l in t.keysDown&&(e=!0)})),e}isDelayed(l){const t=this;let e=!1;return this.controls.get(l).forEach((function(l){l in t.keysDelayed&&(e=!0)})),e}deleteKey(l,t){const e=this;e.controls.get(l).forEach((function(l){delete e.keysDown[l],t&&(e.keysDelayed[l]=!0)})),t&&setTimeout((function(){e.controls.get(l).forEach((function(l){delete e.keysDelayed[l]}))}),t)}testPressed(l,t){t=t||this.defaultDelay;const e=this;let n=!1;return e.isPressed(l)&&!e.isDelayed(l)&&(e.deleteKey(l,t),n=!0),n}hasControllerSupport(){return"getGamepads"in navigator}checkForGamepads(){const l=this;if(this.hasControllerSupport()){const t=navigator.getGamepads().length;for(let e=0;e<t;e++){const t=navigator.getGamepads()[e];t&&(t.axes.forEach((function(t,e){t<=-.5?l.keysDown["axis"+e+"-left"]=!0:t>=.5?l.keysDown["axis"+e+"-right"]=!0:(delete l.keysDown["axis"+e+"-left"],delete l.keysDown["axis"+e+"-right"],delete l.keysDelayed["axis"+e+"-left"],delete l.keysDelayed["axis"+e+"-right"])})),t.buttons.forEach((function(t,e){t.pressed?l.keysDown["gamepad"+e]=!0:(delete l.keysDown["gamepad"+e],delete l.keysDelayed["gamepad"+e])})))}}}};window.addEventListener("gamepadconnected",(function(l){const t=navigator.getGamepads()[l.gamepad.index];console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.",t.index,t.id,t.buttons.length,t.axes.length),console.log(t.buttons)})),window.addEventListener("gamepaddisconnected",(function(l){}));class fs{constructor(){}static randomizeArray(l){let t,e,n=l.length;for(;0!==n;)e=Math.floor(Math.random()*n),n-=1,t=l[n],l[n]=l[e],l[e]=l[t];return l}static create2dArray(l){const t=[];for(let e=0;e<l;e++)t[e]=[];return t}}class _s{constructor(l={}){this.baseType=l.baseType||"component",this.type=l.type||this.baseType,this.parentEntity=l.parentEntity}save(){return null}}class gs{constructor(){}static extend(l){l=l||{};for(let t=1;t<arguments.length;t++)if(arguments[t])for(const e in arguments[t])arguments[t].hasOwnProperty(e)&&(l[e]=arguments[t][e]);return l}static deep(l){l=l||{};for(let t=1;t<arguments.length;t++){const e=arguments[t];if(e)for(const t in e)e.hasOwnProperty(t)&&("object"==typeof e[t]?e[t]instanceof Array?l[t]=e[t].slice(0):l[t]=gs.deep(l[t],e[t]):"boolean"==typeof l&&void 0===l[t]?l=e[t]:l[t]=e[t])}return l}}class vs extends _s{constructor(l={}){super(gs.extend(l,{baseType:"positionalobject"}));const t=l.components&&l.components.positionalobject;this.object=null,this.meshes=[],this.highlighted=!1,this.width=5,this.height=5,this.depth=5,this.scale=1,this.x=0,this.y=0,this.z=0,this.color=16777215,this.xRot=0,this.yRot=0,this.zRot=0,this.xOffset=0,this.yOffset=0,this.zOffset=0,t&&(this.x=l.components.positionalobject.x||0,this.y=l.components.positionalobject.y||0,this.z=l.components.positionalobject.z||0,this.color=l.components.positionalobject.color||16777215,this.scale=this.parseRand(l.components.positionalobject.scale,1),this.xRot=this.parseRand(l.components.positionalobject.xRot,0),this.yRot=this.parseRand(l.components.positionalobject.yRot,0),this.zRot=this.parseRand(l.components.positionalobject.zRot,0),this.xOffset=this.parseRand(l.components.positionalobject.xOffset,0),this.yOffset=this.parseRand(l.components.positionalobject.yOffset,0),this.zOffset=this.parseRand(l.components.positionalobject.zOffset,0),this.size=this.parseRand(l.components.positionalobject.size,1)),this.transparency=1}parseRand(l,t){let e;if("string"==typeof l)if(-1!==l.indexOf(",")){const t=l.split(",");e=parseFloat(V.randFloat(parseFloat(t[0].trim()),parseFloat(t[1].trim())).toFixed(2))}else e=parseFloat(l)||t;else e=l||t;return e}save(){return this.parentEntity&&this.parentEntity instanceof qm?{positionalobject:{color:this.color,scale:this.scale}}:{positionalobject:{x:this.x,y:this.y,z:this.z,xRot:this.xRot,yRot:this.yRot,zRot:this.zRot,xOffset:this.xOffset,yOffset:this.yOffset,zOffset:this.zOffset,color:this.color,scale:this.scale}}}createObject(){}teardown(){this.hasObject()&&(Fm.scene.remove(this.object),this.object=void 0)}resetColor(){for(const l of this.meshes)l.material.color.set(l.originalColor)}shiftColor(l){for(const t of this.meshes)t.material.transparent=!0,t.material.color.multiplyScalar(l)}setTransparency(l){this.transparency=l;for(const t of this.meshes)t.material.transparent=l<1,t.material.opacity=l}updateObjectPosition(){this.hasObject()&&this.object.position.set(this.x*this.width,this.y*this.height,this.z*this.depth-(this.depth-this.scale*this.depth)/2)}hasObject(){return null!=this.object}setVisible(l=!0){this.hasObject()||(this.createObject(),Fm.scene.add(this.object)),l&&!this.object.visible?this.object.visible=!0:!l&&this.object.visible&&(this.object.visible=!1)}isVisible(){return this.hasObject()&&this.object.visible}highlight(){this.highlighted||(this.hasObject()&&this.shiftColor(2.5),this.highlighted=!0)}removeHighlight(){if(this.highlighted){if(this.hasObject()){this.object.material.color.set(this.color);const l=this.parentEntity;if(l){const t=l.getComponent("fov");t&&t.explored&&!t.visible&&this.shiftColor(.5)}}this.highlighted=!1}}move(l,t=0,e=0){this.x+=l,this.y+=t,this.z+=e,this.updateObjectPosition()}}const ys=[];class bs extends vs{constructor(l={}){l.components&&l.components.solidobject&&(l.components.positionalobject=l.components.positionalobject||{},l.components.positionalobject=gs.extend(l.components.positionalobject,l.components.solidobject)),super(gs.extend(l,{type:"solidobject"}))}createObject(){this.meshes=[];const l=this.scale*this.depth;let t=!1;for(const e of ys)if(e.parameters.depth===l){this.geometry=e,t=!0;break}t||(this.geometry=new me(this.width,this.height,l),ys.push(this.geometry)),this.object=new oe(this.geometry,new hr({color:this.color})),this.object.originalColor=this.color,this.meshes.push(this.object),this.updateObjectPosition(),this.object.rotateX(Math.PI*this.xRot),this.object.rotateY(Math.PI*this.yRot),this.object.rotateZ(Math.PI*this.zRot),this.object.parentEntity=this.parentEntity}}const ws=JSON.parse('{"glyphs":{"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"\'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\\"Fonts\\") and associated documentation files (the \\"Font Software\\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \\r\\n\\r\\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\\r\\n\\r\\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \\"MgOpen\\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\\r\\n\\r\\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \\"MgOpen\\" name.\\r\\n\\r\\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \\r\\n\\r\\nTHE FONT SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}'),Ms=JSON.parse('{"glyphs":{"░":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 -194 l 1042 -21 l 1215 -21 l 1215 -194 l 1042 -194 m 1042 153 l 1042 326 l 1215 326 l 1215 153 l 1042 153 m 1042 500 l 1042 674 l 1215 674 l 1215 500 l 1042 500 m 1042 847 l 1042 1021 l 1215 1021 l 1215 847 l 1042 847 m 694 -21 l 694 153 l 868 153 l 868 -21 l 694 -21 m 694 326 l 694 500 l 868 500 l 868 326 l 694 326 m 694 674 l 694 847 l 868 847 l 868 674 l 694 674 m 694 1021 l 694 1194 l 868 1194 l 868 1021 l 694 1021 m 347 -194 l 347 -21 l 521 -21 l 521 -194 l 347 -194 m 347 153 l 347 326 l 521 326 l 521 153 l 347 153 m 347 500 l 347 674 l 521 674 l 521 500 l 347 500 m 347 847 l 347 1021 l 521 1021 l 521 847 l 347 847 m 0 -21 l 0 153 l 174 153 l 174 -21 l 0 -21 m 0 326 l 0 500 l 174 500 l 174 326 l 0 326 m 0 674 l 0 847 l 174 847 l 174 674 l 0 674 m 0 1021 l 0 1194 l 174 1194 l 174 1021 l 0 1021 z "},"⚫":{"ha":806,"x_min":69,"x_max":736,"o":"m 69 486 q 167 722 69 624 q 403 819 265 819 q 638 722 540 819 q 736 486 736 624 q 638 251 736 349 q 403 153 540 153 q 167 251 265 153 q 69 486 69 349 l 69 486 z "},"厂":{"ha":1389,"x_min":65,"x_max":1282,"o":"m 176 -37 q 146 -62 168 -57 q 108 -51 124 -67 q 88 44 65 -14 q 174 667 174 275 l 174 989 q 197 1044 174 1021 q 253 1067 221 1067 l 1233 1067 q 1267 1052 1253 1067 q 1282 1018 1282 1038 q 1267 984 1282 999 q 1233 969 1253 969 l 297 969 q 285 958 285 969 l 285 601 q 176 -37 285 217 z "},"巳":{"ha":1389,"x_min":215,"x_max":1272,"o":"m 411 -87 q 332 -82 358 -85 q 279 -69 306 -79 q 243 -50 253 -60 q 226 -13 233 -40 q 217 42 218 14 q 215 122 215 69 l 215 982 q 239 1037 215 1014 q 294 1060 263 1060 l 1094 1060 q 1150 1037 1126 1060 q 1174 982 1174 1014 l 1174 494 q 1158 456 1174 472 q 1119 440 1142 440 q 1081 456 1097 440 q 1065 494 1065 472 l 1065 517 q 1053 528 1065 528 l 339 528 q 326 515 326 528 l 326 129 q 340 29 326 44 q 431 10 353 14 q 676 3 567 3 q 938 10 782 3 q 1017 14 993 13 q 1070 25 1040 15 q 1109 46 1100 35 q 1131 88 1118 57 q 1149 152 1144 118 q 1161 250 1154 186 q 1181 285 1163 272 q 1221 296 1199 299 q 1258 276 1243 293 q 1269 235 1272 258 q 1253 109 1261 156 q 1229 24 1246 63 q 1197 -33 1213 -15 q 1142 -63 1181 -50 q 1066 -80 1103 -76 q 958 -87 1029 -83 q 671 -94 801 -94 q 411 -87 560 -94 m 326 953 l 326 635 q 339 622 326 622 l 1053 622 q 1065 635 1065 622 l 1065 953 q 1053 965 1065 965 l 339 965 q 326 953 326 965 z "},"▪":{"ha":1042,"x_min":267,"x_max":774,"o":"m 696 761 q 751 738 728 761 q 774 682 774 714 l 774 332 q 751 277 774 300 q 696 254 728 254 l 346 254 q 290 277 314 254 q 267 332 267 300 l 267 682 q 290 738 267 714 q 346 761 314 761 l 696 761 z "}},"familyName":"Rounded Mplus 1c","ascender":1493,"descender":-444,"underlinePosition":-174,"underlineThickness":69,"boundingBox":{"yMin":-476,"xMin":-151,"yMax":1493,"xMax":1943},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2016 The Rounded M+ Project Authors.","fontFamily":"Rounded Mplus 1c","fontSubfamily":"Regular","uniqueID":"1.059.20150529g;GoogleFonts;RoundedMplus1c-Regular","fullName":"Rounded Mplus 1c","version":"Version 1.059.20150529","postScriptName":"RoundedMplus1c-Regular","manufacturerURL":"http://jikasei.me/","licence":"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL","licenceURL":"http://scripts.sil.org/OFL"},"cssFontWeight":"normal","cssFontStyle":"normal"}'),zs=JSON.parse('{"glyphs":{"0":{"ha":833,"x_min":111,"x_max":722,"o":"m 417 -14 q 255 23 324 -14 q 149 127 186 60 q 111 285 111 194 l 111 729 q 149 888 111 821 q 255 991 186 954 q 417 1028 324 1028 q 579 991 511 1028 q 685 888 647 954 q 722 729 722 821 l 722 285 q 685 127 722 194 q 578 23 647 60 q 417 -14 510 -14 m 417 93 q 551 147 500 93 q 601 285 601 200 l 601 729 q 551 867 601 814 q 417 921 500 921 q 283 867 333 921 q 232 729 232 814 l 232 285 q 283 147 232 200 q 417 93 333 93 m 417 425 q 356 449 379 425 q 333 511 333 472 q 356 572 333 549 q 417 594 379 594 q 477 572 454 594 q 500 511 500 549 q 477 449 500 472 q 417 425 454 425 z "},"1":{"ha":833,"x_min":125,"x_max":750,"o":"m 125 0 l 125 114 l 400 114 l 400 910 l 125 704 l 125 843 l 354 1014 l 525 1014 l 525 114 l 750 114 l 750 0 l 125 0 z "},"2":{"ha":833,"x_min":100,"x_max":731,"o":"m 128 0 l 128 128 l 438 457 q 553 608 517 542 q 589 735 589 674 q 542 868 589 819 q 415 917 496 917 q 276 867 326 917 q 225 729 225 817 l 100 729 q 142 888 103 821 q 252 992 182 956 q 415 1028 322 1028 q 574 992 507 1028 q 678 892 642 957 q 714 736 714 826 q 668 565 714 650 q 518 372 622 481 l 268 114 l 731 114 l 731 0 l 128 0 z "},"3":{"ha":833,"x_min":97,"x_max":708,"o":"m 401 -14 q 241 23 310 -14 q 135 125 172 60 q 97 278 97 190 l 222 278 q 270 145 222 193 q 403 97 318 97 q 536 147 489 97 q 583 278 583 197 l 583 350 q 536 483 583 436 q 403 531 489 531 l 299 531 l 299 656 l 550 900 l 139 900 l 139 1014 l 676 1014 l 676 889 l 406 626 l 406 642 q 626 563 544 642 q 708 350 708 483 l 708 278 q 670 125 708 190 q 563 23 632 60 q 401 -14 493 -14 z "},"4":{"ha":833,"x_min":111,"x_max":694,"o":"m 569 0 l 569 222 l 111 222 l 111 418 l 513 1014 l 649 1014 l 236 392 l 236 336 l 569 336 l 569 583 l 694 583 l 694 0 l 569 0 z "},"5":{"ha":833,"x_min":118,"x_max":715,"o":"m 414 -14 q 211 50 290 -14 q 118 222 132 114 l 243 222 q 294 130 250 163 q 415 97 339 97 q 547 144 503 97 q 590 278 590 192 l 590 376 q 547 510 590 463 q 417 557 503 557 q 322 528 363 557 q 264 453 282 500 l 139 453 l 146 1014 l 679 1014 l 679 900 l 267 900 l 263 563 l 301 563 l 263 526 q 315 629 263 592 q 454 667 367 667 q 647 591 578 668 q 715 376 715 514 l 715 278 q 636 65 715 143 q 414 -14 557 -14 z "},"6":{"ha":833,"x_min":94,"x_max":739,"o":"m 418 -14 q 248 27 321 -14 q 135 142 175 68 q 94 313 94 215 q 116 463 94 389 q 181 604 138 536 l 435 1014 l 574 1014 l 286 553 l 292 549 q 364 608 318 588 q 467 629 410 629 q 611 590 550 629 q 706 481 672 551 q 739 313 739 410 q 699 142 739 215 q 587 27 658 68 q 418 -14 515 -14 m 417 97 q 560 156 506 97 q 614 313 614 215 q 560 469 614 410 q 417 528 506 528 q 274 469 328 528 q 219 313 219 410 q 274 156 219 215 q 417 97 328 97 z "},"7":{"ha":833,"x_min":111,"x_max":743,"o":"m 257 0 l 619 900 l 236 900 l 236 750 l 111 750 l 111 1014 l 743 1014 l 743 892 l 392 0 l 257 0 z "},"8":{"ha":833,"x_min":111,"x_max":722,"o":"m 417 -14 q 255 19 324 -14 q 149 113 186 51 q 111 256 111 174 q 160 411 111 346 q 317 528 210 476 l 451 593 q 546 669 513 622 q 579 774 579 717 q 535 879 579 840 q 417 918 492 918 q 298 878 342 918 q 254 772 254 839 q 287 669 254 717 q 376 594 319 622 l 511 531 q 672 413 622 479 q 722 256 722 347 q 640 59 722 132 q 417 -14 557 -14 m 417 97 q 551 141 501 97 q 600 258 600 185 q 568 367 600 318 q 476 444 536 415 l 343 510 q 182 626 232 564 q 132 776 132 689 q 167 911 132 854 q 265 999 201 968 q 417 1029 329 1029 q 568 999 504 1029 q 667 911 632 968 q 701 776 701 854 q 651 627 701 689 q 486 508 601 565 l 353 443 q 265 367 296 415 q 233 261 233 319 q 283 142 233 186 q 417 97 332 97 z "},"9":{"ha":833,"x_min":94,"x_max":739,"o":"m 260 0 l 547 461 l 542 465 q 469 406 515 426 q 367 385 424 385 q 223 424 285 385 q 128 534 161 463 q 94 701 94 606 q 135 873 94 800 q 247 987 175 946 q 415 1028 319 1028 q 585 987 513 1028 q 699 873 658 946 q 739 701 739 800 q 717 551 739 625 q 653 410 696 478 l 399 0 l 260 0 m 417 486 q 560 545 506 486 q 614 701 614 604 q 560 858 614 799 q 417 917 506 917 q 274 858 328 917 q 219 701 219 799 q 274 545 219 604 q 417 486 328 486 z "},"A":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Á":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ă":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Ắ":{"ha":833,"x_min":69,"x_max":764,"o":"m 329 1250 l 475 1417 l 608 1417 l 456 1250 l 329 1250 m 382 1083 q 240 1132 293 1083 q 188 1264 188 1181 l 285 1264 q 311 1193 285 1219 q 382 1167 338 1167 l 450 1167 q 522 1193 496 1167 q 549 1264 549 1219 l 646 1264 q 593 1132 646 1181 q 450 1083 540 1083 l 382 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ặ":{"ha":833,"x_min":69,"x_max":764,"o":"m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"Ằ":{"ha":833,"x_min":69,"x_max":764,"o":"m 382 1083 q 240 1132 293 1083 q 188 1264 188 1181 l 285 1264 q 311 1193 285 1219 q 382 1167 338 1167 l 450 1167 q 522 1193 496 1167 q 549 1264 549 1219 l 646 1264 q 593 1132 646 1181 q 450 1083 540 1083 l 382 1083 m 378 1250 l 239 1417 l 372 1417 l 504 1250 l 378 1250 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ẳ":{"ha":833,"x_min":69,"x_max":764,"o":"m 353 1222 l 418 1300 q 428 1322 428 1311 q 414 1333 428 1333 l 313 1333 l 313 1417 l 447 1417 q 503 1399 483 1417 q 524 1350 524 1382 q 518 1313 524 1332 q 501 1278 513 1293 l 457 1222 l 353 1222 m 382 1083 q 240 1132 293 1083 q 188 1264 188 1181 l 285 1264 q 311 1193 285 1219 q 382 1167 338 1167 l 450 1167 q 522 1193 496 1167 q 549 1264 549 1219 l 646 1264 q 593 1132 646 1181 q 450 1083 540 1083 l 382 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ẵ":{"ha":833,"x_min":69,"x_max":764,"o":"m 382 1083 q 240 1125 293 1083 q 188 1250 188 1167 l 285 1250 q 311 1186 285 1206 q 382 1167 338 1167 l 450 1167 q 522 1186 496 1167 q 549 1250 549 1206 l 646 1250 q 593 1125 646 1167 q 450 1083 540 1083 l 382 1083 m 524 1278 q 451 1288 481 1278 q 401 1310 422 1297 q 362 1333 381 1324 q 319 1343 343 1343 q 290 1332 301 1343 q 278 1301 278 1321 l 278 1292 l 188 1292 l 188 1301 q 222 1385 188 1354 q 313 1417 256 1417 q 385 1407 357 1417 q 434 1384 414 1397 q 472 1361 454 1371 q 514 1351 490 1351 q 544 1363 533 1351 q 556 1393 556 1375 l 556 1403 l 646 1403 l 646 1393 q 613 1309 646 1340 q 524 1278 581 1278 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ǎ":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Â":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ấ":{"ha":833,"x_min":69,"x_max":854,"o":"m 567 1250 l 713 1417 l 854 1417 l 701 1250 l 567 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ậ":{"ha":833,"x_min":69,"x_max":764,"o":"m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"Ầ":{"ha":833,"x_min":69,"x_max":764,"o":"m 618 1250 l 451 1417 l 590 1417 l 750 1250 l 618 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ẩ":{"ha":833,"x_min":69,"x_max":764,"o":"m 583 1222 l 650 1288 q 661 1314 661 1299 q 640 1336 661 1336 l 549 1336 l 549 1417 l 667 1417 q 738 1393 711 1417 q 764 1331 764 1369 q 758 1297 764 1313 q 742 1269 753 1281 l 692 1222 l 583 1222 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ẫ":{"ha":833,"x_min":69,"x_max":764,"o":"m 524 1278 q 451 1288 481 1278 q 401 1310 422 1297 q 362 1333 381 1324 q 319 1343 343 1343 q 290 1332 301 1343 q 278 1301 278 1321 l 278 1292 l 188 1292 l 188 1301 q 222 1385 188 1354 q 313 1417 256 1417 q 385 1407 357 1417 q 434 1384 414 1397 q 472 1361 454 1371 q 514 1351 490 1351 q 544 1363 533 1351 q 556 1393 556 1375 l 556 1403 l 646 1403 l 646 1393 q 613 1309 646 1340 q 524 1278 581 1278 m 167 1083 l 328 1236 l 506 1236 l 667 1083 l 526 1083 l 417 1185 l 304 1083 l 167 1083 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Ä":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ạ":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"À":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ả":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 383 1132 l 453 1219 q 472 1264 472 1246 q 428 1292 472 1292 l 317 1292 l 317 1382 l 463 1382 q 548 1355 515 1382 q 581 1279 581 1328 q 557 1204 581 1235 l 501 1132 l 383 1132 z "},"Ā":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 194 1167 l 194 1271 l 639 1271 l 639 1167 l 194 1167 z "},"Ą":{"ha":833,"x_min":69,"x_max":813,"o":"m 704 -282 q 581 -245 628 -282 q 535 -153 535 -208 q 561 -72 535 -112 q 653 14 588 -32 l 757 14 l 742 1 q 674 -69 694 -37 q 653 -129 653 -100 q 674 -179 653 -160 q 729 -199 694 -199 l 813 -199 l 813 -282 l 704 -282 m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Å":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 417 1064 q 296 1108 342 1064 q 250 1222 250 1151 q 296 1337 250 1293 q 417 1381 342 1381 q 538 1337 492 1381 q 583 1222 583 1293 q 538 1108 583 1151 q 417 1064 492 1064 m 417 1138 q 477 1160 454 1138 q 500 1222 500 1183 q 477 1285 500 1261 q 417 1308 454 1308 q 356 1285 379 1308 q 333 1222 333 1261 q 356 1160 333 1183 q 417 1138 379 1138 z "},"Ã":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"Æ":{"ha":833,"x_min":42,"x_max":792,"o":"m 42 0 l 243 1014 l 792 1014 l 792 900 l 539 900 l 539 583 l 757 583 l 757 469 l 539 469 l 539 114 l 792 114 l 792 0 l 419 0 l 419 282 l 224 282 l 168 0 l 42 0 m 243 386 l 419 386 l 419 900 l 342 900 l 243 386 z "},"Ǽ":{"ha":833,"x_min":42,"x_max":792,"o":"m 42 0 l 243 1014 l 792 1014 l 792 900 l 539 900 l 539 583 l 757 583 l 757 469 l 539 469 l 539 114 l 792 114 l 792 0 l 419 0 l 419 282 l 224 282 l 168 0 l 42 0 m 243 386 l 419 386 l 419 900 l 342 900 l 243 386 m 343 1125 l 490 1319 l 625 1319 l 471 1125 l 343 1125 z "},"B":{"ha":833,"x_min":129,"x_max":736,"o":"m 129 0 l 129 1014 l 417 1014 q 634 944 556 1014 q 713 751 713 875 q 683 631 713 682 q 601 551 654 579 q 472 525 547 524 l 472 546 q 612 515 553 547 q 703 424 671 483 q 736 282 736 364 q 700 132 736 196 q 597 34 664 68 q 438 0 531 0 l 129 0 m 251 113 l 424 113 q 562 159 511 113 q 613 286 613 206 q 562 422 613 369 q 424 474 511 474 l 251 474 l 251 113 m 251 582 l 415 582 q 542 625 496 582 q 589 742 589 668 q 543 858 589 815 q 417 901 497 901 l 251 901 l 251 582 z "},"C":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 z "},"Ć":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 343 1125 l 490 1319 l 625 1319 l 471 1125 l 343 1125 z "},"Č":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 367 1125 l 172 1319 l 310 1319 l 424 1211 l 535 1319 l 675 1319 l 482 1125 l 367 1125 z "},"Ç":{"ha":833,"x_min":122,"x_max":719,"o":"m 292 -282 l 292 -206 l 389 -206 q 438 -190 419 -206 q 457 -156 457 -174 q 419 -114 457 -132 q 311 -96 381 -96 l 360 36 l 439 36 l 410 -49 q 485 -67 446 -53 q 550 -106 524 -81 q 576 -167 576 -131 q 531 -248 576 -214 q 410 -282 485 -282 l 292 -282 m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 z "},"Ĉ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 172 1125 l 365 1319 l 481 1319 l 675 1125 l 538 1125 l 424 1233 l 313 1125 l 172 1125 z "},"Ċ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 424 1133 q 351 1158 378 1133 q 325 1222 325 1182 q 351 1287 325 1263 q 424 1311 378 1311 q 496 1287 469 1311 q 522 1222 522 1263 q 496 1158 522 1182 q 424 1133 469 1133 z "},"D":{"ha":833,"x_min":128,"x_max":711,"o":"m 128 0 l 128 1014 l 390 1014 q 560 976 489 1014 q 672 871 632 939 q 711 710 711 803 l 711 306 q 672 144 711 213 q 560 38 632 75 q 390 0 489 0 l 128 0 m 253 111 l 390 111 q 534 163 482 111 q 586 306 586 214 l 586 710 q 534 851 586 800 q 390 903 482 903 l 253 903 l 253 111 z "},"Ð":{"ha":833,"x_min":14,"x_max":711,"o":"m 14 465 l 14 569 l 403 569 l 403 465 l 14 465 m 128 0 l 128 1014 l 390 1014 q 560 976 489 1014 q 672 871 632 939 q 711 710 711 803 l 711 306 q 672 144 711 213 q 560 38 632 75 q 390 0 489 0 l 128 0 m 253 111 l 390 111 q 534 163 482 111 q 586 306 586 214 l 586 710 q 534 851 586 800 q 390 903 482 903 l 253 903 l 253 111 z "},"Ď":{"ha":833,"x_min":128,"x_max":711,"o":"m 128 0 l 128 1014 l 390 1014 q 560 976 489 1014 q 672 871 632 939 q 711 710 711 803 l 711 306 q 672 144 711 213 q 560 38 632 75 q 390 0 489 0 l 128 0 m 253 111 l 390 111 q 534 163 482 111 q 586 306 586 214 l 586 710 q 534 851 586 800 q 390 903 482 903 l 253 903 l 253 111 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Đ":{"ha":833,"x_min":14,"x_max":711,"o":"m 14 465 l 14 569 l 403 569 l 403 465 l 14 465 m 128 0 l 128 1014 l 390 1014 q 560 976 489 1014 q 672 871 632 939 q 711 710 711 803 l 711 306 q 672 144 711 213 q 560 38 632 75 q 390 0 489 0 l 128 0 m 253 111 l 390 111 q 534 163 482 111 q 586 306 586 214 l 586 710 q 534 851 586 800 q 390 903 482 903 l 253 903 l 253 111 z "},"E":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 z "},"É":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 364 1125 l 511 1319 l 646 1319 l 492 1125 l 364 1125 z "},"Ĕ":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 444 1118 q 283 1174 344 1118 q 222 1319 222 1229 l 321 1319 q 354 1232 321 1265 q 443 1199 388 1199 q 534 1232 500 1199 q 568 1319 568 1265 l 667 1319 q 606 1174 667 1229 q 444 1118 544 1118 z "},"Ě":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 388 1125 l 193 1319 l 331 1319 l 444 1211 l 556 1319 l 696 1319 l 503 1125 l 388 1125 z "},"Ê":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 193 1125 l 386 1319 l 501 1319 l 696 1125 l 558 1125 l 444 1233 l 333 1125 l 193 1125 z "},"Ế":{"ha":833,"x_min":139,"x_max":854,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 567 1250 l 713 1417 l 854 1417 l 701 1250 l 567 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ệ":{"ha":833,"x_min":139,"x_max":722,"o":"m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 444 -296 q 372 -272 399 -296 q 346 -208 346 -249 q 372 -142 346 -167 q 444 -118 399 -118 q 517 -142 490 -118 q 543 -208 543 -167 q 517 -272 543 -249 q 444 -296 490 -296 z "},"Ề":{"ha":833,"x_min":139,"x_max":750,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 618 1250 l 451 1417 l 590 1417 l 750 1250 l 618 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ể":{"ha":833,"x_min":139,"x_max":764,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 583 1222 l 650 1288 q 661 1314 661 1299 q 640 1336 661 1336 l 549 1336 l 549 1417 l 667 1417 q 738 1393 711 1417 q 764 1331 764 1369 q 758 1297 764 1313 q 742 1269 753 1281 l 692 1222 l 583 1222 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ễ":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 524 1278 q 451 1288 481 1278 q 401 1310 422 1297 q 362 1333 381 1324 q 319 1343 343 1343 q 290 1332 301 1343 q 278 1301 278 1321 l 278 1292 l 188 1292 l 188 1301 q 222 1385 188 1354 q 313 1417 256 1417 q 385 1407 357 1417 q 434 1384 414 1397 q 472 1361 454 1371 q 514 1351 490 1351 q 544 1363 533 1351 q 556 1393 556 1375 l 556 1403 l 646 1403 l 646 1393 q 613 1309 646 1340 q 524 1278 581 1278 m 167 1083 l 328 1236 l 506 1236 l 667 1083 l 526 1083 l 417 1185 l 304 1083 l 167 1083 z "},"Ë":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 599 1135 q 534 1158 558 1135 q 510 1222 510 1182 q 534 1288 510 1264 q 599 1313 558 1313 q 663 1288 639 1313 q 688 1222 688 1264 q 663 1158 688 1182 q 599 1135 639 1135 m 290 1135 q 226 1158 250 1135 q 201 1222 201 1182 q 226 1288 201 1264 q 290 1313 250 1313 q 355 1288 331 1313 q 379 1222 379 1264 q 355 1158 379 1182 q 290 1135 331 1135 z "},"Ė":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 444 1133 q 372 1158 399 1133 q 346 1222 346 1182 q 372 1287 346 1263 q 444 1311 399 1311 q 517 1287 490 1311 q 543 1222 543 1263 q 517 1158 543 1182 q 444 1133 490 1133 z "},"Ẹ":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 444 -296 q 372 -272 399 -296 q 346 -208 346 -249 q 372 -142 346 -167 q 444 -118 399 -118 q 517 -142 490 -118 q 543 -208 543 -167 q 517 -272 543 -249 q 444 -296 490 -296 z "},"È":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 399 1125 l 239 1319 l 378 1319 l 531 1125 l 399 1125 z "},"Ẻ":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 358 1111 l 421 1199 q 440 1243 440 1226 q 396 1271 440 1271 l 292 1271 l 292 1361 l 403 1361 q 508 1333 468 1361 q 549 1257 549 1304 q 525 1183 549 1218 l 476 1111 l 358 1111 z "},"Ē":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 222 1167 l 222 1271 l 667 1271 l 667 1167 l 222 1167 z "},"Ę":{"ha":833,"x_min":139,"x_max":729,"o":"m 621 -282 q 498 -245 544 -282 q 451 -153 451 -208 q 478 -72 451 -112 q 569 14 504 -32 l 674 14 l 658 1 q 590 -69 611 -37 q 569 -129 569 -100 q 590 -179 569 -160 q 646 -199 611 -199 l 729 -199 l 729 -282 l 621 -282 m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 z "},"Ẽ":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 542 1132 q 474 1147 500 1132 q 429 1181 447 1161 q 394 1215 411 1200 q 354 1229 378 1229 q 324 1217 336 1229 q 313 1181 313 1206 l 313 1139 l 222 1139 l 222 1181 q 257 1278 222 1243 q 347 1313 292 1313 q 415 1298 389 1313 q 460 1264 442 1283 q 494 1230 478 1244 q 535 1215 511 1215 q 565 1227 554 1215 q 576 1264 576 1239 l 576 1306 l 667 1306 l 667 1264 q 633 1167 667 1201 q 542 1132 599 1132 z "},"F":{"ha":833,"x_min":132,"x_max":729,"o":"m 132 0 l 132 1015 l 729 1015 l 729 901 l 254 901 l 254 564 l 693 564 l 693 450 l 257 450 l 257 0 l 132 0 z "},"G":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 z "},"Ǵ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ğ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Ǧ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ĝ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ģ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 269 -333 l 401 -132 l 547 -132 l 401 -333 l 269 -333 z "},"Ġ":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 144 247 192 q 422 97 340 97 q 549 144 504 97 q 594 278 594 192 l 594 403 l 389 403 l 389 517 l 719 517 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 m 417 1133 q 344 1158 371 1133 q 318 1222 318 1182 q 344 1287 318 1263 q 417 1311 371 1311 q 489 1287 463 1311 q 515 1222 515 1263 q 489 1158 515 1182 q 417 1133 463 1133 z "},"H":{"ha":833,"x_min":129,"x_max":704,"o":"m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 z "},"Ħ":{"ha":833,"x_min":14,"x_max":819,"o":"m 14 729 l 14 833 l 819 833 l 819 729 l 14 729 m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 z "},"Ĥ":{"ha":833,"x_min":129,"x_max":704,"o":"m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"I":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 z "},"Í":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ĭ":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Î":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ï":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"İ":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 417 1133 q 344 1158 371 1133 q 318 1222 318 1182 q 344 1287 318 1263 q 417 1311 371 1311 q 489 1287 463 1311 q 515 1222 515 1263 q 489 1158 515 1182 q 417 1133 463 1133 z "},"Ị":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"Ì":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ỉ":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 383 1111 l 446 1199 q 465 1243 465 1226 q 421 1271 465 1271 l 317 1271 l 317 1361 l 428 1361 q 533 1333 493 1361 q 574 1257 574 1304 q 550 1183 574 1218 l 501 1111 l 383 1111 z "},"Ī":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 194 1167 l 194 1271 l 639 1271 l 639 1167 l 194 1167 z "},"Į":{"ha":833,"x_min":146,"x_max":688,"o":"m 426 -282 q 303 -245 350 -282 q 257 -153 257 -208 q 283 -72 257 -112 q 375 14 310 -32 l 479 14 l 464 1 q 396 -69 417 -37 q 375 -129 375 -100 q 396 -179 375 -160 q 451 -199 417 -199 l 535 -199 l 535 -282 l 426 -282 m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 z "},"Ĩ":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"J":{"ha":833,"x_min":63,"x_max":688,"o":"m 375 -14 q 146 68 229 -14 q 63 292 63 150 l 188 292 q 237 148 188 199 q 375 97 286 97 q 513 148 464 97 q 563 292 563 199 l 563 900 l 319 900 l 319 1014 l 688 1014 l 688 292 q 603 68 688 150 q 375 -14 519 -14 z "},"Ĵ":{"ha":833,"x_min":63,"x_max":751,"o":"m 375 -14 q 146 68 229 -14 q 63 292 63 150 l 188 292 q 237 148 188 199 q 375 97 286 97 q 513 148 464 97 q 563 292 563 199 l 563 900 l 319 900 l 319 1014 l 688 1014 l 688 292 q 603 68 688 150 q 375 -14 519 -14 m 249 1125 l 442 1319 l 557 1319 l 751 1125 l 614 1125 l 500 1233 l 389 1125 l 249 1125 z "},"K":{"ha":833,"x_min":128,"x_max":778,"o":"m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 z "},"Ķ":{"ha":833,"x_min":128,"x_max":778,"o":"m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"L":{"ha":833,"x_min":160,"x_max":743,"o":"m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 z "},"Ĺ":{"ha":833,"x_min":143,"x_max":743,"o":"m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 m 143 1125 l 290 1319 l 425 1319 l 271 1125 l 143 1125 z "},"Ľ":{"ha":833,"x_min":160,"x_max":743,"o":"m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 m 494 764 l 508 1014 l 626 1014 l 599 764 l 494 764 z "},"Ļ":{"ha":833,"x_min":160,"x_max":743,"o":"m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 m 292 -333 l 424 -132 l 569 -132 l 424 -333 l 292 -333 z "},"Ŀ":{"ha":833,"x_min":160,"x_max":743,"o":"m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 z "},"Ł":{"ha":833,"x_min":28,"x_max":743,"o":"m 28 319 l 28 431 l 542 778 l 542 667 l 28 319 m 160 0 l 160 1014 l 285 1014 l 285 114 l 743 114 l 743 0 l 160 0 z "},"M":{"ha":833,"x_min":106,"x_max":728,"o":"m 106 0 l 106 1014 l 269 1014 l 375 686 q 403 598 390 642 q 421 531 415 554 q 439 598 428 554 q 464 688 450 642 l 564 1014 l 728 1014 l 728 0 l 606 0 l 606 368 q 610 507 606 429 q 621 666 614 585 q 635 822 628 747 q 649 951 643 896 l 485 444 l 353 444 l 188 951 q 201 826 194 897 q 214 674 208 754 q 224 515 219 594 q 228 368 228 436 l 228 0 l 106 0 z "},"N":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 z "},"Ń":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ň":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ņ":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"Ŋ":{"ha":833,"x_min":125,"x_max":708,"o":"m 333 -250 l 333 -136 l 424 -136 q 540 -94 497 -136 q 583 21 583 -51 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 l 125 1014 l 292 1014 l 601 251 q 595 337 599 286 q 590 444 592 388 q 588 551 588 501 l 588 1014 l 708 1014 l 708 21 q 673 -122 708 -61 q 574 -217 638 -183 q 424 -250 510 -250 l 333 -250 z "},"Ñ":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"O":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ó":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ŏ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Ô":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ố":{"ha":833,"x_min":122,"x_max":854,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 567 1250 l 713 1417 l 854 1417 l 701 1250 l 567 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ộ":{"ha":833,"x_min":122,"x_max":711,"o":"m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"Ồ":{"ha":833,"x_min":122,"x_max":750,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 618 1250 l 451 1417 l 590 1417 l 750 1250 l 618 1250 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ổ":{"ha":833,"x_min":122,"x_max":764,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 583 1222 l 650 1288 q 661 1314 661 1299 q 640 1336 661 1336 l 549 1336 l 549 1417 l 667 1417 q 738 1393 711 1417 q 764 1331 764 1369 q 758 1297 764 1313 q 742 1269 753 1281 l 692 1222 l 583 1222 m 167 1083 l 358 1278 l 475 1278 l 668 1083 l 528 1083 l 417 1192 l 304 1083 l 167 1083 z "},"Ỗ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 524 1278 q 451 1288 481 1278 q 401 1310 422 1297 q 362 1333 381 1324 q 319 1343 343 1343 q 290 1332 301 1343 q 278 1301 278 1321 l 278 1292 l 188 1292 l 188 1301 q 222 1385 188 1354 q 313 1417 256 1417 q 385 1407 357 1417 q 434 1384 414 1397 q 472 1361 454 1371 q 514 1351 490 1351 q 544 1363 533 1351 q 556 1393 556 1375 l 556 1403 l 646 1403 l 646 1393 q 613 1309 646 1340 q 524 1278 581 1278 m 167 1083 l 328 1236 l 506 1236 l 667 1083 l 526 1083 l 417 1185 l 304 1083 l 167 1083 z "},"Ö":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ọ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"Ò":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ỏ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 383 1111 l 446 1199 q 465 1243 465 1226 q 421 1271 465 1271 l 317 1271 l 317 1361 l 428 1361 q 533 1333 493 1361 q 574 1257 574 1304 q 550 1183 574 1218 l 501 1111 l 383 1111 z "},"Ơ":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ớ":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 322 1125 l 469 1319 l 604 1319 l 450 1125 l 322 1125 z "},"Ợ":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"Ờ":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 357 1125 l 197 1319 l 336 1319 l 489 1125 l 357 1125 z "},"Ở":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 358 1111 l 421 1199 q 440 1243 440 1226 q 396 1271 440 1271 l 292 1271 l 292 1361 l 403 1361 q 508 1333 468 1361 q 549 1257 549 1304 q 525 1183 549 1218 l 476 1111 l 358 1111 z "},"Ỡ":{"ha":833,"x_min":122,"x_max":736,"o":"m 556 882 l 556 972 l 583 972 q 619 985 606 972 q 632 1021 632 999 l 632 1125 l 736 1125 l 736 1014 q 697 918 736 954 q 590 882 657 882 l 556 882 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 500 1132 q 432 1147 458 1132 q 388 1181 406 1161 q 353 1215 369 1200 q 313 1229 336 1229 q 283 1217 294 1229 q 271 1181 271 1206 l 271 1139 l 181 1139 l 181 1181 q 215 1278 181 1243 q 306 1313 250 1313 q 374 1298 347 1313 q 418 1264 400 1283 q 453 1230 436 1244 q 493 1215 469 1215 q 524 1227 513 1215 q 535 1264 535 1239 l 535 1306 l 625 1306 l 625 1264 q 591 1167 625 1201 q 500 1132 557 1132 z "},"Ő":{"ha":833,"x_min":122,"x_max":733,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 453 1125 l 606 1319 l 733 1319 l 574 1125 l 453 1125 m 204 1125 l 357 1319 l 485 1319 l 325 1125 l 204 1125 z "},"Ō":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 194 1167 l 194 1271 l 639 1271 l 639 1167 l 194 1167 z "},"Ǫ":{"ha":833,"x_min":122,"x_max":711,"o":"m 526 -282 q 403 -245 450 -282 q 357 -153 357 -208 q 366 -110 357 -133 q 392 -62 375 -87 q 435 -14 410 -37 q 426 -14 431 -14 q 417 -14 421 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 681 133 711 196 q 597 35 651 71 l 557 1 q 493 -69 511 -37 q 475 -129 475 -100 q 496 -179 475 -160 q 551 -199 517 -199 l 635 -199 l 635 -282 l 526 -282 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ø":{"ha":833,"x_min":49,"x_max":785,"o":"m 49 -56 l 668 1042 l 785 1042 l 165 -56 l 49 -56 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ǿ":{"ha":833,"x_min":49,"x_max":785,"o":"m 49 -56 l 668 1042 l 785 1042 l 165 -56 l 49 -56 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Õ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"Œ":{"ha":833,"x_min":56,"x_max":799,"o":"m 271 -14 q 156 18 204 -14 q 81 110 107 50 q 56 250 56 169 l 56 764 q 81 905 56 846 q 156 996 107 964 q 271 1028 204 1028 q 351 1008 319 1028 q 401 959 383 988 q 424 903 419 931 l 431 903 l 431 1014 l 799 1014 l 799 900 l 553 900 l 553 581 l 764 581 l 764 467 l 553 467 l 553 114 l 799 114 l 799 0 l 431 0 l 431 111 l 424 111 q 401 56 419 85 q 351 6 383 26 q 271 -14 319 -14 m 306 97 q 397 138 364 97 q 431 250 431 179 l 431 764 q 397 876 431 835 q 306 917 364 917 q 214 876 247 917 q 181 764 181 835 l 181 250 q 214 138 181 179 q 306 97 247 97 z "},"P":{"ha":833,"x_min":128,"x_max":764,"o":"m 128 0 l 128 1014 l 454 1014 q 618 977 549 1014 q 726 874 688 940 q 764 715 764 807 q 726 558 764 625 q 618 453 688 490 q 454 417 549 417 l 253 417 l 253 0 l 128 0 m 253 529 l 454 529 q 585 580 536 529 q 635 715 635 631 q 585 851 635 801 q 454 901 536 901 l 253 901 l 253 529 z "},"Þ":{"ha":833,"x_min":125,"x_max":764,"o":"m 125 0 l 125 1014 l 250 1014 l 250 806 l 463 806 q 622 771 554 806 q 726 674 689 736 q 764 528 764 611 q 682 326 764 401 q 463 250 600 250 l 250 250 l 250 0 l 125 0 m 250 361 l 463 361 q 589 406 543 361 q 635 528 635 451 q 588 650 635 606 q 463 694 542 694 l 250 694 l 250 361 z "},"Q":{"ha":833,"x_min":111,"x_max":731,"o":"m 586 -250 l 438 -4 l 451 -12 q 437 -13 446 -12 q 417 -14 428 -14 q 255 23 324 -14 q 149 127 186 60 q 111 285 111 194 l 111 729 q 149 888 111 821 q 255 991 186 954 q 417 1028 324 1028 q 579 991 511 1028 q 685 888 647 954 q 722 729 722 821 l 722 285 q 682 122 722 192 q 568 18 642 53 l 731 -250 l 586 -250 m 417 97 q 548 149 499 97 q 597 285 597 200 l 597 729 q 548 866 597 815 q 417 917 499 917 q 285 866 335 917 q 236 729 236 815 l 236 285 q 285 149 236 200 q 417 97 335 97 z "},"R":{"ha":833,"x_min":128,"x_max":757,"o":"m 128 0 l 128 1014 l 442 1014 q 600 977 532 1014 q 706 875 668 940 q 743 722 743 810 q 690 546 743 619 q 544 444 636 472 l 757 0 l 610 0 l 415 431 l 253 431 l 253 0 l 128 0 m 253 543 l 442 543 q 567 592 519 543 q 614 722 614 642 q 567 853 614 804 q 442 901 519 901 l 253 901 l 253 543 z "},"Ŕ":{"ha":833,"x_min":128,"x_max":757,"o":"m 128 0 l 128 1014 l 442 1014 q 600 977 532 1014 q 706 875 668 940 q 743 722 743 810 q 690 546 743 619 q 544 444 636 472 l 757 0 l 610 0 l 415 431 l 253 431 l 253 0 l 128 0 m 253 543 l 442 543 q 567 592 519 543 q 614 722 614 642 q 567 853 614 804 q 442 901 519 901 l 253 901 l 253 543 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ř":{"ha":833,"x_min":128,"x_max":757,"o":"m 128 0 l 128 1014 l 442 1014 q 600 977 532 1014 q 706 875 668 940 q 743 722 743 810 q 690 546 743 619 q 544 444 636 472 l 757 0 l 610 0 l 415 431 l 253 431 l 253 0 l 128 0 m 253 543 l 442 543 q 567 592 519 543 q 614 722 614 642 q 567 853 614 804 q 442 901 519 901 l 253 901 l 253 543 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ŗ":{"ha":833,"x_min":128,"x_max":757,"o":"m 128 0 l 128 1014 l 442 1014 q 600 977 532 1014 q 706 875 668 940 q 743 722 743 810 q 690 546 743 619 q 544 444 636 472 l 757 0 l 610 0 l 415 431 l 253 431 l 253 0 l 128 0 m 253 543 l 442 543 q 567 592 519 543 q 614 722 614 642 q 567 853 614 804 q 442 901 519 901 l 253 901 l 253 543 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"S":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 z "},"Ś":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Š":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ş":{"ha":833,"x_min":100,"x_max":733,"o":"m 285 -282 l 285 -206 l 382 -206 q 431 -190 413 -206 q 450 -156 450 -174 q 412 -114 450 -132 q 304 -96 374 -96 l 353 36 l 432 36 l 403 -49 q 478 -67 439 -53 q 543 -106 517 -81 q 569 -167 569 -131 q 524 -248 569 -214 q 403 -282 478 -282 l 285 -282 m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 z "},"Ŝ":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ș":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"ẞ":{"ha":833,"x_min":128,"x_max":750,"o":"m 128 0 l 128 728 q 164 878 128 814 q 266 978 200 943 q 419 1014 332 1014 l 735 1014 l 735 892 l 486 556 l 486 588 q 625 553 565 589 q 717 453 685 518 q 750 299 750 388 q 713 142 750 210 q 608 38 675 75 q 451 0 542 0 l 358 0 l 358 114 l 438 114 q 569 164 521 114 q 618 299 618 214 q 569 431 618 382 q 438 479 521 479 l 375 479 l 375 588 l 603 900 l 419 900 q 298 854 343 900 q 253 728 253 808 l 253 0 l 128 0 z "},"Ə":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 261 22 326 -14 q 160 124 196 58 q 125 278 125 190 l 125 556 l 583 556 l 583 738 q 541 870 583 824 q 417 917 499 917 q 293 869 336 917 q 250 736 250 822 l 125 736 q 160 892 125 826 q 260 992 194 957 q 417 1028 325 1028 q 574 993 510 1028 q 674 893 639 958 q 708 736 708 828 l 708 278 q 673 124 708 190 q 572 22 638 58 q 417 -14 507 -14 m 417 90 q 543 139 503 90 q 583 278 583 188 l 583 458 l 240 458 l 250 469 l 250 278 q 291 139 250 188 q 417 90 332 90 z "},"T":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 z "},"Ŧ":{"ha":833,"x_min":76,"x_max":757,"o":"m 153 410 l 153 514 l 681 514 l 681 410 l 153 410 m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 z "},"Ť":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ţ":{"ha":833,"x_min":76,"x_max":757,"o":"m 344 -282 l 344 -206 l 442 -206 q 491 -190 472 -206 q 510 -156 510 -174 q 472 -114 510 -132 q 364 -96 433 -96 l 413 36 l 479 0 l 463 -49 q 538 -67 499 -53 q 603 -106 576 -81 q 629 -167 629 -131 q 583 -248 629 -214 q 463 -282 538 -282 l 344 -282 m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 z "},"Ț":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 m 215 -333 l 347 -132 l 493 -132 l 347 -333 l 215 -333 z "},"U":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 z "},"Ú":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ŭ":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Û":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ü":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ụ":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"Ù":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ủ":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 358 1111 l 421 1199 q 440 1243 440 1226 q 396 1271 440 1271 l 292 1271 l 292 1361 l 403 1361 q 508 1333 468 1361 q 549 1257 549 1304 q 525 1183 549 1218 l 476 1111 l 358 1111 z "},"Ư":{"ha":833,"x_min":125,"x_max":826,"o":"m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 z "},"Ứ":{"ha":833,"x_min":125,"x_max":826,"o":"m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ự":{"ha":833,"x_min":125,"x_max":826,"o":"m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 z "},"Ừ":{"ha":833,"x_min":125,"x_max":826,"o":"m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ử":{"ha":833,"x_min":125,"x_max":826,"o":"m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 358 1111 l 421 1199 q 440 1243 440 1226 q 396 1271 440 1271 l 292 1271 l 292 1361 l 403 1361 q 508 1333 468 1361 q 549 1257 549 1304 q 525 1183 549 1218 l 476 1111 l 358 1111 z "},"Ữ":{"ha":833,"x_min":125,"x_max":826,"o":"m 604 924 l 604 1014 l 674 1014 q 709 1027 696 1014 q 722 1063 722 1040 l 722 1167 l 826 1167 l 826 1056 q 787 960 826 996 q 681 924 747 924 l 604 924 m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"Ű":{"ha":833,"x_min":125,"x_max":733,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 453 1125 l 606 1319 l 733 1319 l 574 1125 l 453 1125 m 204 1125 l 357 1319 l 485 1319 l 325 1125 l 204 1125 z "},"Ū":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 194 1167 l 194 1271 l 639 1271 l 639 1167 l 194 1167 z "},"Ų":{"ha":833,"x_min":125,"x_max":708,"o":"m 526 -282 q 403 -245 450 -282 q 357 -153 357 -208 q 366 -110 357 -133 q 392 -62 375 -87 q 435 -14 410 -37 q 426 -14 431 -14 q 417 -14 421 -14 q 260 21 325 -14 q 160 122 194 56 q 125 278 125 188 l 125 1014 l 250 1014 l 250 278 q 293 145 250 192 q 417 99 336 99 q 541 145 499 99 q 583 278 583 192 l 583 1014 l 708 1014 l 708 278 q 680 133 708 196 q 597 35 651 71 l 557 1 q 493 -69 511 -37 q 475 -129 475 -100 q 496 -179 475 -160 q 551 -199 517 -199 l 635 -199 l 635 -282 l 526 -282 z "},"Ů":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 417 1064 q 296 1108 342 1064 q 250 1222 250 1151 q 296 1337 250 1293 q 417 1381 342 1381 q 538 1337 492 1381 q 583 1222 583 1293 q 538 1108 583 1151 q 417 1064 492 1064 m 417 1138 q 477 1160 454 1138 q 500 1222 500 1183 q 477 1285 500 1261 q 417 1308 454 1308 q 356 1285 379 1308 q 333 1222 333 1261 q 356 1160 333 1183 q 417 1138 379 1138 z "},"Ũ":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 200 65 275 -14 q 125 278 125 143 l 125 1014 l 250 1014 l 250 278 q 291 146 250 194 q 417 97 332 97 q 542 146 500 97 q 583 278 583 194 l 583 1014 l 708 1014 l 708 278 q 634 64 708 142 q 417 -14 560 -14 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"V":{"ha":833,"x_min":69,"x_max":764,"o":"m 331 0 l 69 1014 l 199 1014 l 371 325 q 401 191 389 253 q 419 97 414 129 q 437 191 425 129 q 467 325 449 253 l 638 1014 l 764 1014 l 501 0 l 331 0 z "},"W":{"ha":833,"x_min":35,"x_max":799,"o":"m 151 0 l 35 1014 l 154 1014 l 231 264 q 236 201 233 233 q 241 139 239 168 q 243 90 243 110 q 248 139 246 110 q 253 201 250 168 q 261 264 257 233 l 356 1014 l 485 1014 l 571 264 q 578 201 575 233 q 585 139 582 168 q 590 90 589 110 q 594 139 592 110 q 599 201 596 168 q 606 264 603 233 l 685 1014 l 799 1014 l 679 0 l 522 0 l 436 764 q 430 826 433 796 q 424 883 426 857 q 419 926 421 910 q 415 883 418 910 q 408 826 411 857 q 401 764 406 796 l 308 0 l 151 0 z "},"Ẃ":{"ha":833,"x_min":35,"x_max":799,"o":"m 151 0 l 35 1014 l 154 1014 l 231 264 q 236 201 233 233 q 241 139 239 168 q 243 90 243 110 q 248 139 246 110 q 253 201 250 168 q 261 264 257 233 l 356 1014 l 485 1014 l 571 264 q 578 201 575 233 q 585 139 582 168 q 590 90 589 110 q 594 139 592 110 q 599 201 596 168 q 606 264 603 233 l 685 1014 l 799 1014 l 679 0 l 522 0 l 436 764 q 430 826 433 796 q 424 883 426 857 q 419 926 421 910 q 415 883 418 910 q 408 826 411 857 q 401 764 406 796 l 308 0 l 151 0 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ŵ":{"ha":833,"x_min":35,"x_max":799,"o":"m 151 0 l 35 1014 l 154 1014 l 231 264 q 236 201 233 233 q 241 139 239 168 q 243 90 243 110 q 248 139 246 110 q 253 201 250 168 q 261 264 257 233 l 356 1014 l 485 1014 l 571 264 q 578 201 575 233 q 585 139 582 168 q 590 90 589 110 q 594 139 592 110 q 599 201 596 168 q 606 264 603 233 l 685 1014 l 799 1014 l 679 0 l 522 0 l 436 764 q 430 826 433 796 q 424 883 426 857 q 419 926 421 910 q 415 883 418 910 q 408 826 411 857 q 401 764 406 796 l 308 0 l 151 0 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ẅ":{"ha":833,"x_min":35,"x_max":799,"o":"m 151 0 l 35 1014 l 154 1014 l 231 264 q 236 201 233 233 q 241 139 239 168 q 243 90 243 110 q 248 139 246 110 q 253 201 250 168 q 261 264 257 233 l 356 1014 l 485 1014 l 571 264 q 578 201 575 233 q 585 139 582 168 q 590 90 589 110 q 594 139 592 110 q 599 201 596 168 q 606 264 603 233 l 685 1014 l 799 1014 l 679 0 l 522 0 l 436 764 q 430 826 433 796 q 424 883 426 857 q 419 926 421 910 q 415 883 418 910 q 408 826 411 857 q 401 764 406 796 l 308 0 l 151 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ẁ":{"ha":833,"x_min":35,"x_max":799,"o":"m 151 0 l 35 1014 l 154 1014 l 231 264 q 236 201 233 233 q 241 139 239 168 q 243 90 243 110 q 248 139 246 110 q 253 201 250 168 q 261 264 257 233 l 356 1014 l 485 1014 l 571 264 q 578 201 575 233 q 585 139 582 168 q 590 90 589 110 q 594 139 592 110 q 599 201 596 168 q 606 264 603 233 l 685 1014 l 799 1014 l 679 0 l 522 0 l 436 764 q 430 826 433 796 q 424 883 426 857 q 419 926 421 910 q 415 883 418 910 q 408 826 411 857 q 401 764 406 796 l 308 0 l 151 0 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"X":{"ha":833,"x_min":56,"x_max":778,"o":"m 56 0 l 347 514 l 71 1014 l 215 1014 l 372 714 q 398 663 385 690 q 419 621 411 636 q 440 663 426 636 q 465 714 453 690 l 625 1014 l 763 1014 l 486 522 l 778 0 l 635 0 l 461 322 q 435 373 449 346 q 415 417 422 400 q 395 374 408 400 q 369 324 382 347 l 194 0 l 56 0 z "},"Y":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 z "},"Ý":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ŷ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 165 1125 l 358 1319 l 474 1319 l 668 1125 l 531 1125 l 417 1233 l 306 1125 l 165 1125 z "},"Ÿ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ỵ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"Ỳ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 371 1125 l 211 1319 l 350 1319 l 503 1125 l 371 1125 z "},"Ỷ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 358 1111 l 421 1199 q 440 1243 440 1226 q 396 1271 440 1271 l 292 1271 l 292 1361 l 403 1361 q 508 1333 468 1361 q 549 1257 549 1304 q 525 1183 549 1218 l 476 1111 l 358 1111 z "},"Ȳ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 194 1167 l 194 1271 l 639 1271 l 639 1167 l 194 1167 z "},"Ỹ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 514 1132 q 446 1147 472 1132 q 401 1181 419 1161 q 367 1215 383 1200 q 326 1229 350 1229 q 297 1217 308 1229 q 285 1181 285 1206 l 285 1139 l 194 1139 l 194 1181 q 229 1278 194 1243 q 319 1313 264 1313 q 388 1298 361 1313 q 432 1264 414 1283 q 467 1230 450 1244 q 507 1215 483 1215 q 538 1227 526 1215 q 549 1264 549 1239 l 549 1306 l 639 1306 l 639 1264 q 605 1167 639 1201 q 514 1132 571 1132 z "},"Z":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 125 l 575 900 l 125 900 l 125 1014 l 701 1014 l 701 889 l 244 114 l 715 114 l 715 0 l 118 0 z "},"Ź":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 125 l 575 900 l 125 900 l 125 1014 l 701 1014 l 701 889 l 244 114 l 715 114 l 715 0 l 118 0 m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 z "},"Ž":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 125 l 575 900 l 125 900 l 125 1014 l 701 1014 l 701 889 l 244 114 l 715 114 l 715 0 l 118 0 m 360 1125 l 165 1319 l 303 1319 l 417 1211 l 528 1319 l 668 1319 l 475 1125 l 360 1125 z "},"Ż":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 125 l 575 900 l 125 900 l 125 1014 l 701 1014 l 701 889 l 244 114 l 715 114 l 715 0 l 118 0 m 417 1133 q 344 1158 371 1133 q 318 1222 318 1182 q 344 1287 318 1263 q 417 1311 371 1311 q 489 1287 463 1311 q 515 1222 515 1263 q 489 1158 515 1182 q 417 1133 463 1133 z "},"a":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 z "},"á":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 343 896 l 490 1090 l 625 1090 l 471 896 l 343 896 z "},"ă":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 424 889 q 263 944 324 889 q 201 1090 201 1000 l 300 1090 q 333 1003 300 1036 q 422 969 367 969 q 513 1003 479 969 q 547 1090 547 1036 l 646 1090 q 585 944 646 1000 q 424 889 524 889 z "},"ắ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 417 889 q 246 939 311 889 q 181 1069 181 989 l 278 1069 q 316 999 278 1026 q 417 972 354 972 q 517 999 479 972 q 556 1069 556 1026 l 653 1069 q 588 939 653 989 q 417 889 524 889 m 329 1056 l 489 1236 l 622 1236 l 456 1056 l 329 1056 z "},"ặ":{"ha":833,"x_min":90,"x_max":708,"o":"m 422 889 q 261 944 322 889 q 200 1090 200 1000 l 299 1090 q 332 1003 299 1036 q 421 969 365 969 q 512 1003 478 969 q 546 1090 546 1036 l 644 1090 q 583 944 644 1000 q 422 889 522 889 m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 424 -296 q 351 -272 378 -296 q 325 -208 325 -249 q 351 -142 325 -167 q 424 -118 378 -118 q 496 -142 469 -118 q 522 -208 522 -167 q 496 -272 522 -249 q 424 -296 469 -296 z "},"ằ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 417 889 q 246 939 311 889 q 181 1069 181 989 l 278 1069 q 316 999 278 1026 q 417 972 354 972 q 517 999 479 972 q 556 1069 556 1026 l 653 1069 q 588 939 653 989 q 417 889 524 889 m 378 1056 l 211 1236 l 344 1236 l 504 1056 l 378 1056 z "},"ẳ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 417 889 q 246 939 311 889 q 181 1069 181 989 l 278 1069 q 316 999 278 1026 q 417 972 354 972 q 517 999 479 972 q 556 1069 556 1026 l 653 1069 q 588 939 653 989 q 417 889 524 889 m 351 1056 l 414 1140 q 426 1175 426 1157 q 417 1199 426 1190 q 389 1208 407 1208 l 313 1208 l 313 1292 l 403 1292 q 498 1265 463 1292 q 533 1193 533 1238 q 527 1158 533 1175 q 510 1125 521 1140 l 461 1056 l 351 1056 z "},"ẵ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 417 896 q 256 946 317 896 q 194 1076 194 996 l 285 1076 q 321 1006 285 1033 q 415 978 357 978 q 512 1006 475 978 q 549 1076 549 1033 l 639 1076 q 578 946 639 996 q 417 896 517 896 m 508 1128 q 440 1141 465 1128 q 397 1172 414 1154 q 365 1202 381 1189 q 326 1215 350 1215 q 296 1205 307 1215 q 285 1174 285 1194 l 285 1139 l 194 1139 l 194 1167 q 231 1256 194 1222 q 325 1289 267 1289 q 395 1276 369 1289 q 437 1245 421 1263 q 468 1215 453 1228 q 507 1201 483 1201 q 549 1243 549 1201 l 549 1278 l 639 1278 l 639 1250 q 603 1161 639 1194 q 508 1128 567 1128 z "},"ǎ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 367 896 l 172 1090 l 310 1090 l 424 982 l 535 1090 l 675 1090 l 482 896 l 367 896 z "},"â":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 172 896 l 365 1090 l 481 1090 l 675 896 l 538 896 l 424 1004 l 313 896 l 172 896 z "},"ấ":{"ha":833,"x_min":90,"x_max":868,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 569 1056 l 729 1250 l 868 1250 l 701 1056 l 569 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ậ":{"ha":833,"x_min":90,"x_max":708,"o":"m 172 896 l 365 1090 l 481 1090 l 675 896 l 538 896 l 424 1004 l 313 896 l 172 896 m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 424 -296 q 351 -272 378 -296 q 325 -208 325 -249 q 351 -142 325 -167 q 424 -118 378 -118 q 496 -142 469 -118 q 522 -208 522 -167 q 496 -272 522 -249 q 424 -296 469 -296 z "},"ầ":{"ha":833,"x_min":90,"x_max":757,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 625 1056 l 444 1250 l 583 1250 l 757 1056 l 625 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ẩ":{"ha":833,"x_min":90,"x_max":764,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 588 1056 l 650 1140 q 663 1174 663 1160 q 651 1199 663 1190 q 618 1208 639 1208 l 549 1208 l 549 1292 l 625 1292 q 726 1264 689 1292 q 764 1188 764 1236 q 758 1158 764 1172 q 740 1125 753 1143 l 692 1056 l 588 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ẫ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 508 1128 q 440 1141 465 1128 q 397 1172 414 1154 q 365 1202 381 1189 q 326 1215 350 1215 q 296 1205 307 1215 q 285 1174 285 1194 l 285 1139 l 194 1139 l 194 1167 q 231 1256 194 1222 q 325 1289 267 1289 q 395 1276 369 1289 q 437 1245 421 1263 q 468 1215 453 1228 q 507 1201 483 1201 q 549 1243 549 1201 l 549 1278 l 639 1278 l 639 1250 q 603 1161 639 1194 q 508 1128 567 1128 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ä":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 578 901 q 513 925 538 901 q 489 989 489 949 q 513 1055 489 1031 q 578 1079 538 1079 q 642 1055 618 1079 q 667 989 667 1031 q 642 925 667 949 q 578 901 618 901 m 269 901 q 205 925 229 901 q 181 989 181 949 q 205 1055 181 1031 q 269 1079 229 1079 q 334 1055 310 1079 q 358 989 358 1031 q 334 925 358 949 q 269 901 310 901 z "},"ạ":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 424 -296 q 351 -272 378 -296 q 325 -208 325 -249 q 351 -142 325 -167 q 424 -118 378 -118 q 496 -142 469 -118 q 522 -208 522 -167 q 496 -272 522 -249 q 424 -296 469 -296 z "},"à":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 378 896 l 218 1090 l 357 1090 l 510 896 l 378 896 z "},"ả":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 365 896 l 435 983 q 454 1028 454 1010 q 410 1056 454 1056 l 299 1056 l 299 1146 l 444 1146 q 530 1119 497 1146 q 563 1043 563 1092 q 539 968 563 999 l 483 896 l 365 896 z "},"ā":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 201 931 l 201 1035 l 646 1035 l 646 931 l 201 931 z "},"ą":{"ha":833,"x_min":90,"x_max":779,"o":"m 671 -282 q 548 -245 594 -282 q 501 -153 501 -208 q 528 -72 501 -112 q 619 14 554 -32 l 708 0 q 640 -69 661 -39 q 619 -129 619 -100 q 640 -179 619 -160 q 696 -199 661 -199 l 779 -199 l 779 -282 l 671 -282 m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 z "},"å":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 424 844 q 303 888 349 844 q 257 1003 257 932 q 303 1117 257 1074 q 424 1161 349 1161 q 544 1117 499 1161 q 590 1003 590 1074 q 544 888 590 932 q 424 844 499 844 m 424 918 q 484 941 461 918 q 507 1003 507 964 q 484 1065 507 1042 q 424 1089 461 1089 q 363 1065 386 1089 q 340 1003 340 1042 q 363 941 340 964 q 424 918 386 918 z "},"ã":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 m 521 903 q 453 917 479 903 q 408 951 426 932 q 374 985 390 971 q 333 1000 357 1000 q 303 988 315 1000 q 292 951 292 976 l 292 910 l 201 910 l 201 951 q 236 1049 201 1014 q 326 1083 271 1083 q 394 1069 368 1083 q 439 1035 421 1054 q 474 1001 457 1015 q 514 986 490 986 q 544 998 533 986 q 556 1035 556 1010 l 556 1076 l 646 1076 l 646 1035 q 612 938 646 972 q 521 903 578 903 z "},"æ":{"ha":833,"x_min":49,"x_max":785,"o":"m 236 -14 q 99 39 150 -14 q 49 181 49 92 l 49 264 q 106 401 49 350 q 261 451 164 451 l 364 451 l 364 554 q 342 643 364 615 q 271 671 319 671 q 208 647 232 671 q 183 583 183 624 l 65 583 q 116 724 65 671 q 250 778 167 778 q 340 760 304 778 q 395 716 376 742 q 418 667 414 690 l 424 667 q 446 716 428 690 q 498 760 464 742 q 583 778 532 778 q 731 718 678 778 q 785 556 785 658 l 785 354 l 476 354 l 476 208 q 502 125 476 157 q 569 93 528 93 q 640 117 614 93 q 667 181 667 140 l 785 181 q 729 40 785 93 q 583 -14 674 -14 q 497 4 532 -14 q 445 48 463 22 q 424 97 428 74 l 418 97 q 393 48 414 74 q 334 4 372 22 q 236 -14 296 -14 m 264 93 q 336 125 308 93 q 364 208 364 157 l 364 354 l 264 354 q 197 330 221 354 q 174 264 174 306 l 174 181 q 198 117 174 140 q 264 93 222 93 m 476 451 l 667 451 l 667 556 q 641 640 667 608 q 569 671 615 671 q 501 640 526 671 q 476 556 476 608 l 476 451 z "},"ǽ":{"ha":833,"x_min":49,"x_max":785,"o":"m 236 -14 q 99 39 150 -14 q 49 181 49 92 l 49 264 q 106 401 49 350 q 261 451 164 451 l 364 451 l 364 554 q 342 643 364 615 q 271 671 319 671 q 208 647 232 671 q 183 583 183 624 l 65 583 q 116 724 65 671 q 250 778 167 778 q 340 760 304 778 q 395 716 376 742 q 418 667 414 690 l 424 667 q 446 716 428 690 q 498 760 464 742 q 583 778 532 778 q 731 718 678 778 q 785 556 785 658 l 785 354 l 476 354 l 476 208 q 502 125 476 157 q 569 93 528 93 q 640 117 614 93 q 667 181 667 140 l 785 181 q 729 40 785 93 q 583 -14 674 -14 q 497 4 532 -14 q 445 48 463 22 q 424 97 428 74 l 418 97 q 393 48 414 74 q 334 4 372 22 q 236 -14 296 -14 m 264 93 q 336 125 308 93 q 364 208 364 157 l 364 354 l 264 354 q 197 330 221 354 q 174 264 174 306 l 174 181 q 198 117 174 140 q 264 93 222 93 m 476 451 l 667 451 l 667 556 q 641 640 667 608 q 569 671 615 671 q 501 640 526 671 q 476 556 476 608 l 476 451 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"b":{"ha":833,"x_min":128,"x_max":715,"o":"m 461 -14 q 310 37 367 -14 q 253 175 253 88 l 278 146 l 253 146 l 253 0 l 128 0 l 128 1014 l 253 1014 l 253 792 l 250 618 l 278 618 l 253 589 q 310 726 253 675 q 461 778 368 778 q 646 701 576 778 q 715 493 715 625 l 715 269 q 646 63 715 139 q 461 -14 576 -14 m 419 94 q 544 142 499 94 q 590 278 590 189 l 590 486 q 544 622 590 575 q 419 669 499 669 q 298 621 343 669 q 253 486 253 572 l 253 278 q 298 143 253 192 q 419 94 343 94 z "},"c":{"ha":833,"x_min":118,"x_max":719,"o":"m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 z "},"ć":{"ha":833,"x_min":118,"x_max":719,"o":"m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 m 342 896 l 489 1090 l 624 1090 l 469 896 l 342 896 z "},"č":{"ha":833,"x_min":118,"x_max":719,"o":"m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 m 365 896 l 171 1090 l 308 1090 l 422 982 l 533 1090 l 674 1090 l 481 896 l 365 896 z "},"ç":{"ha":833,"x_min":118,"x_max":719,"o":"m 290 -282 l 290 -206 l 388 -206 q 437 -190 418 -206 q 456 -156 456 -174 q 417 -114 456 -132 q 310 -96 379 -96 l 358 36 l 438 36 l 408 -49 q 483 -67 444 -53 q 549 -106 522 -81 q 575 -167 575 -131 q 529 -248 575 -214 q 408 -282 483 -282 l 290 -282 m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 z "},"ĉ":{"ha":833,"x_min":118,"x_max":719,"o":"m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ċ":{"ha":833,"x_min":118,"x_max":719,"o":"m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 m 417 901 q 344 925 371 901 q 318 989 318 949 q 344 1055 318 1031 q 417 1079 371 1079 q 489 1055 463 1079 q 515 989 515 1031 q 489 925 515 949 q 417 901 463 901 z "},"d":{"ha":833,"x_min":118,"x_max":706,"o":"m 372 -14 q 188 63 258 -14 q 118 269 118 139 l 118 493 q 188 701 118 625 q 372 778 257 778 q 524 726 467 778 q 581 589 581 675 l 556 618 l 583 618 l 581 792 l 581 1014 l 706 1014 l 706 0 l 581 0 l 581 146 l 556 146 l 581 175 q 524 37 581 88 q 372 -14 467 -14 m 414 94 q 536 143 492 94 q 581 278 581 192 l 581 486 q 536 621 581 572 q 414 669 492 669 q 289 622 335 669 q 243 486 243 575 l 243 278 q 289 142 243 189 q 414 94 335 94 z "},"ð":{"ha":833,"x_min":97,"x_max":736,"o":"m 415 -14 q 249 25 321 -14 q 137 135 176 64 q 97 299 97 206 q 134 460 97 392 q 237 567 171 529 q 390 606 303 606 q 463 593 431 606 q 517 563 494 581 q 549 528 539 544 l 568 528 q 540 578 563 542 q 479 667 518 615 l 389 793 l 163 688 l 163 799 l 329 876 l 229 1014 l 374 1014 l 435 925 l 640 1021 l 640 910 l 493 842 l 601 685 q 699 497 663 596 q 736 310 736 399 q 696 140 736 213 q 584 26 656 67 q 415 -14 513 -14 m 415 97 q 558 153 504 97 q 611 299 611 208 q 587 405 611 360 q 519 475 563 450 q 415 500 475 500 q 276 444 329 500 q 222 299 222 389 q 276 153 222 208 q 415 97 329 97 z "},"ď":{"ha":833,"x_min":88,"x_max":833,"o":"m 708 764 l 708 1014 l 833 1014 l 819 764 l 708 764 m 317 -14 q 149 61 211 -14 q 88 263 88 136 l 88 500 q 149 703 88 628 q 317 778 211 778 q 453 726 403 778 q 504 589 504 675 l 479 618 l 507 618 l 504 792 l 504 1014 l 629 1014 l 629 0 l 504 0 l 504 146 l 479 146 l 504 175 q 453 38 504 89 q 317 -14 403 -14 m 358 94 q 466 141 428 94 q 504 271 504 188 l 504 493 q 466 623 504 576 q 358 669 428 669 q 251 623 290 669 q 213 493 213 576 l 213 271 q 251 141 213 188 q 358 94 290 94 z "},"đ":{"ha":833,"x_min":125,"x_max":833,"o":"m 372 -14 q 192 63 258 -14 q 125 269 125 139 l 125 410 q 191 618 125 542 q 372 694 257 694 q 522 643 467 694 q 578 506 578 592 l 553 535 l 581 535 l 578 708 l 578 1014 l 703 1014 l 703 0 l 578 0 l 578 146 l 553 146 l 578 175 q 522 37 578 88 q 372 -14 467 -14 m 414 94 q 535 143 492 94 q 578 278 578 192 l 578 403 q 535 538 578 489 q 414 586 492 586 q 292 539 335 586 q 250 403 250 492 l 250 278 q 292 142 250 189 q 414 94 335 94 m 347 792 l 347 896 l 833 896 l 833 792 l 347 792 z "},"e":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 z "},"é":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ĕ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 417 889 q 256 944 317 889 q 194 1090 194 1000 l 293 1090 q 326 1003 293 1036 q 415 969 360 969 q 506 1003 472 969 q 540 1090 540 1036 l 639 1090 q 578 944 639 1000 q 417 889 517 889 z "},"ě":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 360 896 l 165 1090 l 303 1090 l 417 982 l 528 1090 l 668 1090 l 475 896 l 360 896 z "},"ê":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ế":{"ha":833,"x_min":118,"x_max":868,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 569 1056 l 729 1250 l 868 1250 l 701 1056 l 569 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ệ":{"ha":833,"x_min":118,"x_max":715,"o":"m 171 896 l 364 1090 l 479 1090 l 674 896 l 536 896 l 422 1004 l 311 896 l 171 896 m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"ề":{"ha":833,"x_min":118,"x_max":757,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 625 1056 l 444 1250 l 583 1250 l 757 1056 l 625 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ể":{"ha":833,"x_min":118,"x_max":764,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 588 1056 l 650 1140 q 663 1174 663 1160 q 651 1199 663 1190 q 618 1208 639 1208 l 549 1208 l 549 1292 l 625 1292 q 726 1264 689 1292 q 764 1188 764 1236 q 758 1158 764 1172 q 740 1125 753 1143 l 692 1056 l 588 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ễ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 508 1128 q 440 1141 465 1128 q 397 1172 414 1154 q 365 1202 381 1189 q 326 1215 350 1215 q 296 1205 307 1215 q 285 1174 285 1194 l 285 1139 l 194 1139 l 194 1167 q 231 1256 194 1222 q 325 1289 267 1289 q 395 1276 369 1289 q 437 1245 421 1263 q 468 1215 453 1228 q 507 1201 483 1201 q 549 1243 549 1201 l 549 1278 l 639 1278 l 639 1250 q 603 1161 639 1194 q 508 1128 567 1128 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ë":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ė":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 417 901 q 344 925 371 901 q 318 989 318 949 q 344 1055 318 1031 q 417 1079 371 1079 q 489 1055 463 1079 q 515 989 515 1031 q 489 925 515 949 q 417 901 463 901 z "},"ẹ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"è":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"ẻ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ē":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"ę":{"ha":833,"x_min":122,"x_max":711,"o":"m 518 -282 q 395 -245 442 -282 q 349 -153 349 -208 q 369 -85 349 -121 q 431 -14 390 -50 q 424 -14 428 -14 q 417 -14 419 -14 q 260 22 326 -14 q 158 124 194 58 q 122 278 122 190 l 122 486 q 158 640 122 575 q 260 742 194 706 q 417 778 326 778 q 573 742 507 778 q 675 640 639 706 q 711 486 711 575 l 711 351 l 244 351 l 244 278 q 288 140 244 188 q 417 92 332 92 q 531 117 489 92 q 583 194 574 143 l 708 194 q 667 90 701 135 q 578 19 632 46 l 556 1 q 488 -69 508 -37 q 467 -129 467 -100 q 488 -179 467 -160 q 543 -199 508 -199 l 626 -199 l 626 -282 l 518 -282 m 589 390 l 589 486 q 546 625 589 576 q 417 674 503 674 q 288 625 332 674 q 244 486 244 576 l 244 446 l 644 446 l 589 390 z "},"ẽ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"ə":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 261 22 326 -14 q 160 124 196 58 q 125 278 125 190 l 125 413 l 586 413 l 586 486 q 544 624 586 576 q 417 672 503 672 q 304 647 344 672 q 253 569 264 621 l 128 569 q 218 722 140 665 q 417 778 296 778 q 572 742 507 778 q 673 640 638 706 q 708 486 708 575 l 708 278 q 673 124 708 190 q 572 22 638 58 q 417 -14 507 -14 m 417 90 q 544 139 503 90 q 586 278 586 188 l 586 318 l 238 318 l 247 329 l 247 278 q 290 139 247 188 q 417 90 332 90 z "},"f":{"ha":833,"x_min":83,"x_max":743,"o":"m 306 0 l 306 574 l 83 574 l 83 688 l 306 688 l 306 819 q 363 962 306 910 q 519 1014 419 1014 l 743 1014 l 743 900 l 519 900 q 453 880 476 900 q 431 819 431 860 l 431 688 l 743 688 l 743 574 l 431 574 l 431 0 l 306 0 z "},"g":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 z "},"ǵ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 332 896 l 479 1090 l 614 1090 l 460 896 l 332 896 z "},"ğ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 413 889 q 251 944 313 889 q 190 1090 190 1000 l 289 1090 q 322 1003 289 1036 q 411 969 356 969 q 502 1003 468 969 q 536 1090 536 1036 l 635 1090 q 574 944 635 1000 q 413 889 513 889 z "},"ǧ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 356 896 l 161 1090 l 299 1090 l 413 982 l 524 1090 l 664 1090 l 471 896 l 356 896 z "},"ĝ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 161 896 l 354 1090 l 469 1090 l 664 896 l 526 896 l 413 1004 l 301 896 l 161 896 z "},"ģ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 572 1222 l 461 896 l 288 896 l 468 1222 l 572 1222 z "},"ġ":{"ha":833,"x_min":122,"x_max":704,"o":"m 224 -250 l 224 -136 l 467 -136 q 552 -110 525 -136 q 579 -28 579 -83 l 579 69 l 582 208 l 557 208 l 581 229 q 525 97 581 146 q 376 49 469 49 q 190 126 258 49 q 122 333 122 203 l 122 494 q 190 701 122 625 q 376 778 258 778 q 525 729 469 778 q 581 597 581 681 l 557 618 l 581 618 l 581 764 l 704 764 l 704 -28 q 641 -190 704 -131 q 465 -250 578 -250 l 224 -250 m 414 157 q 536 206 492 157 q 581 340 581 254 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 340 q 291 204 247 251 q 414 157 335 157 m 413 901 q 340 925 367 901 q 314 989 314 949 q 340 1055 314 1031 q 413 1079 367 1079 q 485 1055 458 1079 q 511 989 511 1031 q 485 925 511 949 q 413 901 458 901 z "},"h":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 1014 l 253 1014 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 627 583 582 q 421 672 496 672 q 298 624 343 672 q 253 486 253 575 l 253 0 l 128 0 z "},"ħ":{"ha":833,"x_min":0,"x_max":708,"o":"m 0 792 l 0 896 l 128 896 l 128 1014 l 253 1014 l 253 896 l 486 896 l 486 792 l 253 792 l 253 681 l 253 535 l 254 535 q 317 653 264 611 q 457 694 369 694 q 640 624 572 694 q 708 431 708 553 l 708 0 l 583 0 l 583 417 q 540 544 583 499 q 421 589 496 589 q 298 540 343 589 q 253 403 253 492 l 253 0 l 128 0 l 128 792 l 0 792 z "},"ĥ":{"ha":833,"x_min":-43,"x_max":708,"o":"m 128 0 l 128 1014 l 253 1014 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 627 583 582 q 421 672 496 672 q 298 624 343 672 q 253 486 253 575 l 253 0 l 128 0 m -43 1118 l 150 1313 l 265 1313 l 460 1118 l 322 1118 l 208 1226 l 97 1118 l -43 1118 z "},"i":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 438 901 q 365 925 392 901 q 339 989 339 949 q 365 1055 339 1031 q 438 1079 392 1079 q 510 1055 483 1079 q 536 989 536 1031 q 510 925 536 949 q 438 901 483 901 z "},"ı":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 z "},"í":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 357 896 l 504 1090 l 639 1090 l 485 896 l 357 896 z "},"ĭ":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 438 889 q 276 944 338 889 q 215 1090 215 1000 l 314 1090 q 347 1003 314 1036 q 436 969 381 969 q 527 1003 493 969 q 561 1090 561 1036 l 660 1090 q 599 944 660 1000 q 438 889 538 889 z "},"î":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 186 896 l 379 1090 l 494 1090 l 689 896 l 551 896 l 438 1004 l 326 896 l 186 896 z "},"ï":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 592 901 q 527 925 551 901 q 503 989 503 949 q 527 1055 503 1031 q 592 1079 551 1079 q 656 1055 632 1079 q 681 989 681 1031 q 656 925 681 949 q 592 901 632 901 m 283 901 q 219 925 243 901 q 194 989 194 949 q 219 1055 194 1031 q 283 1079 243 1079 q 348 1055 324 1079 q 372 989 372 1031 q 348 925 372 949 q 283 901 324 901 z "},"ị":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 438 901 q 365 925 392 901 q 339 989 339 949 q 365 1055 339 1031 q 438 1079 392 1079 q 510 1055 483 1079 q 536 989 536 1031 q 510 925 536 949 q 438 901 483 901 m 438 -296 q 365 -272 392 -296 q 339 -208 339 -249 q 365 -142 339 -167 q 438 -118 392 -118 q 510 -142 483 -118 q 536 -208 536 -167 q 510 -272 536 -249 q 438 -296 483 -296 z "},"ì":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 392 896 l 232 1090 l 371 1090 l 524 896 l 392 896 z "},"ỉ":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 383 896 l 453 983 q 472 1028 472 1010 q 428 1056 472 1056 l 317 1056 l 317 1146 l 463 1146 q 548 1119 515 1146 q 581 1043 581 1092 q 557 968 581 999 l 501 896 l 383 896 z "},"ī":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 215 931 l 215 1035 l 660 1035 l 660 931 l 215 931 z "},"į":{"ha":833,"x_min":118,"x_max":771,"o":"m 447 -282 q 324 -245 371 -282 q 278 -153 278 -208 q 304 -72 278 -112 q 396 14 331 -32 l 500 14 l 485 1 q 417 -69 438 -37 q 396 -129 396 -100 q 417 -179 396 -160 q 472 -199 438 -199 l 556 -199 l 556 -282 l 447 -282 m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 438 901 q 365 925 392 901 q 339 989 339 949 q 365 1055 339 1031 q 438 1079 392 1079 q 510 1055 483 1079 q 536 989 536 1031 q 510 925 536 949 q 438 901 483 901 z "},"ĩ":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 535 903 q 467 917 493 903 q 422 951 440 932 q 388 985 404 971 q 347 1000 371 1000 q 317 988 329 1000 q 306 951 306 976 l 306 910 l 215 910 l 215 951 q 250 1049 215 1014 q 340 1083 285 1083 q 408 1069 382 1083 q 453 1035 435 1054 q 488 1001 471 1015 q 528 986 504 986 q 558 998 547 986 q 569 1035 569 1010 l 569 1076 l 660 1076 l 660 1035 q 626 938 660 972 q 535 903 592 903 z "},"j":{"ha":833,"x_min":118,"x_max":633,"o":"m 118 -250 l 118 -135 l 297 -135 q 431 -88 383 -135 q 479 43 479 -42 l 479 650 l 160 650 l 160 764 l 604 764 l 604 43 q 521 -171 604 -92 q 297 -250 438 -250 l 118 -250 m 535 901 q 463 925 489 901 q 436 989 436 949 q 463 1055 436 1031 q 535 1079 489 1079 q 607 1055 581 1079 q 633 989 633 1031 q 607 925 633 949 q 535 901 581 901 z "},"ȷ":{"ha":833,"x_min":118,"x_max":604,"o":"m 118 -250 l 118 -135 l 297 -135 q 431 -88 383 -135 q 479 43 479 -42 l 479 650 l 160 650 l 160 764 l 604 764 l 604 43 q 521 -171 604 -92 q 297 -250 438 -250 l 118 -250 z "},"ĵ":{"ha":833,"x_min":118,"x_max":703,"o":"m 118 -250 l 118 -135 l 297 -135 q 431 -88 383 -135 q 479 43 479 -42 l 479 650 l 160 650 l 160 764 l 604 764 l 604 43 q 521 -171 604 -92 q 297 -250 438 -250 l 118 -250 m 200 896 l 393 1090 l 508 1090 l 703 896 l 565 896 l 451 1004 l 340 896 l 200 896 z "},"k":{"ha":833,"x_min":132,"x_max":774,"o":"m 132 0 l 132 1014 l 257 1014 l 257 449 l 404 449 l 626 764 l 769 764 l 513 400 l 774 0 l 628 0 l 406 340 l 257 340 l 257 0 l 132 0 z "},"ķ":{"ha":833,"x_min":132,"x_max":774,"o":"m 132 0 l 132 1014 l 257 1014 l 257 449 l 404 449 l 626 764 l 769 764 l 513 400 l 774 0 l 628 0 l 406 340 l 257 340 l 257 0 l 132 0 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"ĸ":{"ha":833,"x_min":135,"x_max":760,"o":"m 135 0 l 135 764 l 260 764 l 260 449 l 390 449 l 613 764 l 756 764 l 499 400 l 760 0 l 614 0 l 392 340 l 260 340 l 260 0 l 135 0 z "},"l":{"ha":833,"x_min":42,"x_max":764,"o":"m 521 0 q 404 26 454 0 q 326 101 354 53 q 299 215 299 150 l 299 900 l 42 900 l 42 1014 l 424 1014 l 424 215 q 450 141 424 168 q 521 114 476 114 l 764 114 l 764 0 l 521 0 z "},"ĺ":{"ha":833,"x_min":42,"x_max":764,"o":"m 521 0 q 404 26 454 0 q 326 101 354 53 q 299 215 299 150 l 299 900 l 42 900 l 42 1014 l 424 1014 l 424 215 q 450 141 424 168 q 521 114 476 114 l 764 114 l 764 0 l 521 0 m 267 1125 l 414 1319 l 549 1319 l 394 1125 l 267 1125 z "},"ľ":{"ha":833,"x_min":42,"x_max":764,"o":"m 521 0 q 404 26 454 0 q 326 101 354 53 q 299 215 299 150 l 299 900 l 42 900 l 42 1014 l 424 1014 l 424 215 q 450 141 424 168 q 521 114 476 114 l 764 114 l 764 0 l 521 0 m 618 764 l 632 1014 l 750 1014 l 722 764 l 618 764 z "},"ļ":{"ha":833,"x_min":42,"x_max":764,"o":"m 521 0 q 404 26 454 0 q 326 101 354 53 q 299 215 299 150 l 299 900 l 42 900 l 42 1014 l 424 1014 l 424 215 q 450 141 424 168 q 521 114 476 114 l 764 114 l 764 0 l 521 0 m 292 -333 l 424 -132 l 569 -132 l 424 -333 l 292 -333 z "},"ŀ":{"ha":833,"x_min":14,"x_max":875,"o":"m 493 0 q 376 26 426 0 q 299 101 326 53 q 271 215 271 150 l 271 900 l 14 900 l 14 1014 l 396 1014 l 396 215 q 422 141 396 168 q 493 114 449 114 l 736 114 l 736 0 l 493 0 z "},"ł":{"ha":833,"x_min":42,"x_max":764,"o":"m 139 319 l 139 431 l 653 778 l 653 667 l 139 319 m 521 0 q 404 26 454 0 q 326 101 354 53 q 299 215 299 150 l 299 900 l 42 900 l 42 1014 l 424 1014 l 424 215 q 450 141 424 168 q 521 114 476 114 l 764 114 l 764 0 l 521 0 z "},"m":{"ha":833,"x_min":92,"x_max":742,"o":"m 92 0 l 92 764 l 201 764 l 201 672 l 226 672 l 207 639 q 241 740 207 703 q 333 778 275 778 q 432 731 397 778 q 467 597 467 683 l 429 672 l 488 672 l 461 639 q 497 740 461 703 q 590 778 532 778 q 702 724 663 778 q 742 581 742 669 l 742 0 l 626 0 l 626 582 q 606 656 626 629 q 547 682 586 682 q 488 656 510 682 q 467 583 467 631 l 467 0 l 367 0 l 367 582 q 345 656 367 631 q 285 682 324 682 q 226 656 246 682 q 207 583 207 631 l 207 0 l 92 0 z "},"n":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 z "},"ń":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 m 343 896 l 490 1090 l 625 1090 l 471 896 l 343 896 z "},"ŉ":{"ha":833,"x_min":0,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 m 0 896 l 132 1097 l 278 1097 l 132 896 l 0 896 z "},"ň":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 m 367 896 l 172 1090 l 310 1090 l 424 982 l 535 1090 l 675 1090 l 482 896 l 367 896 z "},"ņ":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"ŋ":{"ha":833,"x_min":131,"x_max":706,"o":"m 333 -250 l 333 -136 l 421 -136 q 538 -94 494 -136 q 581 21 581 -51 l 581 500 q 538 627 581 582 q 421 672 496 672 q 299 624 343 672 q 256 486 256 575 l 256 0 l 131 0 l 131 764 l 256 764 l 256 618 l 282 618 l 256 589 q 308 728 256 679 q 457 778 361 778 q 639 707 572 778 q 706 514 706 636 l 706 21 q 670 -122 706 -61 q 571 -217 635 -183 q 421 -250 507 -250 l 333 -250 z "},"ñ":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 0 l 583 0 l 583 500 q 540 626 583 582 q 421 669 496 669 q 298 622 343 669 q 253 486 253 575 l 253 0 l 128 0 m 521 903 q 453 917 479 903 q 408 951 426 932 q 374 985 390 971 q 333 1000 357 1000 q 303 988 315 1000 q 292 951 292 976 l 292 910 l 201 910 l 201 951 q 236 1049 201 1014 q 326 1083 271 1083 q 394 1069 368 1083 q 439 1035 421 1054 q 474 1001 457 1015 q 514 986 490 986 q 544 998 533 986 q 556 1035 556 1010 l 556 1076 l 646 1076 l 646 1035 q 612 938 646 972 q 521 903 578 903 z "},"o":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 z "},"ó":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ŏ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 417 889 q 256 944 317 889 q 194 1090 194 1000 l 293 1090 q 326 1003 293 1036 q 415 969 360 969 q 506 1003 472 969 q 540 1090 540 1036 l 639 1090 q 578 944 639 1000 q 417 889 517 889 z "},"ô":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ố":{"ha":833,"x_min":118,"x_max":868,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 569 1056 l 729 1250 l 868 1250 l 701 1056 l 569 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ộ":{"ha":833,"x_min":118,"x_max":715,"o":"m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"ồ":{"ha":833,"x_min":118,"x_max":757,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 625 1056 l 444 1250 l 583 1250 l 757 1056 l 625 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ổ":{"ha":833,"x_min":118,"x_max":764,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 588 1056 l 650 1140 q 663 1174 663 1160 q 651 1199 663 1190 q 618 1208 639 1208 l 549 1208 l 549 1292 l 625 1292 q 726 1264 689 1292 q 764 1188 764 1236 q 758 1158 764 1172 q 740 1125 753 1143 l 692 1056 l 588 1056 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ỗ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 508 1128 q 440 1141 465 1128 q 397 1172 414 1154 q 365 1202 381 1189 q 326 1215 350 1215 q 296 1205 307 1215 q 285 1174 285 1194 l 285 1139 l 194 1139 l 194 1167 q 231 1256 194 1222 q 325 1289 267 1289 q 395 1276 369 1289 q 437 1245 421 1263 q 468 1215 453 1228 q 507 1201 483 1201 q 549 1243 549 1201 l 549 1278 l 639 1278 l 639 1250 q 603 1161 639 1194 q 508 1128 567 1128 m 167 896 l 358 1090 l 475 1090 l 668 896 l 528 896 l 417 1004 l 304 896 l 167 896 z "},"ö":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ọ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"ò":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"ỏ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ơ":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 z "},"ớ":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 322 896 l 469 1090 l 604 1090 l 450 896 l 322 896 z "},"ợ":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 431 -296 q 358 -272 385 -296 q 332 -208 332 -249 q 358 -142 332 -167 q 431 -118 385 -118 q 503 -142 476 -118 q 529 -208 529 -167 q 503 -272 529 -249 q 431 -296 476 -296 z "},"ờ":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 357 896 l 197 1090 l 336 1090 l 489 896 l 357 896 z "},"ở":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ỡ":{"ha":833,"x_min":118,"x_max":750,"o":"m 550 646 l 550 736 l 597 736 q 633 749 621 736 q 646 785 646 761 l 646 889 l 750 889 l 750 778 q 710 682 750 718 q 604 646 669 646 l 550 646 m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 500 903 q 432 917 458 903 q 388 951 406 932 q 353 985 369 971 q 313 1000 336 1000 q 283 988 294 1000 q 271 951 271 976 l 271 910 l 181 910 l 181 951 q 215 1049 181 1014 q 306 1083 250 1083 q 374 1069 347 1083 q 418 1035 400 1054 q 453 1001 436 1015 q 493 986 469 986 q 524 998 513 986 q 535 1035 535 1010 l 535 1076 l 625 1076 l 625 1035 q 591 938 625 972 q 500 903 557 903 z "},"ő":{"ha":833,"x_min":118,"x_max":733,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 453 896 l 606 1090 l 733 1090 l 574 896 l 453 896 m 204 896 l 357 1090 l 485 1090 l 325 896 l 204 896 z "},"ō":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"ǫ":{"ha":833,"x_min":122,"x_max":711,"o":"m 517 -282 q 394 -245 440 -282 q 347 -153 347 -208 q 365 -90 347 -122 q 429 -14 382 -57 q 426 -14 428 -14 q 422 -14 424 -14 q 417 -14 419 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 486 q 158 643 122 578 q 259 743 193 708 q 417 778 325 778 q 574 743 508 778 q 676 643 640 708 q 711 488 711 578 l 711 278 q 679 128 711 192 q 588 29 647 65 l 554 1 q 486 -69 507 -37 q 465 -129 465 -100 q 486 -179 465 -160 q 542 -199 507 -199 l 625 -199 l 625 -282 l 517 -282 m 417 97 q 542 143 499 97 q 586 278 586 189 l 586 486 q 542 621 586 575 q 417 667 499 667 q 292 621 336 667 q 247 486 247 575 l 247 278 q 292 143 247 189 q 417 97 336 97 z "},"ø":{"ha":833,"x_min":49,"x_max":785,"o":"m 49 -42 l 658 819 l 785 819 l 174 -42 l 49 -42 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 486 q 158 643 122 578 q 259 743 193 708 q 417 778 325 778 q 574 743 508 778 q 676 643 640 708 q 711 488 711 578 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 97 q 547 145 500 97 q 593 278 593 193 l 593 486 q 547 619 593 572 q 417 667 500 667 q 287 619 333 667 q 240 486 240 572 l 240 278 q 287 145 240 193 q 417 97 333 97 z "},"ǿ":{"ha":833,"x_min":49,"x_max":785,"o":"m 49 -42 l 658 819 l 785 819 l 174 -42 l 49 -42 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 486 q 158 643 122 578 q 259 743 193 708 q 417 778 325 778 q 574 743 508 778 q 676 643 640 708 q 711 488 711 578 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 97 q 547 145 500 97 q 593 278 593 193 l 593 486 q 547 619 593 572 q 417 667 500 667 q 287 619 333 667 q 240 486 240 572 l 240 278 q 287 145 240 193 q 417 97 333 97 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"õ":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"œ":{"ha":833,"x_min":49,"x_max":785,"o":"m 250 -14 q 103 47 157 -14 q 49 208 49 107 l 49 556 q 103 718 49 658 q 250 778 157 778 q 341 760 306 778 q 394 716 376 742 q 414 667 413 690 l 419 667 q 440 716 422 690 q 492 760 457 742 q 583 778 528 778 q 731 718 676 778 q 785 556 785 658 l 785 347 l 476 347 l 476 208 q 501 124 476 156 q 569 93 526 93 q 631 115 606 93 q 663 174 657 138 l 781 174 q 714 37 767 88 q 583 -14 661 -14 q 492 4 528 -14 q 440 48 457 22 q 419 97 422 74 l 414 97 q 394 48 413 74 q 341 4 376 22 q 250 -14 306 -14 m 264 93 q 332 124 307 93 q 357 208 357 156 l 357 556 q 332 640 357 608 q 264 671 307 671 q 193 640 219 671 q 167 556 167 608 l 167 208 q 193 124 167 156 q 264 93 219 93 m 476 449 l 667 449 l 667 556 q 640 640 667 608 q 569 671 614 671 q 501 640 526 671 q 476 556 476 608 l 476 449 z "},"p":{"ha":833,"x_min":128,"x_max":715,"o":"m 128 -250 l 128 764 l 253 764 l 253 618 l 278 618 l 253 589 q 310 727 253 676 q 463 778 368 778 q 647 702 578 778 q 715 494 715 626 l 715 271 q 684 119 715 183 q 597 21 653 56 q 463 -14 540 -14 q 311 38 369 -14 q 253 175 253 89 l 278 146 l 250 146 l 253 -28 l 253 -250 l 128 -250 m 421 94 q 545 142 500 94 q 590 278 590 189 l 590 486 q 545 622 590 575 q 421 669 500 669 q 299 621 344 669 q 253 486 253 572 l 253 278 q 299 143 253 192 q 421 94 344 94 z "},"þ":{"ha":833,"x_min":121,"x_max":708,"o":"m 121 -236 l 121 82 l 246 82 l 246 -236 l 121 -236 m 454 -14 q 303 37 360 -14 q 246 175 246 88 l 271 146 l 246 146 l 246 0 l 121 0 l 121 1014 l 246 1014 l 246 792 l 243 618 l 271 618 l 246 589 q 303 726 246 675 q 454 778 361 778 q 639 701 569 778 q 708 493 708 625 l 708 269 q 639 63 708 139 q 454 -14 569 -14 m 413 94 q 538 142 492 94 q 583 278 583 189 l 583 486 q 538 622 583 575 q 413 669 492 669 q 291 621 336 669 q 246 486 246 572 l 246 278 q 291 143 246 192 q 413 94 336 94 z "},"q":{"ha":833,"x_min":122,"x_max":706,"o":"m 581 -250 l 581 -28 l 583 146 l 556 146 l 581 175 q 524 38 581 89 q 372 -14 467 -14 q 190 63 257 -14 q 122 271 122 139 l 122 494 q 190 702 122 626 q 372 778 258 778 q 524 727 467 778 q 581 589 581 676 l 556 618 l 581 618 l 581 764 l 706 764 l 706 -250 l 581 -250 m 414 94 q 536 143 492 94 q 581 278 581 192 l 581 486 q 536 621 581 572 q 414 669 492 669 q 291 622 335 669 q 247 486 247 575 l 247 278 q 291 142 247 189 q 414 94 335 94 z "},"r":{"ha":833,"x_min":154,"x_max":742,"o":"m 154 0 l 154 764 l 276 764 l 276 618 l 306 618 l 265 528 q 319 715 265 651 q 478 778 372 778 q 670 702 599 778 q 742 497 742 626 l 742 451 l 617 451 l 617 486 q 573 624 617 576 q 449 672 529 672 q 324 624 369 672 q 279 486 279 575 l 279 0 l 154 0 z "},"ŕ":{"ha":833,"x_min":154,"x_max":742,"o":"m 154 0 l 154 764 l 276 764 l 276 618 l 306 618 l 265 528 q 319 715 265 651 q 478 778 372 778 q 670 702 599 778 q 742 497 742 626 l 742 451 l 617 451 l 617 486 q 573 624 617 576 q 449 672 529 672 q 324 624 369 672 q 279 486 279 575 l 279 0 l 154 0 m 364 896 l 511 1090 l 646 1090 l 492 896 l 364 896 z "},"ř":{"ha":833,"x_min":154,"x_max":742,"o":"m 154 0 l 154 764 l 276 764 l 276 618 l 306 618 l 265 528 q 319 715 265 651 q 478 778 372 778 q 670 702 599 778 q 742 497 742 626 l 742 451 l 617 451 l 617 486 q 573 624 617 576 q 449 672 529 672 q 324 624 369 672 q 279 486 279 575 l 279 0 l 154 0 m 388 896 l 193 1090 l 331 1090 l 444 982 l 556 1090 l 696 1090 l 503 896 l 388 896 z "},"ŗ":{"ha":833,"x_min":35,"x_max":742,"o":"m 154 0 l 154 764 l 276 764 l 276 618 l 306 618 l 265 528 q 319 715 265 651 q 478 778 372 778 q 670 702 599 778 q 742 497 742 626 l 742 451 l 617 451 l 617 486 q 573 624 617 576 q 449 672 529 672 q 324 624 369 672 q 279 486 279 575 l 279 0 l 154 0 m 35 -333 l 167 -132 l 313 -132 l 167 -333 l 35 -333 z "},"s":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 z "},"ś":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 m 350 896 l 497 1090 l 632 1090 l 478 896 l 350 896 z "},"š":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 m 374 896 l 179 1090 l 317 1090 l 431 982 l 542 1090 l 682 1090 l 489 896 l 374 896 z "},"ş":{"ha":833,"x_min":125,"x_max":722,"o":"m 299 -282 l 299 -206 l 396 -206 q 445 -190 426 -206 q 464 -156 464 -174 q 426 -114 464 -132 q 318 -96 388 -96 l 367 36 l 446 36 l 417 -49 q 492 -67 453 -53 q 557 -106 531 -81 q 583 -167 583 -131 q 538 -248 583 -214 q 417 -282 492 -282 l 299 -282 m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 z "},"ŝ":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 m 179 896 l 372 1090 l 488 1090 l 682 896 l 544 896 l 431 1004 l 319 896 l 179 896 z "},"ș":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 m 249 -333 l 381 -132 l 526 -132 l 381 -333 l 249 -333 z "},"ß":{"ha":833,"x_min":128,"x_max":736,"o":"m 128 0 l 128 742 q 164 892 128 828 q 266 992 200 957 q 421 1028 332 1028 q 576 998 510 1028 q 680 910 643 968 q 717 769 717 853 q 687 646 717 700 q 602 561 657 592 q 472 532 547 531 l 472 553 q 612 522 553 554 q 703 431 671 490 q 736 289 736 371 q 699 139 736 204 q 594 37 661 74 q 438 0 528 0 l 346 0 l 346 114 l 424 114 q 556 163 507 114 q 604 293 604 213 q 556 419 604 374 q 424 465 508 465 l 363 465 l 363 574 l 421 574 q 542 622 499 574 q 586 744 586 671 q 542 869 586 825 q 421 914 497 914 q 299 868 344 914 q 253 742 253 822 l 253 0 l 128 0 z "},"ſ":{"ha":833,"x_min":229,"x_max":708,"o":"m 229 0 l 229 793 q 294 953 229 892 q 464 1014 358 1014 l 708 1014 l 708 903 l 464 903 q 385 872 415 903 q 354 792 354 842 l 354 0 l 229 0 z "},"t":{"ha":833,"x_min":76,"x_max":722,"o":"m 500 0 q 347 53 401 0 q 292 201 292 106 l 292 650 l 76 650 l 76 764 l 292 764 l 292 979 l 417 979 l 417 764 l 722 764 l 722 650 l 417 650 l 417 201 q 500 114 417 114 l 708 114 l 708 0 l 500 0 z "},"ŧ":{"ha":833,"x_min":76,"x_max":722,"o":"m 118 332 l 118 436 l 660 436 l 660 332 l 118 332 m 500 0 q 347 53 401 0 q 292 201 292 106 l 292 650 l 76 650 l 76 764 l 292 764 l 292 979 l 417 979 l 417 764 l 722 764 l 722 650 l 417 650 l 417 201 q 500 114 417 114 l 708 114 l 708 0 l 500 0 z "},"ť":{"ha":833,"x_min":76,"x_max":767,"o":"m 517 861 l 642 1078 l 767 1078 l 628 861 l 517 861 m 500 0 q 347 53 401 0 q 292 201 292 106 l 292 650 l 76 650 l 76 764 l 292 764 l 292 979 l 417 979 l 417 764 l 722 764 l 722 650 l 417 650 l 417 201 q 500 114 417 114 l 708 114 l 708 0 l 500 0 z "},"ţ":{"ha":833,"x_min":76,"x_max":722,"o":"m 368 -282 l 368 -206 l 465 -206 q 515 -190 496 -206 q 533 -156 533 -174 q 495 -114 533 -132 q 388 -96 457 -96 l 436 36 l 515 36 l 486 -49 q 561 -67 522 -53 q 626 -106 600 -81 q 653 -167 653 -131 q 607 -248 653 -214 q 486 -282 561 -282 l 368 -282 m 500 0 q 347 53 401 0 q 292 201 292 106 l 292 650 l 76 650 l 76 764 l 292 764 l 292 979 l 417 979 l 417 764 l 722 764 l 722 650 l 417 650 l 417 201 q 500 114 417 114 l 708 114 l 708 0 l 500 0 z "},"ț":{"ha":833,"x_min":76,"x_max":722,"o":"m 500 0 q 347 53 401 0 q 292 201 292 106 l 292 650 l 76 650 l 76 764 l 292 764 l 292 979 l 417 979 l 417 764 l 722 764 l 722 650 l 417 650 l 417 201 q 500 114 417 114 l 708 114 l 708 0 l 500 0 m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"u":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 z "},"ú":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ŭ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 417 889 q 256 944 317 889 q 194 1090 194 1000 l 293 1090 q 326 1003 293 1036 q 415 969 360 969 q 506 1003 472 969 q 540 1090 540 1036 l 639 1090 q 578 944 639 1000 q 417 889 517 889 z "},"û":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ü":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ụ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"ù":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"ủ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ư":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 z "},"ứ":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ự":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 m 415 -296 q 343 -272 369 -296 q 317 -208 317 -249 q 343 -142 317 -167 q 415 -118 369 -118 q 488 -142 461 -118 q 514 -208 514 -167 q 488 -272 514 -249 q 415 -296 461 -296 z "},"ừ":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"ử":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ữ":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 278 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 681 764 q 717 776 704 764 q 729 813 729 789 l 729 917 l 833 917 l 833 806 q 803 710 833 746 q 708 674 774 674 l 708 278 q 628 65 708 143 q 415 -14 547 -14 q 204 65 283 -14 q 125 278 125 143 m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"ű":{"ha":833,"x_min":125,"x_max":733,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 453 896 l 606 1090 l 733 1090 l 574 896 l 453 896 m 204 896 l 357 1090 l 485 1090 l 325 896 l 204 896 z "},"ū":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"ų":{"ha":833,"x_min":125,"x_max":708,"o":"m 517 -282 q 394 -245 440 -282 q 347 -153 347 -208 q 365 -90 347 -122 q 429 -14 382 -57 q 426 -14 428 -14 q 422 -14 424 -14 q 417 -14 419 -14 q 203 64 281 -14 q 125 278 125 142 l 125 764 l 250 764 l 250 278 q 293 143 250 189 q 417 97 336 97 q 541 143 499 97 q 583 278 583 189 l 583 764 l 708 764 l 708 278 q 678 128 708 192 q 588 29 647 65 l 554 1 q 486 -69 507 -37 q 465 -129 465 -100 q 486 -179 465 -160 q 542 -199 507 -199 l 625 -199 l 625 -282 l 517 -282 z "},"ů":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 417 844 q 296 888 342 844 q 250 1003 250 932 q 296 1117 250 1074 q 417 1161 342 1161 q 538 1117 492 1161 q 583 1003 583 1074 q 538 888 583 932 q 417 844 492 844 m 417 918 q 477 941 454 918 q 500 1003 500 964 q 477 1065 500 1042 q 417 1089 454 1089 q 356 1065 379 1089 q 333 1003 333 1042 q 356 941 333 964 q 417 918 379 918 z "},"ũ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"v":{"ha":833,"x_min":76,"x_max":757,"o":"m 332 0 l 76 764 l 204 764 l 374 250 q 401 162 389 204 q 419 96 414 119 q 439 162 426 119 q 465 250 451 204 l 631 764 l 757 764 l 501 0 l 332 0 z "},"w":{"ha":833,"x_min":49,"x_max":785,"o":"m 171 0 l 49 764 l 160 764 l 236 222 q 245 156 240 192 q 253 97 250 121 q 262 156 256 121 q 272 222 268 192 l 357 764 l 476 764 l 561 222 q 572 156 565 192 q 581 97 578 121 q 590 156 583 121 q 600 222 596 192 l 679 764 l 785 764 l 657 0 l 519 0 l 438 528 q 425 606 432 567 q 415 667 418 644 q 407 606 413 644 q 394 528 401 567 l 308 0 l 171 0 z "},"ẃ":{"ha":833,"x_min":49,"x_max":785,"o":"m 171 0 l 49 764 l 160 764 l 236 222 q 245 156 240 192 q 253 97 250 121 q 262 156 256 121 q 272 222 268 192 l 357 764 l 476 764 l 561 222 q 572 156 565 192 q 581 97 578 121 q 590 156 583 121 q 600 222 596 192 l 679 764 l 785 764 l 657 0 l 519 0 l 438 528 q 425 606 432 567 q 415 667 418 644 q 407 606 413 644 q 394 528 401 567 l 308 0 l 171 0 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ŵ":{"ha":833,"x_min":49,"x_max":785,"o":"m 171 0 l 49 764 l 160 764 l 236 222 q 245 156 240 192 q 253 97 250 121 q 262 156 256 121 q 272 222 268 192 l 357 764 l 476 764 l 561 222 q 572 156 565 192 q 581 97 578 121 q 590 156 583 121 q 600 222 596 192 l 679 764 l 785 764 l 657 0 l 519 0 l 438 528 q 425 606 432 567 q 415 667 418 644 q 407 606 413 644 q 394 528 401 567 l 308 0 l 171 0 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ẅ":{"ha":833,"x_min":49,"x_max":785,"o":"m 171 0 l 49 764 l 160 764 l 236 222 q 245 156 240 192 q 253 97 250 121 q 262 156 256 121 q 272 222 268 192 l 357 764 l 476 764 l 561 222 q 572 156 565 192 q 581 97 578 121 q 590 156 583 121 q 600 222 596 192 l 679 764 l 785 764 l 657 0 l 519 0 l 438 528 q 425 606 432 567 q 415 667 418 644 q 407 606 413 644 q 394 528 401 567 l 308 0 l 171 0 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ẁ":{"ha":833,"x_min":49,"x_max":785,"o":"m 171 0 l 49 764 l 160 764 l 236 222 q 245 156 240 192 q 253 97 250 121 q 262 156 256 121 q 272 222 268 192 l 357 764 l 476 764 l 561 222 q 572 156 565 192 q 581 97 578 121 q 590 156 583 121 q 600 222 596 192 l 679 764 l 785 764 l 657 0 l 519 0 l 438 528 q 425 606 432 567 q 415 667 418 644 q 407 606 413 644 q 394 528 401 567 l 308 0 l 171 0 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"x":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 340 393 l 86 764 l 233 764 l 385 528 q 403 494 394 513 q 418 465 413 476 q 431 494 422 476 q 450 528 440 513 l 603 764 l 749 764 l 494 392 l 764 0 l 617 0 l 453 250 q 434 285 443 265 q 418 318 425 306 q 402 285 413 306 q 381 250 392 265 l 215 0 l 69 0 z "},"y":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 z "},"ý":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ŷ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ÿ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ỵ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 639 -296 q 567 -272 593 -296 q 540 -208 540 -249 q 567 -142 540 -167 q 639 -118 593 -118 q 711 -142 685 -118 q 738 -208 738 -167 q 711 -272 738 -249 q 639 -296 685 -296 z "},"ỳ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 371 896 l 211 1090 l 350 1090 l 503 896 l 371 896 z "},"ỷ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"ȳ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"ỹ":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"z":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 125 l 553 650 l 136 650 l 136 764 l 693 764 l 693 639 l 257 114 l 708 114 l 708 0 l 125 0 z "},"ź":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 125 l 553 650 l 136 650 l 136 764 l 693 764 l 693 639 l 257 114 l 708 114 l 708 0 l 125 0 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ž":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 125 l 553 650 l 136 650 l 136 764 l 693 764 l 693 639 l 257 114 l 708 114 l 708 0 l 125 0 m 360 896 l 165 1090 l 303 1090 l 417 982 l 528 1090 l 668 1090 l 475 896 l 360 896 z "},"ż":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 125 l 553 650 l 136 650 l 136 764 l 693 764 l 693 639 l 257 114 l 708 114 l 708 0 l 125 0 m 417 901 q 344 925 371 901 q 318 989 318 949 q 344 1055 318 1031 q 417 1079 371 1079 q 489 1055 463 1079 q 515 989 515 1031 q 489 925 515 949 q 417 901 463 901 z "},"ª":{"ha":833,"x_min":243,"x_max":583,"o":"m 518 632 l 518 708 l 514 708 l 514 903 q 490 953 514 935 q 424 972 465 972 q 363 957 388 972 q 333 917 338 942 l 264 917 q 313 999 271 969 q 424 1028 356 1028 q 540 994 497 1028 q 583 903 583 961 l 583 632 l 518 632 m 381 625 q 281 658 318 625 q 243 744 243 690 q 282 831 243 799 q 389 863 321 863 l 529 863 l 529 807 l 389 807 q 333 790 353 807 q 313 744 313 774 q 336 696 313 714 q 399 678 360 678 q 483 703 453 678 q 514 771 514 728 l 529 771 l 529 708 l 514 708 q 465 647 500 669 q 381 625 429 625 z "},"º":{"ha":833,"x_min":257,"x_max":576,"o":"m 417 618 q 301 658 344 618 q 257 764 257 699 l 257 875 q 301 981 257 940 q 417 1021 344 1021 q 533 981 489 1021 q 576 875 576 940 l 576 764 q 533 658 576 699 q 417 618 489 618 m 417 674 q 482 699 457 674 q 507 764 507 724 l 507 875 q 482 940 507 915 q 417 965 457 965 q 351 940 376 965 q 326 875 326 915 l 326 764 q 351 699 326 724 q 417 674 376 674 z "},"А":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Б":{"ha":833,"x_min":131,"x_max":736,"o":"m 131 0 l 131 1014 l 694 1014 l 694 900 l 256 900 l 256 594 l 424 594 q 590 558 521 594 q 698 454 660 521 q 736 297 736 388 q 698 140 736 207 q 590 37 660 74 q 424 0 521 0 l 131 0 m 256 114 l 424 114 q 558 163 510 114 q 607 297 607 213 q 558 432 607 383 q 424 481 510 481 l 256 481 l 256 114 z "},"В":{"ha":833,"x_min":129,"x_max":736,"o":"m 129 0 l 129 1014 l 417 1014 q 634 944 556 1014 q 713 751 713 875 q 683 631 713 682 q 601 551 654 579 q 472 525 547 524 l 472 546 q 612 515 553 547 q 703 424 671 483 q 736 282 736 364 q 700 132 736 196 q 597 34 664 68 q 438 0 531 0 l 129 0 m 251 113 l 424 113 q 562 159 511 113 q 613 286 613 206 q 562 422 613 369 q 424 474 511 474 l 251 474 l 251 113 m 251 582 l 415 582 q 542 625 496 582 q 589 742 589 668 q 543 858 589 815 q 417 901 497 901 l 251 901 l 251 582 z "},"Г":{"ha":833,"x_min":153,"x_max":743,"o":"m 153 0 l 153 1014 l 743 1014 l 743 900 l 278 900 l 278 0 l 153 0 z "},"Ѓ":{"ha":833,"x_min":153,"x_max":743,"o":"m 153 0 l 153 1014 l 743 1014 l 743 900 l 278 900 l 278 0 l 153 0 m 343 1125 l 490 1319 l 625 1319 l 471 1125 l 343 1125 z "},"Ґ":{"ha":833,"x_min":153,"x_max":743,"o":"m 153 0 l 153 1014 l 625 1014 l 625 1146 l 743 1146 l 743 900 l 278 900 l 278 0 l 153 0 z "},"Д":{"ha":833,"x_min":35,"x_max":799,"o":"m 35 -194 l 35 107 l 97 107 q 129 182 113 135 q 158 289 146 229 q 172 414 171 349 l 182 1014 l 701 1014 l 701 107 l 799 107 l 799 -194 l 688 -194 l 688 0 l 146 0 l 146 -194 l 35 -194 m 228 107 l 576 107 l 576 903 l 301 903 l 294 414 q 271 225 293 307 q 228 107 249 143 z "},"Е":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 z "},"Ё":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m 599 1135 q 534 1158 558 1135 q 510 1222 510 1182 q 534 1288 510 1264 q 599 1313 558 1313 q 663 1288 639 1313 q 688 1222 688 1264 q 663 1158 688 1182 q 599 1135 639 1135 m 290 1135 q 226 1158 250 1135 q 201 1222 201 1182 q 226 1288 201 1264 q 290 1313 250 1313 q 355 1288 331 1313 q 379 1222 379 1264 q 355 1158 379 1182 q 290 1135 331 1135 z "},"Ж":{"ha":833,"x_min":17,"x_max":817,"o":"m 17 0 l 200 522 l 31 1014 l 161 1014 l 306 564 l 364 564 l 364 1014 l 469 1014 l 469 564 l 529 564 l 672 1014 l 803 1014 l 636 521 l 817 0 l 688 0 l 532 475 l 469 475 l 469 0 l 364 0 l 364 475 l 301 475 l 144 0 l 17 0 z "},"З":{"ha":833,"x_min":74,"x_max":739,"o":"m 403 -14 q 236 19 308 -14 q 122 114 164 53 q 74 257 79 175 l 199 257 q 263 140 207 183 q 403 97 318 97 q 552 147 497 97 q 607 278 607 197 q 551 409 607 360 q 403 458 496 458 l 278 458 l 278 572 l 401 572 q 538 625 486 572 q 589 754 589 678 q 538 874 589 832 q 401 917 488 917 q 265 869 317 917 q 214 743 214 821 l 89 743 q 128 893 89 829 q 237 992 167 957 q 401 1028 307 1028 q 633 961 547 1028 q 719 771 719 894 q 690 647 719 701 q 605 561 660 592 q 475 532 550 531 l 475 553 q 615 522 556 554 q 706 428 674 489 q 739 286 739 368 q 698 131 739 199 q 581 25 657 64 q 403 -14 506 -14 z "},"И":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 246 1014 l 246 444 q 244 338 246 394 q 239 231 242 282 q 233 146 236 181 l 542 1014 l 708 1014 l 708 0 l 588 0 l 588 569 q 590 677 588 621 q 595 784 592 733 q 601 868 599 835 l 292 0 l 125 0 z "},"Й":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 246 1014 l 246 444 q 244 338 246 394 q 239 231 242 282 q 233 146 236 181 l 542 1014 l 708 1014 l 708 0 l 588 0 l 588 569 q 590 677 588 621 q 595 784 592 733 q 601 868 599 835 l 292 0 l 125 0 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"К":{"ha":833,"x_min":128,"x_max":778,"o":"m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 z "},"Ќ":{"ha":833,"x_min":128,"x_max":778,"o":"m 336 1125 l 483 1319 l 618 1319 l 464 1125 l 336 1125 m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 z "},"Л":{"ha":833,"x_min":28,"x_max":703,"o":"m 28 -7 l 28 110 l 53 110 q 141 165 114 110 q 169 353 168 219 l 181 1014 l 703 1014 l 703 0 l 578 0 l 578 900 l 304 900 l 294 353 q 235 80 292 167 q 60 -7 179 -7 l 28 -7 z "},"М":{"ha":833,"x_min":106,"x_max":728,"o":"m 106 0 l 106 1014 l 269 1014 l 375 686 q 403 598 390 642 q 421 531 415 554 q 439 598 428 554 q 464 688 450 642 l 564 1014 l 728 1014 l 728 0 l 606 0 l 606 368 q 610 507 606 429 q 621 666 614 585 q 635 822 628 747 q 649 951 643 896 l 485 444 l 353 444 l 188 951 q 201 826 194 897 q 214 674 208 754 q 224 515 219 594 q 228 368 228 436 l 228 0 l 106 0 z "},"Н":{"ha":833,"x_min":129,"x_max":704,"o":"m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 z "},"О":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"П":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 1014 l 703 1014 l 703 0 l 578 0 l 578 900 l 256 900 l 256 0 l 131 0 z "},"Р":{"ha":833,"x_min":128,"x_max":764,"o":"m 128 0 l 128 1014 l 454 1014 q 618 977 549 1014 q 726 874 688 940 q 764 715 764 807 q 726 558 764 625 q 618 453 688 490 q 454 417 549 417 l 253 417 l 253 0 l 128 0 m 253 529 l 454 529 q 585 580 536 529 q 635 715 635 631 q 585 851 635 801 q 454 901 536 901 l 253 901 l 253 529 z "},"С":{"ha":833,"x_min":122,"x_max":719,"o":"m 422 -14 q 263 21 331 -14 q 159 122 196 56 q 122 278 122 188 l 122 736 q 159 893 122 828 q 263 993 196 958 q 422 1028 331 1028 q 581 992 514 1028 q 683 892 647 957 q 719 736 719 826 l 594 736 q 549 869 594 822 q 422 915 504 915 q 294 869 340 915 q 247 738 247 824 l 247 278 q 294 145 247 192 q 422 99 340 99 q 549 145 504 99 q 594 278 594 192 l 719 278 q 683 123 719 189 q 581 22 647 57 q 422 -14 514 -14 z "},"Т":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 z "},"У":{"ha":833,"x_min":69,"x_max":764,"o":"m 265 0 l 368 263 l 69 1014 l 206 1014 l 388 518 q 417 428 406 471 q 431 365 428 386 q 443 428 433 386 q 468 518 453 471 l 628 1014 l 764 1014 l 399 0 l 265 0 z "},"Ў":{"ha":833,"x_min":69,"x_max":764,"o":"m 265 0 l 368 263 l 69 1014 l 206 1014 l 388 518 q 417 428 406 471 q 431 365 428 386 q 443 428 433 386 q 468 518 453 471 l 628 1014 l 764 1014 l 399 0 l 265 0 m 417 1118 q 256 1174 317 1118 q 194 1319 194 1229 l 293 1319 q 326 1232 293 1265 q 415 1199 360 1199 q 506 1232 472 1199 q 540 1319 540 1265 l 639 1319 q 578 1174 639 1229 q 417 1118 517 1118 z "},"Ф":{"ha":833,"x_min":75,"x_max":758,"o":"m 358 -35 l 358 63 q 210 99 274 63 q 110 199 146 135 q 75 351 75 264 l 75 676 q 110 833 75 767 q 208 935 144 899 q 358 972 272 972 l 358 1069 l 475 1069 l 475 972 q 625 935 561 972 q 724 833 689 899 q 758 676 758 767 l 758 351 q 723 199 758 264 q 624 99 688 135 q 475 63 561 63 l 475 -35 l 358 -35 m 358 168 l 358 867 q 269 844 307 867 q 212 778 232 821 q 192 676 192 736 l 192 351 q 212 253 192 294 q 269 190 232 213 q 358 168 307 168 m 475 168 q 565 190 528 168 q 622 253 601 213 q 642 351 642 294 l 642 676 q 622 778 642 736 q 565 844 601 821 q 475 867 528 867 l 475 168 z "},"Х":{"ha":833,"x_min":56,"x_max":778,"o":"m 56 0 l 347 514 l 71 1014 l 215 1014 l 372 714 q 398 663 385 690 q 419 621 411 636 q 440 663 426 636 q 465 714 453 690 l 625 1014 l 763 1014 l 486 522 l 778 0 l 635 0 l 461 322 q 435 373 449 346 q 415 417 422 400 q 395 374 408 400 q 369 324 382 347 l 194 0 l 56 0 z "},"Ч":{"ha":833,"x_min":104,"x_max":701,"o":"m 576 0 l 576 390 q 509 381 558 386 q 389 376 460 376 q 181 456 258 376 q 104 668 104 535 l 104 1014 l 229 1014 l 229 668 q 278 537 229 586 q 410 488 328 488 q 519 492 476 488 q 576 501 563 497 l 576 1014 l 701 1014 l 701 0 l 576 0 z "},"Ц":{"ha":833,"x_min":131,"x_max":785,"o":"m 674 -194 l 674 0 l 131 0 l 131 1014 l 256 1014 l 256 111 l 556 111 l 556 1014 l 681 1014 l 681 111 l 785 111 l 785 -194 l 674 -194 z "},"Ш":{"ha":833,"x_min":89,"x_max":744,"o":"m 92 0 l 89 1014 l 206 1014 l 206 94 l 368 94 l 368 1014 l 468 1014 l 468 94 l 629 94 l 629 1014 l 744 1014 l 744 0 l 92 0 z "},"Щ":{"ha":833,"x_min":89,"x_max":799,"o":"m 688 -194 l 688 0 l 89 0 l 89 1014 l 201 1014 l 201 106 l 363 106 l 363 1014 l 460 1014 l 460 106 l 621 106 l 621 1014 l 733 1014 l 733 106 l 799 106 l 799 -194 l 688 -194 z "},"Џ":{"ha":833,"x_min":131,"x_max":703,"o":"m 354 -174 l 354 0 l 131 0 l 131 1014 l 256 1014 l 256 114 l 578 114 l 578 1014 l 703 1014 l 703 0 l 479 0 l 479 -174 l 354 -174 z "},"Ь":{"ha":833,"x_min":131,"x_max":764,"o":"m 131 0 l 131 1014 l 256 1014 l 256 597 l 458 597 q 619 560 550 597 q 726 456 688 522 q 764 299 764 389 q 726 142 764 210 q 619 38 688 75 q 458 0 550 0 l 131 0 m 256 114 l 451 114 q 584 165 533 114 q 635 299 635 215 q 584 433 635 382 q 451 483 533 483 l 256 483 l 256 114 z "},"Ъ":{"ha":833,"x_min":-7,"x_max":764,"o":"m 188 0 l 188 900 l -7 900 l -7 1014 l 313 1014 l 313 597 l 458 597 q 619 560 550 597 q 726 456 688 522 q 764 299 764 389 q 726 142 764 210 q 619 38 688 75 q 458 0 550 0 l 188 0 m 313 114 l 451 114 q 584 165 533 114 q 635 299 635 215 q 584 433 635 382 q 451 483 533 483 l 313 483 l 313 114 z "},"Ы":{"ha":833,"x_min":90,"x_max":743,"o":"m 90 0 l 90 1014 l 207 1014 l 207 597 l 264 597 q 463 526 390 597 q 536 333 536 456 l 536 263 q 464 70 536 140 q 264 0 392 0 l 90 0 m 207 110 l 264 110 q 377 151 338 110 q 417 264 417 192 l 417 333 q 377 447 417 407 q 264 488 338 488 l 207 488 l 207 110 m 626 0 l 626 1014 l 743 1014 l 743 0 l 626 0 z "},"Љ":{"ha":833,"x_min":-7,"x_max":806,"o":"m -7 -7 l -7 104 l 18 104 q 74 149 54 104 q 96 269 94 193 l 103 1014 l 500 1014 l 500 597 l 583 597 q 744 538 683 597 q 806 382 806 479 l 806 215 q 744 59 806 118 q 583 0 683 0 l 389 0 l 389 910 l 213 910 l 206 269 q 153 67 204 142 q 14 -7 101 -7 l -7 -7 m 500 104 l 583 104 q 664 135 633 104 q 694 215 694 165 l 694 382 q 664 463 694 432 q 583 493 633 493 l 500 493 l 500 104 z "},"Њ":{"ha":833,"x_min":74,"x_max":806,"o":"m 74 0 l 74 1014 l 185 1014 l 185 597 l 389 597 l 389 1014 l 500 1014 l 500 597 l 583 597 q 746 539 686 597 q 806 382 806 481 l 806 215 q 746 58 806 117 q 583 0 686 0 l 389 0 l 389 493 l 185 493 l 185 0 l 74 0 m 500 104 l 583 104 q 665 134 636 104 q 694 215 694 164 l 694 382 q 665 464 694 435 q 583 493 636 493 l 500 493 l 500 104 z "},"Ѕ":{"ha":833,"x_min":100,"x_max":733,"o":"m 422 -14 q 251 19 322 -14 q 140 115 179 53 q 100 264 101 178 l 225 264 q 277 143 225 188 q 422 99 329 99 q 559 142 510 99 q 608 261 608 185 q 576 368 608 322 q 482 432 543 414 l 344 475 q 184 582 240 507 q 128 758 128 657 q 165 901 128 840 q 268 995 201 961 q 425 1029 335 1029 q 639 955 558 1029 q 721 757 719 881 l 596 757 q 551 874 596 832 q 424 917 506 917 q 298 878 343 917 q 253 769 253 839 q 286 661 253 707 q 382 596 319 615 l 521 551 q 678 443 622 519 q 733 264 733 367 q 694 118 733 181 q 585 21 656 56 q 422 -14 515 -14 z "},"Є":{"ha":833,"x_min":125,"x_max":717,"o":"m 422 -14 q 264 21 331 -14 q 161 122 197 56 q 125 278 125 188 l 125 736 q 161 893 125 828 q 264 993 197 958 q 422 1028 331 1028 q 580 992 514 1028 q 681 892 646 957 q 717 736 717 826 l 592 736 q 548 869 592 822 q 422 917 504 917 q 295 870 340 917 q 250 738 250 824 l 250 568 l 563 568 l 563 454 l 250 454 l 250 278 q 295 144 250 192 q 422 97 340 97 q 548 144 504 97 q 592 278 592 192 l 717 278 q 681 123 717 189 q 580 22 646 57 q 422 -14 514 -14 z "},"Э":{"ha":833,"x_min":117,"x_max":708,"o":"m 411 -14 q 254 22 321 -14 q 152 123 188 57 q 117 278 117 189 l 242 278 q 286 144 242 192 q 411 97 331 97 q 538 144 493 97 q 583 278 583 192 l 583 454 l 271 454 l 271 568 l 583 568 l 583 738 q 538 870 583 824 q 411 917 493 917 q 286 869 331 917 q 242 736 242 822 l 117 736 q 152 892 117 826 q 254 992 188 957 q 411 1028 321 1028 q 570 993 504 1028 q 672 893 636 958 q 708 736 708 828 l 708 278 q 672 122 708 188 q 570 21 636 56 q 411 -14 504 -14 z "},"І":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 z "},"Ї":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ј":{"ha":833,"x_min":63,"x_max":688,"o":"m 375 -14 q 146 68 229 -14 q 63 292 63 150 l 188 292 q 237 148 188 199 q 375 97 286 97 q 513 148 464 97 q 563 292 563 199 l 563 900 l 319 900 l 319 1014 l 688 1014 l 688 292 q 603 68 688 150 q 375 -14 519 -14 z "},"Ћ":{"ha":833,"x_min":0,"x_max":743,"o":"m 153 0 l 153 904 l 0 904 l 0 1014 l 444 1014 l 444 904 l 278 904 l 278 550 l 300 574 q 526 688 406 688 q 684 620 625 688 q 743 439 743 553 l 743 0 l 618 0 l 618 411 q 587 539 618 496 q 497 582 556 582 q 339 496 419 582 l 278 431 l 278 0 l 153 0 z "},"Ю":{"ha":833,"x_min":83,"x_max":778,"o":"m 540 -14 q 371 57 433 -14 q 308 250 308 128 l 308 465 l 199 465 l 199 0 l 83 0 l 83 1014 l 199 1014 l 199 576 l 308 576 l 308 764 q 370 958 308 888 q 540 1028 432 1028 q 715 957 651 1028 q 778 764 778 886 l 778 250 q 715 57 778 128 q 540 -14 651 -14 m 540 94 q 631 135 600 94 q 663 250 663 175 l 663 764 q 631 879 663 839 q 540 919 600 919 q 449 879 481 919 q 418 764 418 839 l 418 250 q 449 135 418 175 q 540 94 481 94 z "},"Я":{"ha":833,"x_min":78,"x_max":701,"o":"m 78 0 l 286 444 q 142 546 194 472 q 89 722 89 619 q 126 875 89 810 q 232 977 164 940 q 390 1014 300 1014 l 701 1014 l 701 0 l 576 0 l 576 431 l 415 431 l 222 0 l 78 0 m 390 542 l 576 542 l 576 903 l 390 903 q 266 853 314 903 q 218 722 218 804 q 265 592 218 642 q 390 542 313 542 z "},"Ђ":{"ha":833,"x_min":0,"x_max":743,"o":"m 361 -250 l 361 -136 l 458 -136 q 575 -94 532 -136 q 618 21 618 -51 l 618 411 q 587 539 618 496 q 497 582 556 582 q 339 496 419 582 l 278 431 l 278 0 l 153 0 l 153 904 l 0 904 l 0 1014 l 444 1014 l 444 904 l 278 904 l 278 550 l 300 574 q 526 688 406 688 q 684 620 625 688 q 743 439 743 553 l 743 21 q 708 -122 743 -61 q 608 -217 672 -183 q 458 -250 544 -250 l 361 -250 z "},"Ү":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 z "},"Ө":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 203 65 281 -14 q 125 279 125 143 l 125 736 q 203 950 125 872 q 417 1028 281 1028 q 631 950 553 1028 q 708 736 708 872 l 708 279 q 673 123 708 189 q 572 22 638 57 q 417 -14 507 -14 m 417 96 q 542 143 499 96 q 585 279 585 190 l 585 464 l 249 464 l 249 279 q 292 143 249 190 q 417 96 336 96 m 249 575 l 585 575 l 585 736 q 542 872 585 825 q 417 918 499 918 q 292 872 335 918 q 249 736 249 825 l 249 575 z "},"а":{"ha":833,"x_min":90,"x_max":708,"o":"m 350 -14 q 160 48 229 -14 q 90 215 90 110 q 160 383 90 322 q 347 444 229 444 l 583 444 l 583 521 q 541 630 583 592 q 421 668 499 668 q 307 640 353 668 q 254 563 261 611 l 129 563 q 222 719 142 661 q 424 778 303 778 q 632 710 556 778 q 708 525 708 642 l 708 0 l 586 0 l 586 146 l 565 146 l 586 167 q 522 35 586 83 q 350 -14 457 -14 m 381 85 q 526 129 469 85 q 583 243 583 174 l 583 351 l 350 351 q 251 317 288 351 q 215 222 215 282 q 259 122 215 158 q 381 85 303 85 z "},"б":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 203 66 282 -14 q 125 285 125 146 l 125 632 q 217 915 125 815 q 479 1014 308 1014 l 674 1014 l 674 889 l 479 889 q 308 823 367 889 q 250 632 250 757 l 250 542 l 269 542 l 250 514 q 306 642 251 596 q 453 688 360 688 q 641 610 574 688 q 708 396 708 532 l 708 285 q 674 125 708 192 q 574 22 639 58 q 417 -14 508 -14 m 417 97 q 540 146 497 97 q 583 285 583 194 l 583 396 q 540 535 583 486 q 417 583 497 583 q 293 535 336 583 q 250 396 250 488 l 250 285 q 293 146 250 194 q 417 97 336 97 z "},"в":{"ha":833,"x_min":131,"x_max":729,"o":"m 131 0 l 131 764 l 461 764 q 646 710 581 764 q 711 561 711 657 q 657 434 711 482 q 514 386 603 386 l 514 397 q 670 349 611 397 q 729 218 729 300 q 660 58 729 115 q 465 0 590 0 l 131 0 m 253 110 l 465 110 q 569 139 532 110 q 606 221 606 168 q 569 304 606 275 q 465 333 532 333 l 253 333 l 253 110 m 253 442 l 461 442 q 553 469 519 442 q 588 547 588 497 q 554 626 588 597 q 461 654 521 654 l 253 654 l 253 442 z "},"г":{"ha":833,"x_min":181,"x_max":729,"o":"m 181 0 l 181 764 l 729 764 l 729 650 l 306 650 l 306 0 l 181 0 z "},"ѓ":{"ha":833,"x_min":181,"x_max":729,"o":"m 181 0 l 181 764 l 729 764 l 729 650 l 306 650 l 306 0 l 181 0 m 378 896 l 525 1090 l 660 1090 l 506 896 l 378 896 z "},"ґ":{"ha":833,"x_min":181,"x_max":729,"o":"m 181 0 l 181 764 l 611 764 l 611 910 l 729 910 l 729 650 l 306 650 l 306 0 l 181 0 z "},"д":{"ha":833,"x_min":42,"x_max":785,"o":"m 42 -194 l 42 107 l 104 107 q 153 200 128 131 q 181 376 179 269 l 189 764 l 688 764 l 688 107 l 785 107 l 785 -194 l 674 -194 l 674 0 l 153 0 l 153 -194 l 42 -194 m 236 107 l 563 107 l 563 653 l 307 653 l 301 374 q 278 196 300 264 q 236 107 256 128 z "},"е":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 z "},"ё":{"ha":833,"x_min":118,"x_max":715,"o":"m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 m 417 -14 q 259 22 326 -14 q 155 124 192 58 q 118 278 118 190 l 118 486 q 155 640 118 575 q 259 742 192 706 q 417 778 326 778 q 574 742 507 778 q 678 640 642 706 q 715 486 715 575 l 715 351 l 240 351 l 240 278 q 286 140 240 188 q 417 92 332 92 q 533 117 489 92 q 588 194 578 143 l 713 194 q 619 42 700 99 q 417 -14 538 -14 m 593 435 l 593 486 q 548 625 593 576 q 417 674 503 674 q 286 625 332 674 q 240 486 240 576 l 240 446 l 603 446 l 593 435 z "},"ж":{"ha":833,"x_min":25,"x_max":808,"o":"m 25 0 l 192 392 l 36 764 l 157 764 l 290 431 l 364 431 l 364 764 l 469 764 l 469 431 l 540 431 l 678 764 l 797 764 l 642 396 l 808 0 l 683 0 l 544 347 l 469 347 l 469 0 l 364 0 l 364 347 l 289 347 l 149 0 l 25 0 z "},"з":{"ha":833,"x_min":90,"x_max":722,"o":"m 381 -10 q 183 42 260 -10 q 90 181 106 93 l 222 181 q 274 124 232 146 q 381 101 317 101 l 446 101 q 552 133 514 101 q 590 217 590 165 q 553 304 590 272 q 446 336 517 336 l 278 336 l 278 444 l 442 444 q 539 475 506 444 q 572 556 572 506 q 558 614 572 590 q 514 650 543 638 q 443 663 485 663 l 374 663 q 278 638 318 663 q 229 576 238 613 l 97 576 q 188 718 111 663 q 374 774 264 774 l 443 774 q 583 748 525 774 q 673 675 642 722 q 704 563 704 628 q 660 451 704 494 q 535 401 615 407 l 535 396 q 678 343 633 389 q 722 211 722 297 q 647 50 722 110 q 446 -10 572 -10 l 381 -10 z "},"и":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 764 l 250 764 l 250 347 q 248 263 250 307 q 242 178 246 218 q 235 111 239 139 l 543 764 l 703 764 l 703 0 l 583 0 l 583 417 q 585 501 583 457 q 592 587 588 546 q 599 654 596 628 l 290 0 l 131 0 z "},"й":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 764 l 250 764 l 250 347 q 248 263 250 307 q 242 178 246 218 q 235 111 239 139 l 543 764 l 703 764 l 703 0 l 583 0 l 583 417 q 585 501 583 457 q 592 587 588 546 q 599 654 596 628 l 290 0 l 131 0 m 422 889 q 261 944 322 889 q 200 1090 200 1000 l 299 1090 q 332 1003 299 1036 q 421 969 365 969 q 512 1003 478 969 q 546 1090 546 1036 l 644 1090 q 583 944 644 1000 q 422 889 522 889 z "},"к":{"ha":833,"x_min":135,"x_max":760,"o":"m 135 0 l 135 764 l 260 764 l 260 449 l 390 449 l 613 764 l 756 764 l 499 400 l 760 0 l 614 0 l 392 340 l 260 340 l 260 0 l 135 0 z "},"ќ":{"ha":833,"x_min":135,"x_max":760,"o":"m 135 0 l 135 764 l 260 764 l 260 449 l 390 449 l 613 764 l 756 764 l 499 400 l 760 0 l 614 0 l 392 340 l 260 340 l 260 0 l 135 0 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"л":{"ha":833,"x_min":35,"x_max":703,"o":"m 35 -10 l 35 107 l 60 107 q 149 157 124 107 q 176 336 175 207 l 185 764 l 703 764 l 703 0 l 578 0 l 578 650 l 308 650 l 301 331 q 274 135 299 210 q 199 25 250 60 q 67 -10 149 -10 l 35 -10 z "},"м":{"ha":833,"x_min":106,"x_max":728,"o":"m 106 0 l 106 764 l 275 764 l 375 471 q 403 383 390 426 q 421 315 415 339 q 438 383 426 339 q 464 472 450 426 l 558 764 l 728 764 l 728 0 l 607 0 l 607 118 q 608 254 607 181 q 612 403 610 328 q 617 545 614 478 q 621 664 619 613 l 485 229 l 353 229 l 215 661 q 220 506 218 599 q 224 311 222 413 q 226 118 226 210 l 226 0 l 106 0 z "},"н":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 764 l 256 764 l 256 446 l 578 446 l 578 764 l 703 764 l 703 0 l 578 0 l 578 332 l 256 332 l 256 0 l 131 0 z "},"о":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 z "},"п":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 764 l 703 764 l 703 0 l 578 0 l 578 650 l 256 650 l 256 0 l 131 0 z "},"р":{"ha":833,"x_min":128,"x_max":715,"o":"m 128 -250 l 128 764 l 253 764 l 253 618 l 278 618 l 253 589 q 310 727 253 676 q 463 778 368 778 q 647 702 578 778 q 715 494 715 626 l 715 271 q 684 119 715 183 q 597 21 653 56 q 463 -14 540 -14 q 311 38 369 -14 q 253 175 253 89 l 278 146 l 250 146 l 253 -28 l 253 -250 l 128 -250 m 421 94 q 545 142 500 94 q 590 278 590 189 l 590 486 q 545 622 590 575 q 421 669 500 669 q 299 621 344 669 q 253 486 253 572 l 253 278 q 299 143 253 192 q 421 94 344 94 z "},"с":{"ha":833,"x_min":115,"x_max":717,"o":"m 419 -14 q 259 21 328 -14 q 153 122 190 56 q 115 278 115 188 l 115 486 q 153 643 115 578 q 259 743 190 708 q 419 778 328 778 q 632 707 551 778 q 717 514 713 636 l 592 514 q 542 627 588 588 q 419 667 497 667 q 289 620 338 667 q 240 488 240 574 l 240 278 q 289 144 240 192 q 419 97 338 97 q 542 138 497 97 q 592 250 588 178 l 717 250 q 632 57 713 128 q 419 -14 551 -14 z "},"т":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 654 l 76 654 l 76 764 l 757 764 l 757 654 l 479 654 l 479 0 l 354 0 z "},"у":{"ha":833,"x_min":76,"x_max":757,"o":"m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 z "},"ў":{"ha":833,"x_min":76,"x_max":757,"o":"m 422 889 q 261 944 322 889 q 200 1090 200 1000 l 299 1090 q 332 1003 299 1036 q 421 969 365 969 q 512 1003 478 969 q 546 1090 546 1036 l 644 1090 q 583 944 644 1000 q 422 889 522 889 m 247 -250 l 360 47 l 76 764 l 215 764 l 393 292 q 411 235 403 268 q 425 181 419 203 q 439 235 431 203 q 456 292 447 268 l 622 764 l 757 764 l 381 -250 l 247 -250 z "},"ф":{"ha":833,"x_min":75,"x_max":758,"o":"m 361 -250 l 361 0 q 151 75 228 0 q 75 281 75 150 l 75 486 q 152 690 75 615 q 361 764 229 764 l 361 1014 l 472 1014 l 472 764 q 682 690 606 764 q 758 486 758 615 l 758 281 q 682 75 758 150 q 472 0 606 0 l 472 -250 l 361 -250 m 364 99 l 364 665 q 238 618 283 665 q 192 486 192 571 l 192 281 q 238 147 192 196 q 364 99 283 99 m 469 99 q 597 147 551 99 q 642 281 642 196 l 642 486 q 597 618 642 571 q 469 665 551 665 l 469 99 z "},"х":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 340 393 l 86 764 l 233 764 l 385 528 q 403 494 394 513 q 418 465 413 476 q 431 494 422 476 q 450 528 440 513 l 603 764 l 749 764 l 494 392 l 764 0 l 617 0 l 453 250 q 434 285 443 265 q 418 318 425 306 q 402 285 413 306 q 381 250 392 265 l 215 0 l 69 0 z "},"ч":{"ha":833,"x_min":108,"x_max":694,"o":"m 569 0 l 569 278 q 502 267 547 272 q 407 263 457 263 q 187 331 265 261 q 108 528 108 401 l 108 764 l 233 764 l 233 528 q 281 416 233 457 q 414 375 329 375 q 513 380 472 375 q 569 389 554 385 l 569 764 l 694 764 l 694 0 l 569 0 z "},"ц":{"ha":833,"x_min":131,"x_max":785,"o":"m 674 -194 l 674 0 l 131 0 l 131 764 l 256 764 l 256 111 l 556 111 l 556 764 l 681 764 l 681 111 l 785 111 l 785 -194 l 674 -194 z "},"ш":{"ha":833,"x_min":89,"x_max":744,"o":"m 92 0 l 89 764 l 206 764 l 206 94 l 368 94 l 368 764 l 468 764 l 468 94 l 629 94 l 629 764 l 744 764 l 744 0 l 92 0 z "},"щ":{"ha":833,"x_min":89,"x_max":799,"o":"m 688 -194 l 688 0 l 89 0 l 89 764 l 201 764 l 201 106 l 363 106 l 363 764 l 460 764 l 460 106 l 621 106 l 621 764 l 733 764 l 733 106 l 799 106 l 799 -194 l 688 -194 z "},"џ":{"ha":833,"x_min":131,"x_max":703,"o":"m 354 -174 l 354 0 l 131 0 l 131 764 l 256 764 l 256 114 l 578 114 l 578 764 l 703 764 l 703 0 l 479 0 l 479 -174 l 354 -174 z "},"ь":{"ha":833,"x_min":136,"x_max":764,"o":"m 136 0 l 136 764 l 261 764 l 261 483 l 486 483 q 690 419 615 483 q 764 242 764 354 q 689 65 764 131 q 486 0 614 0 l 136 0 m 261 114 l 486 114 q 597 147 558 114 q 635 242 635 179 q 597 337 635 304 q 486 369 558 369 l 261 369 l 261 114 z "},"ъ":{"ha":833,"x_min":0,"x_max":764,"o":"m 194 0 l 194 653 l 0 653 l 0 764 l 319 764 l 319 483 l 486 483 q 690 419 615 483 q 764 242 764 354 q 689 65 764 131 q 486 0 614 0 l 194 0 m 319 114 l 486 114 q 597 147 558 114 q 635 242 635 179 q 597 337 635 304 q 486 369 558 369 l 319 369 l 319 114 z "},"ы":{"ha":833,"x_min":90,"x_max":743,"o":"m 90 0 l 90 764 l 207 764 l 207 483 l 269 483 q 465 419 393 483 q 536 242 536 354 q 465 65 536 129 q 269 0 393 0 l 90 0 m 207 100 l 269 100 q 384 138 343 100 q 425 242 425 175 q 384 346 425 308 q 269 383 343 383 l 207 383 l 207 100 m 626 0 l 626 764 l 743 764 l 743 0 l 626 0 z "},"љ":{"ha":833,"x_min":7,"x_max":813,"o":"m 7 -7 l 7 111 l 32 111 q 88 154 67 111 q 110 269 108 197 l 115 764 l 507 764 l 507 486 l 590 486 q 751 427 690 486 q 813 272 813 368 l 813 214 q 751 59 813 118 q 590 0 690 0 l 396 0 l 396 657 l 225 657 l 221 269 q 169 68 219 143 q 28 -7 118 -7 l 7 -7 m 507 103 l 590 103 q 671 133 640 103 q 701 214 701 164 l 701 272 q 671 353 701 322 q 590 383 640 383 l 507 383 l 507 103 z "},"њ":{"ha":833,"x_min":89,"x_max":803,"o":"m 89 0 l 89 764 l 204 764 l 204 486 l 394 486 l 394 764 l 496 764 l 496 486 l 581 486 q 742 427 681 486 q 803 271 803 368 l 803 215 q 742 59 803 118 q 581 0 681 0 l 394 0 l 394 382 l 204 382 l 204 0 l 89 0 m 496 104 l 581 104 q 659 135 631 104 q 688 215 688 165 l 688 271 q 659 351 688 321 q 581 382 631 382 l 496 382 l 496 104 z "},"ѕ":{"ha":833,"x_min":125,"x_max":722,"o":"m 393 -11 q 258 13 315 -11 q 166 82 200 38 q 125 188 132 126 l 250 188 q 295 124 258 147 q 393 100 332 100 l 451 100 q 561 130 525 100 q 597 210 597 160 q 565 287 597 258 q 468 325 532 315 l 365 342 q 198 412 253 361 q 143 560 143 463 q 208 719 143 663 q 404 775 274 775 l 457 775 q 633 724 567 775 q 714 585 700 672 l 589 585 q 547 642 581 621 q 457 664 514 664 l 404 664 q 301 638 333 664 q 268 558 268 611 q 296 489 268 511 q 383 457 324 467 l 486 440 q 666 368 610 421 q 722 215 722 315 q 655 49 722 110 q 451 -11 588 -11 l 393 -11 z "},"є":{"ha":833,"x_min":125,"x_max":717,"o":"m 422 -14 q 264 21 331 -14 q 161 122 197 56 q 125 278 125 188 l 125 486 q 161 643 125 578 q 264 743 197 708 q 422 778 331 778 q 633 707 554 778 q 717 514 713 636 l 592 514 q 544 627 588 588 q 422 667 500 667 q 295 620 340 667 q 250 488 250 574 l 250 444 l 521 444 l 521 333 l 250 333 l 250 278 q 295 144 250 192 q 422 97 340 97 q 544 138 500 97 q 592 250 588 178 l 717 250 q 633 57 713 128 q 422 -14 554 -14 z "},"э":{"ha":833,"x_min":117,"x_max":708,"o":"m 411 -14 q 200 57 279 -14 q 117 250 121 128 l 242 250 q 290 138 246 178 q 411 97 335 97 q 538 144 493 97 q 583 278 583 192 l 583 333 l 313 333 l 313 444 l 583 444 l 583 488 q 538 620 583 574 q 411 667 493 667 q 290 627 335 667 q 242 514 246 588 l 117 514 q 200 707 121 636 q 411 778 279 778 q 570 743 504 778 q 672 643 636 708 q 708 486 708 578 l 708 278 q 672 122 708 188 q 570 21 636 56 q 411 -14 504 -14 z "},"і":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 438 901 q 365 925 392 901 q 339 989 339 949 q 365 1055 339 1031 q 438 1079 392 1079 q 510 1055 483 1079 q 536 989 536 1031 q 510 925 536 949 q 438 901 483 901 z "},"ї":{"ha":833,"x_min":118,"x_max":771,"o":"m 118 0 l 118 114 l 389 114 l 389 650 l 153 650 l 153 764 l 514 764 l 514 114 l 771 114 l 771 0 l 118 0 m 592 901 q 527 925 551 901 q 503 989 503 949 q 527 1055 503 1031 q 592 1079 551 1079 q 656 1055 632 1079 q 681 989 681 1031 q 656 925 681 949 q 592 901 632 901 m 283 901 q 219 925 243 901 q 194 989 194 949 q 219 1055 194 1031 q 283 1079 243 1079 q 348 1055 324 1079 q 372 989 372 1031 q 348 925 372 949 q 283 901 324 901 z "},"ј":{"ha":833,"x_min":118,"x_max":633,"o":"m 118 -250 l 118 -135 l 297 -135 q 431 -88 383 -135 q 479 43 479 -42 l 479 650 l 160 650 l 160 764 l 604 764 l 604 43 q 521 -171 604 -92 q 297 -250 438 -250 l 118 -250 m 535 901 q 463 925 489 901 q 436 989 436 949 q 463 1055 436 1031 q 535 1079 489 1079 q 607 1055 581 1079 q 633 989 633 1031 q 607 925 633 949 q 535 901 581 901 z "},"ћ":{"ha":833,"x_min":0,"x_max":708,"o":"m 0 792 l 0 896 l 128 896 l 128 1014 l 253 1014 l 253 896 l 486 896 l 486 792 l 253 792 l 253 681 l 253 535 l 254 535 q 317 653 264 611 q 457 694 369 694 q 640 624 572 694 q 708 431 708 553 l 708 0 l 583 0 l 583 417 q 540 544 583 499 q 421 589 496 589 q 298 540 343 589 q 253 403 253 492 l 253 0 l 128 0 l 128 792 l 0 792 z "},"ю":{"ha":833,"x_min":86,"x_max":764,"o":"m 536 -14 q 382 51 440 -14 q 324 222 324 117 l 324 338 l 201 338 l 201 0 l 86 0 l 86 764 l 201 764 l 201 438 l 324 438 l 324 542 q 381 713 324 649 q 536 778 439 778 q 701 713 639 778 q 764 542 764 649 l 764 222 q 701 51 764 117 q 536 -14 639 -14 m 536 83 q 619 120 589 83 q 649 222 649 157 l 649 542 q 619 644 649 607 q 536 681 589 681 q 456 644 485 681 q 426 542 426 607 l 426 222 q 456 120 426 157 q 536 83 485 83 z "},"я":{"ha":833,"x_min":83,"x_max":703,"o":"m 83 0 l 279 294 q 144 375 192 315 q 96 524 96 435 q 170 700 96 636 q 374 764 244 764 l 703 764 l 703 0 l 578 0 l 578 285 l 410 285 l 229 0 l 83 0 m 374 396 l 578 396 l 578 653 l 374 653 q 264 619 304 653 q 224 524 224 585 q 264 430 224 464 q 374 396 304 396 z "},"ђ":{"ha":833,"x_min":0,"x_max":706,"o":"m 347 -250 l 347 -135 l 399 -135 q 533 -88 485 -135 q 581 43 581 -42 l 581 417 q 538 544 581 499 q 421 589 496 589 q 299 540 343 589 q 256 403 256 492 l 256 0 l 131 0 l 131 792 l 0 792 l 0 896 l 131 896 l 131 1014 l 256 1014 l 256 896 l 486 896 l 486 792 l 256 792 l 256 681 l 256 535 l 282 535 l 256 506 q 308 645 256 596 q 457 694 361 694 q 639 624 572 694 q 706 431 706 553 l 706 43 q 622 -171 706 -92 q 399 -250 539 -250 l 347 -250 z "},"ү":{"ha":833,"x_min":83,"x_max":750,"o":"m 354 -250 l 354 0 l 83 764 l 211 764 l 378 257 q 397 195 389 224 q 410 145 404 167 q 417 111 415 124 q 419 99 419 99 q 422 111 419 99 q 430 145 425 124 q 443 195 435 167 q 461 257 451 224 l 624 764 l 750 764 l 479 0 l 479 -250 l 354 -250 z "},"ө":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 262 22 328 -14 q 160 123 196 57 q 125 279 125 189 l 125 486 q 160 642 125 576 q 262 742 196 707 q 417 778 328 778 q 571 742 506 778 q 672 641 636 706 q 708 488 708 576 l 708 279 q 672 124 708 190 q 571 22 636 58 q 417 -14 506 -14 m 417 96 q 542 143 499 96 q 586 279 586 190 l 586 333 l 247 333 l 247 279 q 292 143 247 190 q 417 96 336 96 m 247 438 l 586 438 l 586 486 q 542 621 586 574 q 417 668 499 668 q 292 621 336 668 q 247 486 247 574 l 247 438 z "},"Α":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 z "},"Β":{"ha":833,"x_min":129,"x_max":736,"o":"m 129 0 l 129 1014 l 417 1014 q 634 944 556 1014 q 713 751 713 875 q 683 631 713 682 q 601 551 654 579 q 472 525 547 524 l 472 546 q 612 515 553 547 q 703 424 671 483 q 736 282 736 364 q 700 132 736 196 q 597 34 664 68 q 438 0 531 0 l 129 0 m 251 113 l 424 113 q 562 159 511 113 q 613 286 613 206 q 562 422 613 369 q 424 474 511 474 l 251 474 l 251 113 m 251 582 l 415 582 q 542 625 496 582 q 589 742 589 668 q 543 858 589 815 q 417 901 497 901 l 251 901 l 251 582 z "},"Γ":{"ha":833,"x_min":153,"x_max":743,"o":"m 153 0 l 153 1014 l 743 1014 l 743 900 l 278 900 l 278 0 l 153 0 z "},"Δ":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 467 688 q 436 823 449 760 q 417 917 424 886 q 398 824 411 886 q 367 689 385 761 l 197 0 l 69 0 m 151 0 l 151 111 l 693 111 l 693 0 l 151 0 z "},"Ε":{"ha":833,"x_min":139,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 z "},"Ζ":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 125 l 575 900 l 125 900 l 125 1014 l 701 1014 l 701 889 l 244 114 l 715 114 l 715 0 l 118 0 z "},"Η":{"ha":833,"x_min":129,"x_max":704,"o":"m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 z "},"Θ":{"ha":833,"x_min":122,"x_max":711,"o":"m 285 467 l 285 581 l 549 581 l 549 467 l 285 467 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ι":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 z "},"Κ":{"ha":833,"x_min":128,"x_max":778,"o":"m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 z "},"Λ":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 467 688 q 440 806 451 754 q 422 887 428 857 q 417 917 417 917 q 411 887 417 917 q 394 806 406 857 q 367 689 383 754 l 197 0 l 69 0 z "},"Μ":{"ha":833,"x_min":106,"x_max":728,"o":"m 106 0 l 106 1014 l 269 1014 l 375 686 q 403 598 390 642 q 421 531 415 554 q 439 598 428 554 q 464 688 450 642 l 564 1014 l 728 1014 l 728 0 l 606 0 l 606 368 q 610 507 606 429 q 621 666 614 585 q 635 822 628 747 q 649 951 643 896 l 485 444 l 353 444 l 188 951 q 201 826 194 897 q 214 674 208 754 q 224 515 219 594 q 228 368 228 436 l 228 0 l 106 0 z "},"Ν":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 292 1014 l 601 146 q 595 231 599 181 q 590 338 592 282 q 588 444 588 394 l 588 1014 l 708 1014 l 708 0 l 542 0 l 233 868 q 239 784 236 835 q 244 677 242 733 q 246 569 246 621 l 246 0 l 125 0 z "},"Ξ":{"ha":833,"x_min":111,"x_max":722,"o":"m 111 900 l 111 1014 l 722 1014 l 722 900 l 111 900 m 111 0 l 111 114 l 722 114 l 722 0 l 111 0 m 153 457 l 153 571 l 681 571 l 681 457 l 153 457 z "},"Ο":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Π":{"ha":833,"x_min":131,"x_max":703,"o":"m 131 0 l 131 1014 l 703 1014 l 703 0 l 578 0 l 578 900 l 256 900 l 256 0 l 131 0 z "},"Ρ":{"ha":833,"x_min":128,"x_max":764,"o":"m 128 0 l 128 1014 l 454 1014 q 618 977 549 1014 q 726 874 688 940 q 764 715 764 807 q 726 558 764 625 q 618 453 688 490 q 454 417 549 417 l 253 417 l 253 0 l 128 0 m 253 529 l 454 529 q 585 580 536 529 q 635 715 635 631 q 585 851 635 801 q 454 901 536 901 l 253 901 l 253 529 z "},"Σ":{"ha":833,"x_min":76,"x_max":750,"o":"m 76 0 l 76 114 l 518 508 l 76 900 l 76 1014 l 750 1014 l 750 903 l 329 903 l 229 907 l 610 574 l 610 447 l 219 107 l 319 111 l 750 111 l 750 0 l 76 0 z "},"Τ":{"ha":833,"x_min":76,"x_max":757,"o":"m 354 0 l 354 901 l 76 901 l 76 1015 l 757 1015 l 757 901 l 479 901 l 479 0 l 354 0 z "},"Υ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 z "},"Φ":{"ha":833,"x_min":75,"x_max":758,"o":"m 358 -35 l 358 63 q 210 99 274 63 q 110 199 146 135 q 75 351 75 264 l 75 676 q 110 833 75 767 q 208 935 144 899 q 358 972 272 972 l 358 1069 l 475 1069 l 475 972 q 625 935 561 972 q 724 833 689 899 q 758 676 758 767 l 758 351 q 723 199 758 264 q 624 99 688 135 q 475 63 561 63 l 475 -35 l 358 -35 m 358 168 l 358 867 q 269 844 307 867 q 212 778 232 821 q 192 676 192 736 l 192 351 q 212 253 192 294 q 269 190 232 213 q 358 168 307 168 m 475 168 q 565 190 528 168 q 622 253 601 213 q 642 351 642 294 l 642 676 q 622 778 642 736 q 565 844 601 821 q 475 867 528 867 l 475 168 z "},"Χ":{"ha":833,"x_min":56,"x_max":778,"o":"m 56 0 l 347 514 l 71 1014 l 215 1014 l 372 714 q 398 663 385 690 q 419 621 411 636 q 440 663 426 636 q 465 714 453 690 l 625 1014 l 763 1014 l 486 522 l 778 0 l 635 0 l 461 322 q 435 373 449 346 q 415 417 422 400 q 395 374 408 400 q 369 324 382 347 l 194 0 l 56 0 z "},"Ψ":{"ha":833,"x_min":75,"x_max":758,"o":"m 358 0 l 358 236 q 210 272 274 236 q 110 373 146 308 q 75 525 75 438 l 75 1014 l 192 1014 l 192 525 q 212 427 192 468 q 269 364 232 386 q 358 342 307 342 l 358 1014 l 475 1014 l 475 342 q 565 364 528 342 q 622 427 601 386 q 642 525 642 468 l 642 1014 l 758 1014 l 758 525 q 723 373 758 438 q 624 272 688 308 q 475 236 561 236 l 475 0 l 358 0 z "},"Ω":{"ha":833,"x_min":69,"x_max":765,"o":"m 69 0 l 69 111 l 271 111 l 271 118 q 200 147 238 122 q 137 219 163 171 q 111 340 111 267 l 111 729 q 149 888 111 821 q 255 991 186 954 q 417 1028 324 1028 q 579 991 511 1028 q 685 888 647 954 q 722 729 722 821 l 722 340 q 697 219 722 267 q 634 148 671 172 q 563 119 597 124 l 563 111 l 765 111 l 765 0 l 472 0 l 472 153 q 563 203 528 153 q 597 333 597 254 l 597 729 q 548 866 597 815 q 417 917 499 917 q 285 866 335 917 q 236 729 236 815 l 236 333 q 271 203 236 254 q 361 153 306 153 l 361 0 l 69 0 z "},"Ά":{"ha":833,"x_min":14,"x_max":764,"o":"m 69 0 l 333 1014 l 501 1014 l 764 0 l 638 0 l 571 269 l 264 269 l 197 0 l 69 0 m 289 375 l 544 375 l 467 688 q 432 836 444 776 q 417 914 419 896 q 401 836 414 896 q 367 689 389 776 l 289 375 m 14 792 l 92 1014 l 222 1014 l 133 792 l 14 792 z "},"Έ":{"ha":833,"x_min":-160,"x_max":722,"o":"m 139 0 l 139 1014 l 722 1014 l 722 900 l 263 900 l 263 586 l 674 586 l 674 474 l 263 474 l 263 114 l 722 114 l 722 0 l 139 0 m -160 792 l -82 1014 l 49 1014 l -40 792 l -160 792 z "},"Ή":{"ha":833,"x_min":-160,"x_max":704,"o":"m -160 792 l -82 1014 l 49 1014 l -40 792 l -160 792 m 129 0 l 129 1014 l 254 1014 l 254 581 l 579 581 l 579 1014 l 704 1014 l 704 0 l 579 0 l 579 467 l 254 467 l 254 0 l 129 0 z "},"Ί":{"ha":833,"x_min":-160,"x_max":688,"o":"m -160 792 l -82 1014 l 49 1014 l -40 792 l -160 792 m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 z "},"Ό":{"ha":833,"x_min":-111,"x_max":711,"o":"m -111 792 l -33 1014 l 97 1014 l 8 792 l -111 792 m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 736 q 158 893 122 828 q 259 993 193 958 q 417 1028 325 1028 q 574 993 508 1028 q 676 893 640 958 q 711 738 711 828 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 99 q 542 145 499 99 q 586 278 586 192 l 586 736 q 542 869 586 822 q 417 915 499 915 q 292 869 336 915 q 247 736 247 822 l 247 278 q 292 145 247 192 q 417 99 336 99 z "},"Ύ":{"ha":833,"x_min":-174,"x_max":785,"o":"m -174 792 l -96 1014 l 35 1014 l -54 792 l -174 792 m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 z "},"Ώ":{"ha":833,"x_min":-111,"x_max":765,"o":"m 69 0 l 69 111 l 271 111 l 271 118 q 200 147 238 122 q 137 219 163 171 q 111 340 111 267 l 111 729 q 149 888 111 821 q 255 991 186 954 q 417 1028 324 1028 q 579 991 511 1028 q 685 888 647 954 q 722 729 722 821 l 722 340 q 697 219 722 267 q 634 148 671 172 q 563 119 597 124 l 563 111 l 765 111 l 765 0 l 472 0 l 472 153 q 563 203 528 153 q 597 333 597 254 l 597 729 q 548 866 597 815 q 417 917 499 917 q 285 866 335 917 q 236 729 236 815 l 236 333 q 271 203 236 254 q 361 153 306 153 l 361 0 l 69 0 m -111 792 l -33 1014 l 97 1014 l 8 792 l -111 792 z "},"Ϊ":{"ha":833,"x_min":146,"x_max":688,"o":"m 146 0 l 146 114 l 353 114 l 353 900 l 146 900 l 146 1014 l 688 1014 l 688 900 l 481 900 l 481 114 l 688 114 l 688 0 l 146 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ϋ":{"ha":833,"x_min":49,"x_max":785,"o":"m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 m 571 1135 q 506 1158 531 1135 q 482 1222 482 1182 q 506 1288 482 1264 q 571 1313 531 1313 q 635 1288 611 1313 q 660 1222 660 1264 q 635 1158 660 1182 q 571 1135 611 1135 m 263 1135 q 198 1158 222 1135 q 174 1222 174 1182 q 198 1288 174 1264 q 263 1313 222 1313 q 327 1288 303 1313 q 351 1222 351 1264 q 327 1158 351 1182 q 263 1135 303 1135 z "},"Ϗ":{"ha":833,"x_min":128,"x_max":806,"o":"m 506 -250 l 506 -140 l 546 -140 q 647 -102 608 -140 q 686 0 686 -64 l 686 99 l 806 99 l 806 0 q 740 -186 806 -122 q 546 -250 674 -250 l 506 -250 m 128 0 l 128 1014 l 253 1014 l 253 579 l 403 579 l 628 1014 l 764 1014 l 513 526 l 778 0 l 635 0 l 399 469 l 253 469 l 253 0 l 128 0 z "},"α":{"ha":833,"x_min":125,"x_max":703,"o":"m 372 -14 q 191 63 257 -14 q 125 271 125 139 l 125 494 q 192 702 125 626 q 372 778 258 778 q 522 727 467 778 q 578 589 578 676 l 553 618 l 578 618 l 578 764 l 703 764 l 703 0 l 578 0 l 578 146 l 553 146 l 578 175 q 522 38 578 89 q 372 -14 467 -14 m 414 94 q 535 143 492 94 q 578 278 578 192 l 578 486 q 535 621 578 572 q 414 669 492 669 q 292 622 335 669 q 250 486 250 575 l 250 278 q 292 142 250 189 q 414 94 335 94 z "},"β":{"ha":833,"x_min":128,"x_max":736,"o":"m 128 -250 l 128 742 q 164 892 128 828 q 266 992 200 957 q 421 1028 332 1028 q 576 998 510 1028 q 680 910 643 968 q 717 769 717 853 q 674 625 717 685 q 554 543 631 565 q 688 455 639 521 q 736 289 736 389 q 699 139 736 204 q 594 37 661 74 q 438 0 528 0 l 253 0 l 253 -250 l 128 -250 m 253 114 l 424 114 q 556 163 507 114 q 604 293 604 213 q 556 419 604 374 q 424 465 508 465 l 363 465 l 363 574 l 421 574 q 542 622 499 574 q 586 744 586 671 q 542 869 586 825 q 421 914 497 914 q 299 868 344 914 q 253 742 253 822 l 253 114 z "},"γ":{"ha":833,"x_min":83,"x_max":750,"o":"m 354 -250 l 354 0 l 83 764 l 211 764 l 378 257 q 397 195 389 224 q 410 145 404 167 q 417 111 415 124 q 419 99 419 99 q 422 111 419 99 q 430 145 425 124 q 443 195 435 167 q 461 257 451 224 l 624 764 l 750 764 l 479 0 l 479 -250 l 354 -250 z "},"δ":{"ha":833,"x_min":97,"x_max":733,"o":"m 97 301 q 133 457 97 389 q 230 564 168 525 q 371 603 292 603 q 433 595 404 603 q 472 575 461 588 l 478 579 l 150 894 l 150 1014 l 667 1014 l 667 910 l 275 910 l 588 613 q 651 540 618 585 q 709 433 685 494 q 733 299 733 372 q 692 138 733 208 q 580 26 651 67 q 415 -14 508 -14 q 250 26 322 -14 q 138 138 178 67 q 97 301 97 208 m 225 306 q 249 197 225 244 q 317 124 274 150 q 415 97 360 97 q 515 124 472 97 q 583 197 558 150 q 608 306 608 244 q 583 414 608 367 q 515 488 558 461 q 415 514 472 514 q 317 488 360 514 q 249 414 274 461 q 225 306 225 367 z "},"ε":{"ha":833,"x_min":111,"x_max":743,"o":"m 453 -10 l 388 -10 q 186 50 261 -10 q 111 211 111 110 q 156 343 111 297 q 299 396 201 389 l 299 401 q 174 451 218 407 q 129 563 129 494 q 160 675 129 628 q 250 748 192 722 q 390 774 308 774 l 460 774 q 647 718 571 774 q 736 576 722 663 l 604 576 q 556 638 596 613 q 460 663 517 663 l 390 663 q 320 650 349 663 q 276 614 292 638 q 261 556 261 590 q 294 475 261 506 q 392 444 328 444 l 556 444 l 556 336 l 388 336 q 280 304 317 336 q 243 217 243 272 q 281 133 243 165 q 388 101 319 101 l 453 101 q 560 124 518 101 q 611 181 601 146 l 743 181 q 651 42 729 93 q 453 -10 574 -10 z "},"ζ":{"ha":833,"x_min":94,"x_max":751,"o":"m 94 253 q 108 346 94 300 q 154 443 122 392 q 240 559 186 494 q 376 707 294 624 q 572 900 458 790 l 125 900 l 125 1014 l 701 1014 l 701 889 l 467 647 q 350 521 397 576 q 274 419 303 465 q 232 333 244 372 q 219 253 219 293 q 258 149 219 188 q 361 111 296 111 l 551 111 q 703 71 654 111 q 743 -67 751 31 l 726 -250 l 601 -250 l 618 -67 q 551 0 625 0 l 360 0 q 164 67 233 0 q 94 253 94 133 z "},"η":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 -250 l 583 -250 l 583 500 q 540 627 583 582 q 421 672 496 672 q 298 624 343 672 q 253 486 253 575 l 253 0 l 128 0 z "},"θ":{"ha":833,"x_min":122,"x_max":711,"o":"m 417 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 l 122 722 q 158 879 122 814 q 259 979 193 944 q 417 1014 325 1014 q 574 979 508 1014 q 676 879 640 944 q 711 724 711 814 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 m 417 97 q 542 143 499 97 q 586 278 586 189 l 586 722 q 542 857 586 811 q 417 903 499 903 q 292 857 336 903 q 247 722 247 811 l 247 278 q 292 143 247 189 q 417 97 336 97 m 228 556 l 601 556 l 601 447 l 228 447 l 228 556 z "},"ι":{"ha":833,"x_min":76,"x_max":764,"o":"m 576 0 q 460 26 510 0 q 382 101 410 53 q 354 215 354 150 l 354 650 l 76 650 l 76 764 l 479 764 l 479 215 q 506 141 479 168 q 576 114 532 114 l 764 114 l 764 0 l 576 0 z "},"κ":{"ha":833,"x_min":135,"x_max":760,"o":"m 135 0 l 135 764 l 260 764 l 260 449 l 390 449 l 613 764 l 756 764 l 499 400 l 760 0 l 614 0 l 392 340 l 260 340 l 260 0 l 135 0 z "},"λ":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 0 l 368 751 l 265 1014 l 399 1014 l 764 0 l 628 0 l 467 496 q 441 586 451 544 q 428 649 431 628 q 415 586 425 628 q 386 496 404 544 l 206 0 l 69 0 z "},"μ":{"ha":833,"x_min":129,"x_max":704,"o":"m 129 -250 l 129 764 l 254 764 l 254 269 q 297 142 254 188 q 415 96 339 96 q 536 142 493 96 q 579 269 579 188 l 579 764 l 704 764 l 704 269 q 631 63 704 139 q 429 -14 557 -14 q 321 3 365 -14 q 251 46 276 21 q 219 93 226 71 l 214 93 q 221 74 215 93 q 231 30 226 56 q 238 -18 236 4 l 253 -250 l 129 -250 z "},"ν":{"ha":833,"x_min":76,"x_max":757,"o":"m 332 0 l 76 764 l 204 764 l 374 250 q 401 162 389 204 q 419 96 414 119 q 439 162 426 119 q 465 250 451 204 l 631 764 l 757 764 l 501 0 l 332 0 z "},"ξ":{"ha":833,"x_min":92,"x_max":751,"o":"m 92 288 q 140 451 92 386 q 279 543 188 517 q 155 627 199 567 q 111 774 111 688 q 197 962 111 893 q 426 1031 282 1031 q 595 996 525 1031 q 703 897 665 961 q 742 746 742 833 l 617 746 q 565 872 617 824 q 429 919 514 919 q 293 877 344 919 q 242 757 242 835 q 293 628 242 681 q 429 575 344 575 l 553 575 l 553 461 l 429 461 q 277 416 331 461 q 224 288 224 371 q 277 159 224 204 q 429 114 331 114 l 551 114 q 703 74 654 114 q 743 -64 751 33 l 726 -247 l 601 -247 l 618 -64 q 551 3 625 3 l 429 3 q 178 80 265 3 q 92 288 92 157 z "},"ο":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 z "},"π":{"ha":833,"x_min":35,"x_max":771,"o":"m 744 -7 q 576 60 639 -7 q 513 236 513 126 l 513 653 l 271 653 l 271 0 l 146 0 l 146 654 l 35 654 l 35 764 l 769 764 l 769 658 l 638 658 l 638 228 q 663 140 638 171 q 738 110 689 110 l 771 110 l 771 -7 l 744 -7 z "},"ρ":{"ha":833,"x_min":131,"x_max":708,"o":"m 131 -250 l 131 494 q 166 646 131 582 q 267 744 201 710 q 421 778 332 778 q 575 744 511 778 q 674 647 639 710 q 708 494 708 583 l 708 271 q 678 119 708 183 q 594 21 649 56 q 461 -14 539 -14 q 312 38 368 -14 q 256 175 256 89 l 281 146 l 253 146 l 256 -28 l 256 -250 l 131 -250 m 419 94 q 541 142 499 94 q 583 278 583 189 l 583 486 q 541 622 583 575 q 419 669 499 669 q 298 622 340 669 q 256 486 256 575 l 256 278 q 299 143 256 192 q 419 94 343 94 z "},"ς":{"ha":833,"x_min":122,"x_max":754,"o":"m 122 286 l 122 486 q 159 643 122 578 q 263 743 196 708 q 422 778 331 778 q 578 746 511 778 q 682 655 644 714 q 719 514 719 596 l 594 514 q 547 627 594 588 q 422 667 500 667 q 294 620 340 667 q 247 488 247 574 l 247 288 q 294 156 247 200 q 422 111 340 111 l 554 111 q 706 71 657 111 q 746 -67 754 31 l 729 -250 l 604 -250 l 621 -67 q 554 0 628 0 l 422 0 q 203 75 283 0 q 122 286 122 150 z "},"σ":{"ha":833,"x_min":122,"x_max":736,"o":"m 122 278 l 122 486 q 158 643 122 578 q 259 743 193 708 q 417 778 325 778 l 736 778 l 736 667 l 576 667 l 576 642 l 547 669 q 602 656 574 669 q 656 617 631 642 q 696 560 681 593 q 711 488 711 526 l 711 278 q 676 122 711 188 q 574 21 640 56 q 417 -14 508 -14 q 259 21 325 -14 q 158 122 193 56 q 122 278 122 188 m 247 278 q 292 143 247 189 q 417 97 336 97 q 542 143 499 97 q 586 278 586 189 l 586 486 q 542 621 586 575 q 417 667 499 667 q 292 621 336 667 q 247 486 247 575 l 247 278 z "},"τ":{"ha":833,"x_min":76,"x_max":722,"o":"m 535 0 q 381 53 436 0 q 326 201 326 106 l 326 650 l 76 650 l 76 764 l 722 764 l 722 650 l 451 650 l 451 201 q 535 114 451 114 l 708 114 l 708 0 l 535 0 z "},"υ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 z "},"φ":{"ha":833,"x_min":76,"x_max":757,"o":"m 360 -250 l 360 0 q 151 76 226 0 q 76 281 76 151 l 76 764 l 192 764 l 192 281 q 238 147 192 196 q 367 99 283 99 l 367 764 l 517 764 q 692 704 628 764 q 757 542 757 644 l 757 281 q 682 76 757 151 q 474 0 607 0 l 474 -250 l 360 -250 m 467 99 q 595 147 549 99 q 642 281 642 196 l 642 542 q 608 633 642 600 q 517 667 575 667 l 467 667 l 467 99 z "},"χ":{"ha":833,"x_min":56,"x_max":778,"o":"m 56 -250 l 347 264 l 71 764 l 215 764 l 372 464 q 398 413 385 440 q 419 371 411 386 q 440 413 426 386 q 465 464 453 440 l 625 764 l 763 764 l 486 272 l 778 -250 l 635 -250 l 461 72 q 435 123 449 96 q 415 167 422 150 q 395 124 408 150 q 369 74 382 97 l 194 -250 l 56 -250 z "},"ψ":{"ha":833,"x_min":75,"x_max":758,"o":"m 360 -250 l 360 0 q 150 76 225 0 q 75 281 75 151 l 75 764 l 190 764 l 190 281 q 238 147 190 196 q 367 99 285 99 l 367 764 l 467 764 l 467 99 q 596 147 549 99 q 643 281 643 196 l 643 764 l 758 764 l 758 281 q 683 76 758 151 q 474 0 608 0 l 474 -250 l 360 -250 z "},"ω":{"ha":833,"x_min":76,"x_max":757,"o":"m 257 -14 q 125 46 174 -14 q 76 214 76 106 l 76 494 q 131 687 76 610 q 271 778 185 764 l 271 646 q 214 595 236 636 q 192 494 192 554 l 192 213 q 215 128 192 158 q 279 97 238 97 q 344 128 321 97 q 367 213 367 158 l 367 494 l 467 494 l 467 213 q 490 128 467 158 q 554 97 513 97 q 619 128 596 97 q 642 213 642 158 l 642 494 q 617 592 642 554 q 556 639 592 629 l 556 771 q 699 683 642 757 q 757 494 757 610 l 757 214 q 708 46 757 106 q 576 -14 660 -14 q 457 35 501 -14 q 413 169 413 85 l 421 169 q 376 35 421 85 q 257 -14 332 -14 z "},"ί":{"ha":833,"x_min":76,"x_max":764,"o":"m 576 0 q 460 26 510 0 q 382 101 410 53 q 354 215 354 150 l 354 650 l 76 650 l 76 764 l 479 764 l 479 215 q 506 141 479 168 q 576 114 532 114 l 764 114 l 764 0 l 576 0 m 294 896 l 442 1090 l 576 1090 l 422 896 l 294 896 z "},"ϊ":{"ha":833,"x_min":76,"x_max":764,"o":"m 576 0 q 460 26 510 0 q 382 101 410 53 q 354 215 354 150 l 354 650 l 76 650 l 76 764 l 479 764 l 479 215 q 506 141 479 168 q 576 114 532 114 l 764 114 l 764 0 l 576 0 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ΐ":{"ha":833,"x_min":76,"x_max":764,"o":"m 576 0 q 460 26 510 0 q 382 101 410 53 q 354 215 354 150 l 354 650 l 76 650 l 76 764 l 479 764 l 479 215 q 506 141 479 168 q 576 114 532 114 l 764 114 l 764 0 l 576 0 m 360 1068 l 468 1250 l 579 1250 l 457 1068 l 360 1068 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ύ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ϋ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 z "},"ΰ":{"ha":833,"x_min":125,"x_max":708,"o":"m 415 -14 q 204 65 283 -14 q 125 278 125 143 l 125 764 l 250 764 l 250 278 q 294 144 250 192 q 415 96 339 96 q 538 144 493 96 q 583 278 583 192 l 583 764 l 708 764 l 708 278 q 628 65 708 143 q 415 -14 547 -14 m 360 1068 l 468 1250 l 579 1250 l 457 1068 l 360 1068 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"ό":{"ha":833,"x_min":118,"x_max":715,"o":"m 417 -11 q 258 24 325 -11 q 155 124 192 58 q 118 281 118 190 l 118 483 q 155 640 118 575 q 258 740 192 706 q 417 775 325 775 q 575 740 508 775 q 678 640 642 706 q 715 485 715 575 l 715 281 q 678 124 715 190 q 575 24 642 58 q 417 -11 508 -11 m 417 100 q 544 146 499 100 q 590 281 590 192 l 590 483 q 544 618 590 572 q 417 664 499 664 q 290 618 336 664 q 243 483 243 572 l 243 281 q 290 146 243 192 q 417 100 336 100 m 336 896 l 483 1090 l 618 1090 l 464 896 l 336 896 z "},"ώ":{"ha":833,"x_min":76,"x_max":757,"o":"m 257 -14 q 125 46 174 -14 q 76 214 76 106 l 76 494 q 131 687 76 610 q 271 778 185 764 l 271 646 q 214 595 236 636 q 192 494 192 554 l 192 213 q 215 128 192 158 q 279 97 238 97 q 344 128 321 97 q 367 213 367 158 l 367 494 l 467 494 l 467 213 q 490 128 467 158 q 554 97 513 97 q 619 128 596 97 q 642 213 642 158 l 642 494 q 617 592 642 554 q 556 639 592 629 l 556 771 q 699 683 642 757 q 757 494 757 610 l 757 214 q 708 46 757 106 q 576 -14 660 -14 q 457 35 501 -14 q 413 169 413 85 l 421 169 q 376 35 421 85 q 257 -14 332 -14 m 322 896 l 469 1090 l 604 1090 l 450 896 l 322 896 z "},"ά":{"ha":833,"x_min":125,"x_max":703,"o":"m 372 -14 q 191 63 257 -14 q 125 271 125 139 l 125 494 q 192 702 125 626 q 372 778 258 778 q 522 727 467 778 q 578 589 578 676 l 553 618 l 578 618 l 578 764 l 703 764 l 703 0 l 578 0 l 578 146 l 553 146 l 578 175 q 522 38 578 89 q 372 -14 467 -14 m 414 94 q 535 143 492 94 q 578 278 578 192 l 578 486 q 535 621 578 572 q 414 669 492 669 q 292 622 335 669 q 250 486 250 575 l 250 278 q 292 142 250 189 q 414 94 335 94 m 328 896 l 475 1090 l 610 1090 l 456 896 l 328 896 z "},"έ":{"ha":833,"x_min":111,"x_max":743,"o":"m 453 -10 l 388 -10 q 186 50 261 -10 q 111 211 111 110 q 156 343 111 297 q 299 396 201 389 l 299 401 q 174 451 218 407 q 129 563 129 494 q 160 675 129 628 q 250 748 192 722 q 390 774 308 774 l 460 774 q 647 718 571 774 q 736 576 722 663 l 604 576 q 556 638 596 613 q 460 663 517 663 l 390 663 q 320 650 349 663 q 276 614 292 638 q 261 556 261 590 q 294 475 261 506 q 392 444 328 444 l 556 444 l 556 336 l 388 336 q 280 304 317 336 q 243 217 243 272 q 281 133 243 165 q 388 101 319 101 l 453 101 q 560 124 518 101 q 611 181 601 146 l 743 181 q 651 42 729 93 q 453 -10 574 -10 m 314 896 l 461 1090 l 596 1090 l 442 896 l 314 896 z "},"ή":{"ha":833,"x_min":128,"x_max":708,"o":"m 128 0 l 128 764 l 253 764 l 253 618 l 279 618 l 253 589 q 307 728 253 679 q 457 778 361 778 q 640 707 572 778 q 708 514 708 636 l 708 -250 l 583 -250 l 583 500 q 540 627 583 582 q 421 672 496 672 q 298 624 343 672 q 253 486 253 575 l 253 0 l 128 0 m 343 896 l 490 1090 l 625 1090 l 471 896 l 343 896 z "},"ϗ":{"ha":833,"x_min":131,"x_max":764,"o":"m 464 -250 l 464 -140 l 504 -140 q 606 -102 567 -140 q 644 0 644 -64 l 644 99 l 764 99 l 764 0 q 698 -186 764 -122 q 504 -250 632 -250 l 464 -250 m 131 0 l 131 764 l 250 764 l 250 347 q 248 263 250 307 q 242 178 246 218 q 235 111 239 139 l 543 764 l 703 764 l 703 0 l 583 0 l 583 417 q 585 501 583 457 q 592 587 588 546 q 599 654 596 628 l 290 0 l 131 0 z "},"ℕ":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 125 1014 l 304 1014 l 646 236 q 642 326 644 272 q 640 417 640 379 l 640 1014 l 708 1014 l 708 0 l 529 0 l 188 778 q 192 690 190 743 q 193 597 193 636 l 193 0 l 125 0 m 569 54 l 661 54 l 264 960 l 172 960 l 569 54 z "},"₀":{"ha":833,"x_min":201,"x_max":632,"o":"m 417 -167 q 259 -112 317 -167 q 201 40 201 -57 l 201 246 q 259 397 201 342 q 417 451 317 451 q 574 397 517 451 q 632 246 632 342 l 632 40 q 574 -112 632 -57 q 417 -167 517 -167 m 417 -79 q 503 -47 472 -79 q 535 40 535 -15 l 535 246 q 503 333 535 301 q 417 364 472 364 q 330 333 361 364 q 299 246 299 301 l 299 40 q 330 -47 299 -15 q 417 -79 361 -79 z "},"₁":{"ha":833,"x_min":215,"x_max":639,"o":"m 215 -153 l 215 -64 l 397 -64 l 397 350 l 228 229 l 228 339 l 363 438 l 494 438 l 494 -64 l 639 -64 l 639 -153 l 215 -153 z "},"₂":{"ha":833,"x_min":210,"x_max":632,"o":"m 231 -153 l 231 -32 l 456 136 q 503 190 486 158 q 521 251 521 221 q 492 334 521 304 q 414 364 463 364 q 336 334 365 364 q 307 251 307 304 l 210 251 q 269 397 214 343 q 414 451 325 451 q 563 398 508 451 q 617 254 617 344 q 588 156 617 206 q 507 68 558 106 l 329 -64 l 632 -64 l 632 -153 l 231 -153 z "},"₃":{"ha":833,"x_min":189,"x_max":600,"o":"m 394 -167 q 244 -114 300 -167 q 189 28 189 -61 l 285 28 q 314 -50 285 -21 q 394 -79 343 -79 q 472 -50 443 -79 q 500 28 500 -21 q 472 105 500 76 q 396 133 444 133 l 354 133 l 354 226 l 483 350 l 229 350 l 229 439 l 563 439 l 563 329 l 400 175 l 400 214 q 546 164 492 214 q 600 28 600 114 q 544 -114 600 -61 q 394 -167 489 -167 z "},"₄":{"ha":833,"x_min":203,"x_max":594,"o":"m 497 -153 l 497 -25 l 203 -25 l 203 104 l 439 439 l 547 439 l 300 85 l 300 64 l 497 64 l 497 208 l 594 208 l 594 -153 l 497 -153 z "},"₅":{"ha":833,"x_min":190,"x_max":604,"o":"m 396 -167 q 256 -122 311 -167 q 190 0 200 -76 l 288 0 q 324 -58 294 -36 q 396 -79 353 -79 q 475 -49 446 -79 q 504 32 504 -19 q 474 113 504 83 q 393 143 444 143 q 341 132 365 143 q 304 101 317 121 l 214 101 l 214 438 l 578 438 l 578 349 l 311 349 l 311 124 l 296 117 q 342 191 306 164 q 432 218 379 218 q 558 168 511 218 q 604 32 604 118 q 548 -113 604 -60 q 396 -167 492 -167 z "},"₆":{"ha":833,"x_min":201,"x_max":632,"o":"m 418 -167 q 261 -112 321 -167 q 201 32 201 -58 q 217 124 201 75 q 257 213 232 174 l 406 438 l 511 438 l 338 169 l 385 169 l 333 142 q 381 197 344 176 q 465 217 418 217 q 587 167 542 217 q 632 32 632 117 q 574 -112 632 -58 q 418 -167 517 -167 m 417 -81 q 502 -50 471 -81 q 533 32 533 -19 q 502 115 533 85 q 417 144 471 144 q 332 115 364 144 q 300 32 300 85 q 332 -50 300 -19 q 417 -81 364 -81 z "},"₇":{"ha":833,"x_min":215,"x_max":618,"o":"m 293 -153 l 525 349 l 311 349 l 311 261 l 215 261 l 215 438 l 618 438 l 618 326 l 403 -153 l 293 -153 z "},"₈":{"ha":833,"x_min":208,"x_max":625,"o":"m 417 -181 q 265 -137 321 -181 q 208 -19 208 -93 q 246 75 208 31 q 347 144 283 119 l 456 188 q 501 222 485 199 q 518 274 518 246 q 490 333 518 311 q 415 354 463 354 q 343 332 369 354 q 317 272 317 310 q 335 223 317 246 q 385 188 354 200 l 488 147 q 588 78 551 122 q 625 -19 625 33 q 569 -137 625 -93 q 417 -181 513 -181 m 417 -94 q 498 -71 468 -94 q 528 -8 528 -47 q 510 47 528 22 q 463 85 493 72 l 361 128 q 258 199 296 156 q 219 289 219 243 q 273 398 219 358 q 417 438 326 438 q 562 398 508 438 q 615 289 615 358 q 578 199 615 242 q 475 129 540 157 l 368 85 q 322 48 339 72 q 306 -7 306 24 q 335 -71 306 -47 q 417 -94 365 -94 z "},"₉":{"ha":833,"x_min":203,"x_max":633,"o":"m 322 -153 l 497 115 l 450 115 l 501 143 q 454 88 490 108 q 369 68 418 68 q 248 118 293 68 q 203 253 203 168 q 261 397 203 343 q 417 451 319 451 q 574 397 515 451 q 633 253 633 343 q 618 164 633 213 q 576 75 603 115 l 429 -153 l 322 -153 m 418 140 q 503 171 471 140 q 535 253 535 201 q 503 335 535 306 q 418 365 471 365 q 333 335 364 365 q 301 253 301 306 q 333 171 301 201 q 418 140 364 140 z "},"⁰":{"ha":833,"x_min":201,"x_max":632,"o":"m 417 549 q 259 603 317 549 q 201 756 201 658 l 201 961 q 259 1112 201 1057 q 417 1167 317 1167 q 574 1112 517 1167 q 632 961 632 1057 l 632 756 q 574 603 632 658 q 417 549 517 549 m 417 636 q 503 668 472 636 q 535 756 535 700 l 535 961 q 503 1048 535 1017 q 417 1079 472 1079 q 330 1048 361 1079 q 299 961 299 1017 l 299 756 q 330 668 299 700 q 417 636 361 636 z "},"¹":{"ha":833,"x_min":215,"x_max":639,"o":"m 215 563 l 215 651 l 397 651 l 397 1065 l 228 944 l 228 1054 l 363 1153 l 494 1153 l 494 651 l 639 651 l 639 563 l 215 563 z "},"²":{"ha":833,"x_min":210,"x_max":632,"o":"m 231 563 l 231 683 l 456 851 q 503 905 486 874 q 521 967 521 936 q 492 1049 521 1019 q 414 1079 463 1079 q 336 1049 365 1079 q 307 967 307 1019 l 210 967 q 269 1113 214 1058 q 414 1167 325 1167 q 563 1113 508 1167 q 617 969 617 1060 q 588 871 617 921 q 507 783 558 821 l 329 651 l 632 651 l 632 563 l 231 563 z "},"³":{"ha":833,"x_min":189,"x_max":600,"o":"m 394 549 q 244 601 300 549 q 189 743 189 654 l 285 743 q 314 665 285 694 q 394 636 343 636 q 472 665 443 636 q 500 743 500 694 q 472 820 500 792 q 396 849 444 849 l 354 849 l 354 942 l 483 1065 l 229 1065 l 229 1154 l 563 1154 l 563 1044 l 400 890 l 400 929 q 546 879 492 929 q 600 743 600 829 q 544 601 600 654 q 394 549 489 549 z "},"⁴":{"ha":833,"x_min":203,"x_max":594,"o":"m 497 563 l 497 690 l 203 690 l 203 819 l 439 1154 l 547 1154 l 300 800 l 300 779 l 497 779 l 497 924 l 594 924 l 594 563 l 497 563 z "},"⁵":{"ha":833,"x_min":190,"x_max":604,"o":"m 396 549 q 256 594 311 549 q 190 715 200 639 l 288 715 q 324 658 294 679 q 396 636 353 636 q 475 666 446 636 q 504 747 504 696 q 474 828 504 799 q 393 858 444 858 q 341 847 365 858 q 304 817 317 836 l 214 817 l 214 1153 l 578 1153 l 578 1064 l 311 1064 l 311 839 l 296 832 q 342 906 306 879 q 432 933 379 933 q 558 883 511 933 q 604 747 604 833 q 548 602 604 656 q 396 549 492 549 z "},"⁶":{"ha":833,"x_min":201,"x_max":632,"o":"m 418 549 q 261 603 321 549 q 201 747 201 657 q 217 840 201 790 q 257 928 232 889 l 406 1153 l 511 1153 l 338 885 l 385 885 l 333 857 q 381 912 344 892 q 465 932 418 932 q 587 882 542 932 q 632 747 632 832 q 574 603 632 657 q 418 549 517 549 m 417 635 q 502 665 471 635 q 533 747 533 696 q 502 830 533 800 q 417 860 471 860 q 332 830 364 860 q 300 747 300 800 q 332 665 300 696 q 417 635 364 635 z "},"⁷":{"ha":833,"x_min":215,"x_max":618,"o":"m 293 563 l 525 1064 l 311 1064 l 311 976 l 215 976 l 215 1153 l 618 1153 l 618 1042 l 403 563 l 293 563 z "},"⁸":{"ha":833,"x_min":208,"x_max":625,"o":"m 417 549 q 265 592 321 549 q 208 710 208 636 q 246 804 208 760 q 347 874 283 849 l 456 917 q 501 951 485 928 q 518 1003 518 975 q 490 1062 518 1040 q 415 1083 463 1083 q 343 1061 369 1083 q 317 1001 317 1039 q 335 952 317 975 q 385 917 354 929 l 488 876 q 588 807 551 851 q 625 710 625 763 q 569 592 625 636 q 417 549 513 549 m 417 635 q 498 658 468 635 q 528 721 528 682 q 510 776 528 751 q 463 814 493 801 l 361 857 q 258 928 296 885 q 219 1018 219 972 q 273 1127 219 1088 q 417 1167 326 1167 q 562 1127 508 1167 q 615 1018 615 1088 q 578 928 615 971 q 475 858 540 886 l 368 814 q 322 777 339 801 q 306 722 306 753 q 335 658 306 682 q 417 635 365 635 z "},"⁹":{"ha":833,"x_min":203,"x_max":633,"o":"m 322 563 l 497 831 l 450 831 l 501 858 q 454 803 490 824 q 369 783 418 783 q 248 833 293 783 q 203 968 203 883 q 261 1113 203 1058 q 417 1167 319 1167 q 574 1113 515 1167 q 633 968 633 1058 q 618 879 633 928 q 576 790 603 831 l 429 563 l 322 563 m 418 856 q 503 886 471 856 q 535 968 535 917 q 503 1051 535 1021 q 418 1081 471 1081 q 333 1051 364 1081 q 301 968 301 1021 q 333 886 301 917 q 418 856 364 856 z "},"⁄":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 621 1014 l 708 1014 l 213 0 l 125 0 z "},"½":{"ha":833,"x_min":42,"x_max":792,"o":"m 438 0 l 438 89 l 604 185 q 677 241 653 213 q 701 300 701 269 q 676 365 701 340 q 611 389 651 389 q 546 365 571 389 q 521 300 521 340 l 438 300 q 488 415 440 372 q 611 458 536 458 q 737 415 689 458 q 785 303 785 372 q 753 218 785 260 q 665 144 722 176 l 536 72 l 536 58 q 581 65 551 61 q 640 69 610 69 l 792 69 l 792 0 l 438 0 m 42 563 l 42 632 l 206 632 l 206 960 q 188 935 200 950 q 160 907 175 921 l 74 832 l 74 929 l 171 1014 l 289 1014 l 289 632 l 438 632 l 438 563 l 42 563 m 125 0 l 621 1014 l 708 1014 l 213 0 l 125 0 z "},"¼":{"ha":833,"x_min":42,"x_max":750,"o":"m 42 563 l 42 632 l 206 632 l 206 960 q 188 935 200 950 q 160 907 175 921 l 74 832 l 74 929 l 171 1014 l 289 1014 l 289 632 l 424 632 l 424 563 l 42 563 m 667 0 l 667 97 l 424 97 l 424 208 l 599 451 l 694 451 l 507 189 l 507 167 l 667 167 l 667 290 l 750 290 l 750 0 l 667 0 m 125 0 l 621 1014 l 708 1014 l 213 0 l 125 0 z "},"¾":{"ha":833,"x_min":36,"x_max":750,"o":"m 667 0 l 667 97 l 424 97 l 424 208 l 599 451 l 694 451 l 507 189 l 507 167 l 667 167 l 667 290 l 750 290 l 750 0 l 667 0 m 214 556 q 85 596 133 556 q 36 701 36 636 l 119 701 q 145 646 119 667 q 214 625 171 625 q 281 646 256 625 q 307 701 307 667 q 281 757 307 736 q 215 778 256 778 l 174 778 l 174 857 l 286 944 l 69 944 l 69 1014 l 368 1014 l 368 938 l 219 822 l 219 847 q 343 807 296 847 q 390 701 390 767 q 342 596 390 636 q 214 556 293 556 m 125 0 l 621 1014 l 708 1014 l 213 0 l 125 0 z "},".":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 -14 q 333 17 364 -14 q 301 99 301 47 q 333 185 301 153 q 417 217 364 217 q 501 185 469 217 q 532 99 532 153 q 501 17 532 47 q 417 -14 469 -14 z "},",":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 -222 l 340 210 l 521 210 l 340 -222 l 229 -222 z "},":":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 569 q 333 598 365 569 q 301 674 301 626 q 333 749 301 721 q 417 778 365 778 q 501 749 469 778 q 532 674 532 721 q 501 598 532 626 q 417 569 469 569 m 417 -14 q 333 15 365 -14 q 301 90 301 43 q 333 166 301 138 q 417 194 365 194 q 501 166 469 194 q 532 90 532 138 q 501 15 532 43 q 417 -14 469 -14 z "},";":{"ha":833,"x_min":236,"x_max":535,"o":"m 236 -222 l 347 210 l 528 210 l 347 -222 l 236 -222 m 403 569 q 328 599 357 569 q 299 674 299 628 q 328 748 299 718 q 403 778 358 778 l 431 778 q 505 748 475 778 q 535 674 535 718 q 506 599 535 628 q 431 569 476 569 l 403 569 z "},"…":{"ha":833,"x_min":83,"x_max":750,"o":"m 681 -14 q 631 7 650 -14 q 611 63 611 28 l 611 160 q 631 215 611 194 q 681 236 650 236 q 731 215 713 236 q 750 160 750 194 l 750 63 q 731 7 750 28 q 681 -14 713 -14 m 153 -14 q 103 7 122 -14 q 83 63 83 28 l 83 160 q 103 215 83 194 q 153 236 122 236 q 203 215 185 236 q 222 160 222 194 l 222 63 q 203 7 222 28 q 153 -14 185 -14 m 417 -14 q 367 7 386 -14 q 347 63 347 28 l 347 160 q 367 215 347 194 q 417 236 386 236 q 467 215 449 236 q 486 160 486 194 l 486 63 q 467 7 486 28 q 417 -14 449 -14 z "},"!":{"ha":833,"x_min":313,"x_max":521,"o":"m 372 299 l 343 847 l 343 1014 l 490 1014 l 490 847 l 461 299 l 372 299 m 396 -7 q 336 17 360 -7 q 313 76 313 40 q 336 136 313 113 q 396 160 360 160 l 438 160 q 499 137 478 160 q 521 78 521 114 q 497 17 521 42 q 438 -7 474 -7 l 396 -7 z "},"¡":{"ha":833,"x_min":313,"x_max":521,"o":"m 343 -250 l 343 -76 l 372 467 l 461 467 l 490 -76 l 490 -250 l 343 -250 m 403 606 q 338 629 363 606 q 313 690 313 653 q 338 750 313 728 q 403 772 363 772 l 431 772 q 496 751 471 772 q 521 692 521 729 q 496 629 521 653 q 431 606 471 606 l 403 606 z "},"?":{"ha":833,"x_min":188,"x_max":681,"o":"m 293 285 l 293 535 l 363 535 q 503 584 451 535 q 556 715 556 633 q 503 847 556 797 q 361 896 451 896 l 188 896 l 188 1014 l 361 1014 q 530 977 458 1014 q 641 874 601 940 q 681 715 681 807 q 647 573 681 636 q 555 472 614 510 q 418 431 496 435 l 418 285 l 293 285 m 333 -7 q 274 17 297 -7 q 250 76 250 40 q 274 136 250 113 q 333 160 297 160 l 375 160 q 437 137 415 160 q 458 78 458 114 q 435 17 458 42 q 375 -7 411 -7 l 333 -7 z "},"¿":{"ha":833,"x_min":153,"x_max":646,"o":"m 472 -236 q 302 -201 374 -236 q 192 -99 231 -165 q 153 56 153 -33 q 185 196 153 135 q 277 293 218 257 q 415 333 336 329 l 415 479 l 540 479 l 540 229 l 471 229 q 330 183 382 229 q 278 56 278 138 q 330 -72 278 -25 q 472 -118 382 -118 l 646 -118 l 646 -236 l 472 -236 m 465 604 q 400 628 425 604 q 375 689 375 651 q 400 749 375 726 q 465 771 425 771 l 493 771 q 558 749 533 771 q 583 690 583 728 q 558 628 583 651 q 493 604 533 604 l 465 604 z "},"·":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 361 q 333 392 364 361 q 301 474 301 422 q 333 560 301 528 q 417 592 364 592 q 501 560 469 592 q 532 474 532 528 q 501 392 532 422 q 417 361 469 361 z "},"•":{"ha":833,"x_min":250,"x_max":583,"o":"m 417 340 q 297 388 344 340 q 250 507 250 435 q 297 627 250 581 q 417 674 344 674 q 537 627 490 674 q 583 507 583 581 q 537 388 583 435 q 417 340 490 340 z "},"*":{"ha":833,"x_min":49,"x_max":785,"o":"m 251 131 l 151 200 l 226 308 q 269 360 244 335 q 320 409 294 386 q 365 449 346 432 l 361 458 q 301 465 335 461 q 234 476 268 468 q 171 493 200 483 l 49 538 l 90 653 l 213 608 q 273 581 242 599 q 333 545 304 564 q 383 510 363 526 l 390 515 q 375 576 383 542 q 361 647 367 610 q 356 715 356 683 l 356 847 l 478 847 l 478 715 q 472 647 478 683 q 458 576 467 610 q 442 515 450 542 l 449 510 q 499 545 471 526 q 559 581 528 564 q 619 608 590 599 l 743 653 l 785 538 l 661 493 q 599 476 633 483 q 532 465 565 468 q 472 458 499 461 l 467 447 q 513 408 488 431 q 563 359 539 385 q 604 308 588 333 l 681 200 l 581 131 l 504 239 q 472 296 488 264 q 442 360 456 328 q 421 417 429 392 l 411 417 q 390 360 403 392 q 360 296 376 328 q 326 239 344 264 l 251 131 z "},"#":{"ha":833,"x_min":49,"x_max":785,"o":"m 115 0 l 167 278 l 49 278 l 49 368 l 183 368 l 233 646 l 97 646 l 97 736 l 250 736 l 301 1014 l 399 1014 l 347 736 l 569 736 l 621 1014 l 718 1014 l 667 736 l 785 736 l 785 646 l 650 646 l 600 368 l 736 368 l 736 278 l 583 278 l 532 0 l 435 0 l 486 278 l 264 278 l 213 0 l 115 0 m 281 368 l 503 368 l 553 646 l 331 646 l 281 368 z "},"․":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 -14 q 333 17 364 -14 q 301 99 301 47 q 333 185 301 153 q 417 217 364 217 q 501 185 469 217 q 532 99 532 153 q 501 17 532 47 q 417 -14 469 -14 z "},"/":{"ha":833,"x_min":104,"x_max":729,"o":"m 104 -153 l 597 1153 l 729 1153 l 236 -153 l 104 -153 z "},"\\\\":{"ha":833,"x_min":104,"x_max":729,"o":"m 597 -153 l 104 1153 l 236 1153 l 729 -153 l 597 -153 z "},"(":{"ha":833,"x_min":257,"x_max":674,"o":"m 674 -167 q 367 25 476 -118 q 257 375 257 168 l 257 625 q 308 872 257 761 q 452 1058 358 982 q 674 1167 546 1135 l 674 1049 q 519 969 585 1028 q 418 822 454 910 q 382 625 382 735 l 382 375 q 417 181 382 268 q 519 35 453 93 q 674 -43 585 -22 l 674 -167 z "},")":{"ha":833,"x_min":160,"x_max":576,"o":"m 160 -167 l 160 -43 q 315 35 250 -22 q 416 181 381 93 q 451 375 451 268 l 451 625 q 415 822 451 735 q 314 969 379 910 q 160 1049 249 1028 l 160 1167 q 382 1058 289 1135 q 526 872 475 982 q 576 625 576 761 l 576 375 q 467 25 576 168 q 160 -167 357 -118 z "},"{":{"ha":833,"x_min":118,"x_max":715,"o":"m 653 -153 q 512 -126 571 -153 q 422 -47 453 -99 q 396 78 392 6 l 410 306 q 388 412 414 379 q 271 444 361 444 l 118 444 l 118 556 l 271 556 q 388 588 361 556 q 410 694 414 621 l 396 922 q 422 1047 392 996 q 512 1126 453 1099 q 653 1153 571 1153 l 715 1153 l 715 1042 l 653 1042 q 553 1012 588 1042 q 521 922 518 982 l 535 694 q 492 551 540 604 q 354 497 443 497 l 354 504 q 491 450 442 504 q 535 306 540 396 l 521 78 q 553 -12 518 18 q 653 -42 588 -42 l 715 -42 l 715 -153 l 653 -153 z "},"}":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 -153 l 118 -42 l 181 -42 q 281 -12 246 -42 q 313 78 315 18 l 299 306 q 342 450 293 396 q 479 504 392 504 l 479 497 q 342 551 390 497 q 299 694 293 604 l 313 922 q 281 1012 315 982 q 181 1042 246 1042 l 118 1042 l 118 1153 l 181 1153 q 322 1126 263 1153 q 411 1047 381 1099 q 438 922 442 996 l 424 694 q 446 588 419 621 q 563 556 472 556 l 715 556 l 715 444 l 563 444 q 447 412 474 444 q 424 306 419 379 l 438 78 q 411 -47 442 6 q 322 -126 381 -99 q 181 -153 263 -153 l 118 -153 z "},"[":{"ha":833,"x_min":285,"x_max":625,"o":"m 285 -153 l 285 1153 l 625 1153 l 625 1042 l 410 1042 l 410 -42 l 625 -42 l 625 -153 l 285 -153 z "},"]":{"ha":833,"x_min":208,"x_max":549,"o":"m 208 -153 l 208 -42 l 424 -42 l 424 1042 l 208 1042 l 208 1153 l 549 1153 l 549 -153 l 208 -153 z "},"❰":{"ha":833,"x_min":153,"x_max":688,"o":"m 338 0 l 153 504 l 338 1014 l 688 1014 l 503 507 l 688 0 l 338 0 z "},"❮":{"ha":833,"x_min":208,"x_max":629,"o":"m 396 0 l 208 504 l 396 1014 l 629 1014 l 442 507 l 629 0 l 396 0 z "},"❱":{"ha":833,"x_min":146,"x_max":681,"o":"m 496 0 l 681 504 l 496 1014 l 146 1014 l 331 507 l 146 0 l 496 0 z "},"❯":{"ha":833,"x_min":204,"x_max":625,"o":"m 438 0 l 625 504 l 438 1014 l 204 1014 l 392 507 l 204 0 l 438 0 z "},"-":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 403 l 194 514 l 639 514 l 639 403 l 194 403 z "},"­":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 403 l 194 514 l 639 514 l 639 403 l 194 403 z "},"–":{"ha":833,"x_min":111,"x_max":722,"o":"m 111 403 l 111 514 l 722 514 l 722 403 l 111 403 z "},"—":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 403 l 0 514 l 833 514 l 833 403 l 0 403 z "},"‐":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 403 l 194 514 l 639 514 l 639 403 l 194 403 z "},"_":{"ha":833,"x_min":83,"x_max":750,"o":"m 83 -139 l 83 -35 l 750 -35 l 750 -139 l 83 -139 z "},"‚":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 -222 l 340 210 l 521 210 l 340 -222 l 229 -222 z "},"„":{"ha":833,"x_min":118,"x_max":729,"o":"m 438 -222 l 549 210 l 729 210 l 549 -222 l 438 -222 m 118 -222 l 229 210 l 410 210 l 229 -222 l 118 -222 z "},"“":{"ha":833,"x_min":104,"x_max":715,"o":"m 424 646 l 604 1078 l 715 1078 l 604 646 l 424 646 m 104 646 l 285 1078 l 396 1078 l 285 646 l 104 646 z "},"”":{"ha":833,"x_min":118,"x_max":729,"o":"m 438 646 l 549 1078 l 729 1078 l 549 646 l 438 646 m 118 646 l 229 1078 l 410 1078 l 229 646 l 118 646 z "},"‘":{"ha":833,"x_min":319,"x_max":611,"o":"m 611 1076 l 500 644 l 319 644 l 500 1076 l 611 1076 z "},"’":{"ha":833,"x_min":222,"x_max":514,"o":"m 222 646 l 333 1078 l 514 1078 l 333 646 l 222 646 z "},"«":{"ha":833,"x_min":42,"x_max":792,"o":"m 646 56 l 365 389 l 644 722 l 792 722 l 506 392 l 792 56 l 646 56 m 322 56 l 42 389 l 321 722 l 468 722 l 182 392 l 468 56 l 322 56 z "},"»":{"ha":833,"x_min":42,"x_max":792,"o":"m 367 56 l 647 390 l 365 722 l 511 722 l 792 389 l 513 56 l 367 56 m 43 56 l 324 390 l 42 722 l 188 722 l 468 389 l 189 56 l 43 56 z "},"‹":{"ha":833,"x_min":204,"x_max":631,"o":"m 485 56 l 204 389 l 485 722 l 626 722 l 343 392 l 631 56 l 485 56 z "},"›":{"ha":833,"x_min":204,"x_max":631,"o":"m 208 56 l 492 386 l 204 722 l 350 722 l 631 389 l 350 56 l 208 56 z "},"\\"":{"ha":833,"x_min":208,"x_max":625,"o":"m 507 597 l 490 889 l 490 1014 l 625 1014 l 625 889 l 610 597 l 507 597 m 225 597 l 208 889 l 208 1014 l 343 1014 l 343 889 l 328 597 l 225 597 z "},"\'":{"ha":833,"x_min":342,"x_max":476,"o":"m 358 597 l 342 806 l 342 1014 l 476 1014 l 476 806 l 461 597 l 358 597 z "},"⟨":{"ha":833,"x_min":174,"x_max":674,"o":"m 524 -160 l 174 403 l 174 572 l 524 1132 l 665 1132 l 276 483 l 674 -160 l 524 -160 z "},"⟩":{"ha":833,"x_min":160,"x_max":660,"o":"m 160 -160 l 557 483 l 168 1132 l 310 1132 l 660 572 l 660 403 l 310 -160 l 160 -160 z "},"·":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 361 q 333 392 364 361 q 301 474 301 422 q 333 560 301 528 q 417 592 364 592 q 501 560 469 592 q 532 474 532 528 q 501 392 532 422 q 417 361 469 361 z "},";":{"ha":833,"x_min":236,"x_max":535,"o":"m 236 -222 l 347 210 l 528 210 l 347 -222 l 236 -222 m 403 569 q 328 599 357 569 q 299 674 299 628 q 328 748 299 718 q 403 778 358 778 l 431 778 q 505 748 475 778 q 535 674 535 718 q 506 599 535 628 q 431 569 476 569 l 403 569 z "}," ":{"ha":833,"x_min":0,"x_max":0,"o":""}," ":{"ha":833,"x_min":0,"x_max":0,"o":""},"\\r":{"ha":833,"x_min":0,"x_max":0,"o":""},"\ufeff":{"ha":0,"x_min":0,"x_max":0,"o":""},"₿":{"ha":833,"x_min":129,"x_max":736,"o":"m 249 -194 l 249 0 l 129 0 l 129 1014 l 249 1014 l 249 1210 l 332 1210 l 332 1014 l 429 1014 l 429 1210 l 513 1210 l 513 1004 q 660 917 607 982 q 713 751 713 851 q 694 653 713 696 q 642 580 676 610 q 560 536 608 550 q 654 486 615 521 q 715 399 693 451 q 736 282 736 347 q 677 99 736 171 q 513 7 618 26 l 513 -194 l 429 -194 l 429 0 l 332 0 l 332 -194 l 249 -194 m 251 113 l 424 113 q 562 159 511 113 q 613 286 613 206 q 562 422 613 369 q 424 474 511 474 l 251 474 l 251 113 m 251 582 l 415 582 q 542 625 496 582 q 589 742 589 668 q 543 858 589 815 q 417 901 497 901 l 251 901 l 251 582 z "},"¢":{"ha":833,"x_min":118,"x_max":719,"o":"m 389 -194 l 389 958 l 472 958 l 472 -194 l 389 -194 m 422 -14 q 262 21 331 -14 q 156 122 193 56 q 118 278 118 188 l 118 486 q 156 643 118 578 q 262 743 193 708 q 422 778 331 778 q 635 707 554 778 q 719 514 715 636 l 594 514 q 545 627 590 588 q 422 667 500 667 q 292 620 340 667 q 243 488 243 574 l 243 278 q 292 144 243 192 q 422 97 340 97 q 545 138 500 97 q 594 250 590 178 l 719 250 q 635 57 715 128 q 422 -14 554 -14 z "},"¤":{"ha":833,"x_min":60,"x_max":775,"o":"m 688 157 l 567 278 q 498 248 536 258 q 418 238 460 238 q 337 248 375 238 q 267 278 299 258 l 149 160 l 63 246 l 178 363 q 144 435 156 394 q 132 518 132 475 q 144 602 132 563 q 179 675 157 642 l 60 794 l 147 882 l 269 760 q 339 789 301 779 q 418 799 376 799 q 572 756 506 799 l 689 872 l 774 788 l 658 672 q 690 600 679 639 q 701 518 701 561 q 690 435 701 475 q 657 363 678 396 l 775 244 l 688 157 m 418 333 q 510 358 469 333 q 575 424 551 382 q 599 518 599 465 q 575 613 599 571 q 510 678 551 654 q 418 703 469 703 q 325 678 367 703 q 259 613 283 654 q 235 518 235 571 q 259 424 235 465 q 325 358 283 382 q 418 333 367 333 z "},"$":{"ha":833,"x_min":100,"x_max":733,"o":"m 382 -194 l 382 -12 q 177 72 251 -1 q 100 264 103 144 l 225 264 q 266 153 225 196 q 382 100 307 110 l 382 464 l 344 475 q 184 582 240 507 q 128 758 128 657 q 197 942 128 869 q 382 1025 265 1014 l 382 1208 l 465 1208 l 465 1026 q 650 943 581 1015 q 721 757 719 871 l 596 757 q 562 863 596 822 q 465 914 528 904 l 465 569 l 521 551 q 678 443 622 519 q 733 264 733 367 q 660 75 733 150 q 465 -12 588 0 l 465 -194 l 382 -194 m 465 100 q 571 153 533 111 q 608 261 608 194 q 576 368 608 322 q 482 432 543 414 l 465 438 l 465 100 m 382 540 l 382 914 q 287 867 321 904 q 253 769 253 829 q 297 648 253 697 q 425 586 342 599 l 382 540 z "},"₫":{"ha":833,"x_min":125,"x_max":833,"o":"m 372 69 q 192 146 258 69 q 125 353 125 222 l 125 410 q 191 618 125 542 q 372 694 257 694 q 522 643 467 694 q 578 506 578 592 l 553 535 l 581 535 l 578 708 l 578 1014 l 703 1014 l 703 83 l 578 83 l 578 229 l 553 229 l 578 258 q 522 120 578 171 q 372 69 467 69 m 125 -111 l 125 0 l 708 0 l 708 -111 l 125 -111 m 414 178 q 535 226 492 178 q 578 361 578 275 l 578 403 q 535 538 578 489 q 414 586 492 586 q 292 539 335 586 q 250 403 250 492 l 250 361 q 292 225 250 272 q 414 178 335 178 m 417 792 l 417 896 l 833 896 l 833 792 l 417 792 z "},"€":{"ha":833,"x_min":26,"x_max":750,"o":"m 444 -14 q 283 23 351 -14 q 176 127 214 60 q 139 285 139 194 l 139 340 l 26 340 l 26 431 l 139 431 l 139 569 l 26 569 l 26 660 l 139 660 l 139 715 q 176 874 139 807 q 283 977 214 940 q 444 1014 351 1014 q 596 981 531 1014 q 701 888 661 949 q 750 743 740 828 l 625 743 q 569 860 617 818 q 444 903 521 903 q 313 853 361 903 q 264 715 264 803 l 264 660 l 493 660 l 493 569 l 264 569 l 264 431 l 493 431 l 493 340 l 264 340 l 264 285 q 312 147 264 197 q 444 97 360 97 q 569 140 521 97 q 625 257 617 182 l 750 257 q 701 112 740 172 q 596 19 661 51 q 444 -14 531 -14 z "},"ƒ":{"ha":833,"x_min":0,"x_max":743,"o":"m 0 -250 l 0 -136 l 146 -136 q 263 -94 219 -136 q 306 21 306 -51 l 306 435 l 83 435 l 83 549 l 306 549 l 306 821 q 362 963 306 913 q 519 1014 418 1014 l 743 1014 l 743 903 l 519 903 q 453 882 475 903 q 431 819 431 861 l 431 549 l 743 549 l 743 435 l 431 435 l 431 21 q 395 -122 431 -61 q 296 -217 360 -183 q 146 -250 232 -250 l 0 -250 z "},"₽":{"ha":833,"x_min":42,"x_max":764,"o":"m 153 0 l 153 215 l 42 215 l 42 326 l 153 326 l 153 444 l 42 444 l 42 556 l 153 556 l 153 1014 l 463 1014 q 622 978 554 1014 q 726 879 689 943 q 764 729 764 815 q 726 580 764 644 q 622 480 689 515 q 463 444 554 444 l 278 444 l 278 326 l 597 326 l 597 215 l 278 215 l 278 0 l 153 0 m 278 556 l 463 556 q 588 603 542 556 q 635 729 635 650 q 588 856 635 808 q 463 903 542 903 l 278 903 l 278 556 z "},"£":{"ha":833,"x_min":104,"x_max":743,"o":"m 104 0 l 104 139 q 172 202 138 165 q 231 278 207 239 q 256 353 256 318 q 242 456 256 413 q 208 536 228 500 q 167 606 188 572 q 133 678 147 639 q 119 771 119 718 q 156 908 119 850 q 258 997 192 965 q 417 1028 325 1028 q 575 997 508 1028 q 678 906 642 965 q 715 764 714 847 l 583 764 q 538 875 583 833 q 415 917 492 917 q 290 877 335 917 q 246 764 246 838 q 260 688 246 721 q 294 625 274 656 q 334 560 314 594 q 368 478 354 525 q 382 365 382 432 q 358 255 382 306 q 298 167 333 204 q 229 111 263 131 l 743 111 l 743 0 l 104 0 m 104 424 l 104 535 l 604 535 l 604 424 l 104 424 z "},"₮":{"ha":833,"x_min":63,"x_max":771,"o":"m 356 0 l 356 254 l 111 188 l 111 292 l 356 358 l 356 497 l 111 431 l 111 535 l 356 601 l 356 904 l 63 904 l 63 1014 l 771 1014 l 771 904 l 478 904 l 478 635 l 722 701 l 722 597 l 478 531 l 478 392 l 722 458 l 722 354 l 478 288 l 478 0 l 356 0 z "},"¥":{"ha":833,"x_min":49,"x_max":785,"o":"m 83 375 l 83 479 l 750 479 l 750 375 l 83 375 m 83 167 l 83 271 l 750 271 l 750 167 l 83 167 m 354 0 l 354 379 l 49 1014 l 178 1014 l 379 597 q 406 538 396 563 q 418 503 415 514 q 431 538 421 514 q 458 597 442 563 l 656 1014 l 785 1014 l 479 379 l 479 0 l 354 0 z "},"∙":{"ha":833,"x_min":301,"x_max":532,"o":"m 417 333 q 333 364 364 333 q 301 446 301 394 q 333 532 301 500 q 417 564 364 564 q 501 532 469 564 q 532 446 532 500 q 501 364 532 394 q 417 333 469 333 z "},"∐":{"ha":833,"x_min":56,"x_max":778,"o":"m 56 -250 l 56 -136 l 146 -136 l 146 1014 l 271 1014 l 271 -136 l 563 -136 l 563 1014 l 688 1014 l 688 -136 l 778 -136 l 778 -250 l 56 -250 z "},"∣":{"ha":833,"x_min":354,"x_max":479,"o":"m 354 0 l 354 1014 l 479 1014 l 479 0 l 354 0 z "},"∕":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 0 l 621 1014 l 708 1014 l 213 0 l 125 0 z "},"∈":{"ha":833,"x_min":49,"x_max":792,"o":"m 368 97 q 209 137 282 97 q 92 245 136 176 q 49 400 49 314 l 49 600 q 92 755 49 686 q 209 863 136 824 q 368 903 282 903 l 792 903 l 792 792 l 368 792 q 269 765 314 792 q 199 693 225 738 q 174 597 174 649 l 174 556 l 792 556 l 792 444 l 174 444 l 174 403 q 199 307 174 351 q 269 235 225 263 q 368 208 314 208 l 792 208 l 792 97 l 368 97 z "},"≡":{"ha":833,"x_min":111,"x_max":722,"o":"m 111 667 l 111 764 l 722 764 l 722 667 l 111 667 m 111 153 l 111 250 l 722 250 l 722 153 l 111 153 m 111 410 l 111 507 l 722 507 l 722 410 l 111 410 z "},"∃":{"ha":833,"x_min":111,"x_max":694,"o":"m 111 0 l 111 114 l 569 114 l 569 472 l 160 472 l 160 586 l 569 586 l 569 900 l 111 900 l 111 1014 l 694 1014 l 694 0 l 111 0 z "},"≉":{"ha":833,"x_min":90,"x_max":743,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 90 493 l 90 590 q 140 722 90 672 q 271 771 190 771 q 358 753 322 771 q 420 708 394 735 q 467 653 446 681 q 510 608 488 626 q 560 590 532 590 q 608 610 592 590 q 625 667 625 629 l 625 764 l 743 764 l 743 667 q 694 536 743 586 q 563 486 644 486 q 475 504 511 486 q 413 549 439 522 q 367 603 388 576 q 324 649 346 631 q 274 667 301 667 q 226 647 243 667 q 208 590 208 628 l 208 493 l 90 493 m 90 153 l 90 250 q 140 381 90 332 q 271 431 190 431 q 358 413 322 431 q 420 367 394 394 q 467 313 446 340 q 510 268 488 286 q 560 250 532 250 q 608 269 592 250 q 625 326 625 289 l 625 424 l 743 424 l 743 326 q 694 196 743 246 q 563 146 644 146 q 475 164 511 146 q 413 209 439 182 q 367 263 388 236 q 324 308 346 290 q 274 326 301 326 q 226 307 243 326 q 208 250 208 288 l 208 153 l 90 153 z "},"∌":{"ha":833,"x_min":49,"x_max":792,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 49 97 l 49 208 l 472 208 q 572 235 528 208 q 641 307 615 263 q 667 403 667 351 l 667 444 l 49 444 l 49 556 l 667 556 l 667 597 q 641 693 667 649 q 572 765 615 738 q 472 792 528 792 l 49 792 l 49 903 l 472 903 q 632 863 560 903 q 748 755 704 824 q 792 600 792 686 l 792 400 q 748 245 792 314 q 632 137 704 176 q 472 97 560 97 l 49 97 z "},"∉":{"ha":833,"x_min":49,"x_max":792,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 368 97 q 209 137 282 97 q 92 245 136 176 q 49 400 49 314 l 49 600 q 92 755 49 686 q 209 863 136 824 q 368 903 282 903 l 792 903 l 792 792 l 368 792 q 269 765 314 792 q 199 693 225 738 q 174 597 174 649 l 174 556 l 792 556 l 792 444 l 174 444 l 174 403 q 199 307 174 351 q 269 235 225 263 q 368 208 314 208 l 792 208 l 792 97 l 368 97 z "},"⊄":{"ha":833,"x_min":49,"x_max":792,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 368 167 q 201 204 272 167 q 89 310 129 242 q 49 469 49 379 l 49 531 q 89 690 49 622 q 201 796 129 758 q 368 833 272 833 l 792 833 l 792 719 l 368 719 q 224 669 275 719 q 174 528 174 619 l 174 472 q 224 331 174 381 q 368 281 275 281 l 792 281 l 792 167 l 368 167 z "},"⊅":{"ha":833,"x_min":42,"x_max":785,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 42 167 l 42 281 l 465 281 q 609 331 558 281 q 660 472 660 381 l 660 528 q 609 669 660 619 q 465 719 558 719 l 42 719 l 42 833 l 465 833 q 633 796 561 833 q 744 690 704 758 q 785 531 785 622 l 785 469 q 744 310 785 379 q 633 204 704 242 q 465 167 561 167 l 42 167 z "},"+":{"ha":833,"x_min":90,"x_max":743,"o":"m 356 132 l 356 403 l 90 403 l 90 514 l 356 514 l 356 785 l 478 785 l 478 514 l 743 514 l 743 403 l 478 403 l 478 132 l 356 132 z "},"−":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 403 l 194 514 l 639 514 l 639 403 l 194 403 z "},"×":{"ha":833,"x_min":146,"x_max":686,"o":"m 217 189 l 146 261 l 342 457 l 146 654 l 217 725 l 414 529 l 615 731 l 686 658 l 485 457 l 682 261 l 610 189 l 414 386 l 217 189 z "},"÷":{"ha":833,"x_min":139,"x_max":694,"o":"m 139 410 l 139 514 l 694 514 l 694 410 l 139 410 m 403 118 q 338 140 363 118 q 313 200 313 161 q 338 261 313 238 q 403 285 363 285 l 431 285 q 496 261 471 285 q 521 200 521 238 q 496 140 521 163 q 431 118 471 118 l 403 118 m 403 639 q 338 660 363 639 q 313 721 313 682 q 338 782 313 758 q 403 806 363 806 l 431 806 q 496 782 471 806 q 521 721 521 758 q 496 661 521 683 q 431 639 471 639 l 403 639 z "},"=":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 569 l 118 681 l 715 681 l 715 569 l 118 569 m 118 236 l 118 347 l 715 347 l 715 236 l 118 236 z "},"≠":{"ha":833,"x_min":118,"x_max":715,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 m 118 569 l 118 681 l 715 681 l 715 569 l 118 569 m 118 236 l 118 347 l 715 347 l 715 236 l 118 236 z "},">":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 90 l 118 211 l 549 422 q 598 444 575 435 q 632 456 621 453 q 596 467 619 458 q 549 489 572 476 l 118 701 l 118 826 l 715 528 l 715 389 l 118 90 z "},"<":{"ha":833,"x_min":118,"x_max":715,"o":"m 715 90 l 118 389 l 118 528 l 715 826 l 715 706 l 285 494 q 235 473 258 482 q 201 461 213 464 q 238 449 214 458 q 285 428 261 440 l 715 215 l 715 90 z "},"≥":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 111 l 715 111 l 715 0 l 118 0 m 118 264 l 118 385 l 549 596 q 598 617 575 608 q 632 629 621 626 q 596 641 619 632 q 549 663 572 650 l 118 875 l 118 1000 l 715 701 l 715 563 l 118 264 z "},"≤":{"ha":833,"x_min":118,"x_max":715,"o":"m 118 0 l 118 111 l 715 111 l 715 0 l 118 0 m 715 264 l 118 563 l 118 701 l 715 1000 l 715 879 l 285 668 q 235 647 258 656 q 201 635 213 638 q 238 623 214 632 q 285 601 261 614 l 715 389 l 715 264 z "},"±":{"ha":833,"x_min":90,"x_max":743,"o":"m 97 0 l 97 97 l 356 97 l 356 410 l 90 410 l 90 521 l 356 521 l 356 792 l 478 792 l 478 521 l 743 521 l 743 410 l 478 410 l 478 97 l 736 97 l 736 0 l 97 0 z "},"≈":{"ha":833,"x_min":90,"x_max":743,"o":"m 90 493 l 90 590 q 140 722 90 672 q 271 771 190 771 q 358 753 322 771 q 420 708 394 735 q 467 653 446 681 q 510 608 488 626 q 560 590 532 590 q 608 610 592 590 q 625 667 625 629 l 625 764 l 743 764 l 743 667 q 694 536 743 586 q 563 486 644 486 q 475 504 511 486 q 413 549 439 522 q 367 603 388 576 q 324 649 346 631 q 274 667 301 667 q 226 647 243 667 q 208 590 208 628 l 208 493 l 90 493 m 90 153 l 90 250 q 140 381 90 332 q 271 431 190 431 q 358 413 322 431 q 420 367 394 394 q 467 313 446 340 q 510 268 488 286 q 560 250 532 250 q 608 269 592 250 q 625 326 625 289 l 625 424 l 743 424 l 743 326 q 694 196 743 246 q 563 146 644 146 q 475 164 511 146 q 413 209 439 182 q 367 263 388 236 q 324 308 346 290 q 274 326 301 326 q 226 307 243 326 q 208 250 208 288 l 208 153 l 90 153 z "},"~":{"ha":833,"x_min":90,"x_max":743,"o":"m 90 354 l 90 451 q 140 583 90 533 q 271 632 190 632 q 358 614 322 632 q 420 569 394 596 q 467 515 446 542 q 510 469 488 488 q 560 451 532 451 q 608 471 592 451 q 625 528 625 490 l 625 625 l 743 625 l 743 528 q 694 397 743 447 q 563 347 644 347 q 475 365 511 347 q 413 410 439 383 q 367 465 388 438 q 324 510 346 492 q 274 528 301 528 q 226 508 243 528 q 208 451 208 489 l 208 354 l 90 354 z "},"¬":{"ha":833,"x_min":97,"x_max":736,"o":"m 618 285 l 618 465 l 97 465 l 97 576 l 736 576 l 736 285 l 618 285 z "},"^":{"ha":833,"x_min":111,"x_max":722,"o":"m 111 472 l 360 1014 l 476 1014 l 722 472 l 610 472 l 454 831 q 434 884 443 858 q 421 924 425 910 q 406 884 415 910 q 383 831 396 858 l 224 472 l 111 472 z "},"∞":{"ha":833,"x_min":49,"x_max":785,"o":"m 231 222 q 99 274 149 222 q 49 410 49 325 l 49 514 q 101 650 49 599 q 239 701 154 701 q 358 666 310 701 q 431 564 407 631 l 435 564 q 462 626 442 594 q 517 679 482 657 q 603 701 553 701 q 735 650 685 701 q 785 514 785 599 l 785 410 q 733 274 785 325 q 594 222 681 222 q 475 258 524 222 q 403 360 426 293 l 399 360 q 372 299 393 331 q 317 244 351 267 q 231 222 282 222 m 243 306 q 308 322 283 306 q 348 360 333 338 q 369 401 363 382 q 378 429 376 421 l 335 546 q 243 618 304 618 q 173 590 200 618 q 146 514 146 561 l 146 410 q 173 334 146 363 q 243 306 200 306 m 590 306 q 661 334 635 306 q 688 410 688 363 l 688 514 q 661 590 688 561 q 590 618 635 618 q 526 602 551 618 q 485 564 500 586 q 464 522 471 542 q 456 494 457 503 l 499 378 q 537 324 514 342 q 590 306 560 306 z "},"∧":{"ha":833,"x_min":83,"x_max":750,"o":"m 83 69 l 332 764 l 501 764 l 750 69 l 622 69 l 460 514 q 431 602 443 558 q 414 668 419 646 q 396 602 408 646 q 368 514 383 558 l 210 69 l 83 69 z "},"∨":{"ha":833,"x_min":83,"x_max":750,"o":"m 332 69 l 83 764 l 211 764 l 374 319 q 402 232 390 275 q 419 165 414 189 q 438 232 425 189 q 465 319 450 275 l 624 764 l 750 764 l 501 69 l 332 69 z "},"∫":{"ha":833,"x_min":0,"x_max":743,"o":"m 0 -250 l 0 -136 l 146 -136 q 263 -94 219 -136 q 306 21 306 -51 l 306 821 q 362 963 306 913 q 519 1014 418 1014 l 743 1014 l 743 903 l 519 903 q 453 882 475 903 q 431 819 431 861 l 431 21 q 395 -122 431 -61 q 296 -217 360 -183 q 146 -250 232 -250 l 0 -250 z "},"∏":{"ha":833,"x_min":56,"x_max":778,"o":"m 153 -250 l 153 900 l 56 900 l 56 1014 l 778 1014 l 778 900 l 681 900 l 681 -250 l 556 -250 l 556 900 l 278 900 l 278 -250 l 153 -250 z "},"∑":{"ha":833,"x_min":76,"x_max":750,"o":"m 76 -250 l 76 -136 l 518 381 l 76 900 l 76 1014 l 750 1014 l 750 903 l 229 903 l 610 454 l 610 311 l 221 -139 l 750 -139 l 750 -250 l 76 -250 z "},"√":{"ha":833,"x_min":42,"x_max":813,"o":"m 372 0 l 196 653 l 42 653 l 42 764 l 285 764 l 422 224 q 438 141 433 176 q 440 90 442 106 l 453 90 q 456 142 451 106 q 474 224 461 178 l 696 1014 l 813 1014 l 518 0 l 372 0 z "},"∂":{"ha":833,"x_min":125,"x_max":708,"o":"m 417 -14 q 260 22 325 -14 q 160 125 194 58 q 125 285 125 192 l 125 396 q 192 610 125 532 q 381 688 260 688 q 528 642 475 688 q 583 514 582 596 l 564 542 l 583 542 l 583 576 q 549 719 583 651 q 461 844 515 788 q 344 944 407 901 q 224 1014 282 988 l 411 1014 q 441 995 411 1014 q 515 939 471 976 q 604 847 560 901 q 678 722 649 793 q 708 563 708 650 l 708 285 q 631 66 708 146 q 417 -14 553 -14 m 417 97 q 540 146 497 97 q 583 285 583 194 l 583 396 q 541 535 583 488 q 417 583 499 583 q 293 535 336 583 q 250 396 250 486 l 250 285 q 293 146 250 194 q 417 97 336 97 z "},"µ":{"ha":833,"x_min":125,"x_max":708,"o":"m 125 -250 l 125 764 l 250 764 l 250 269 q 290 141 250 186 q 415 96 329 96 q 543 141 503 96 q 583 269 583 186 l 583 764 l 708 764 l 708 269 q 635 61 708 136 q 429 -14 561 -14 q 319 3 364 -14 q 248 46 274 21 q 215 93 222 71 l 210 93 q 217 74 211 93 q 227 30 222 56 q 233 -18 232 4 l 249 -250 l 125 -250 z "},"∥":{"ha":833,"x_min":215,"x_max":618,"o":"m 493 0 l 493 1014 l 618 1014 l 618 0 l 493 0 m 215 0 l 215 1014 l 340 1014 l 340 0 l 215 0 z "},"%":{"ha":833,"x_min":19,"x_max":814,"o":"m 19 0 l 711 1014 l 814 1014 l 122 0 l 19 0 m 618 -7 q 478 43 531 -7 q 425 181 425 93 l 425 271 q 478 408 425 358 q 618 458 531 458 q 758 408 706 458 q 811 271 811 358 l 811 181 q 758 43 811 93 q 618 -7 706 -7 m 618 89 q 708 181 708 89 l 708 271 q 618 364 708 364 q 528 271 528 364 l 528 181 q 618 89 528 89 m 215 556 q 75 606 128 556 q 22 743 22 656 l 22 833 q 75 971 22 921 q 215 1021 128 1021 q 356 971 303 1021 q 408 833 408 921 l 408 743 q 356 606 408 656 q 215 556 303 556 m 215 650 q 306 743 306 650 l 306 833 q 215 926 306 926 q 148 903 171 926 q 125 833 125 881 l 125 743 q 148 673 125 696 q 215 650 171 650 z "},"‰":{"ha":833,"x_min":-11,"x_max":833,"o":"m -11 0 l 540 1014 l 624 1014 l 72 0 l -11 0 m 450 65 q 506 86 486 65 q 525 146 525 107 l 525 271 q 506 331 525 311 q 450 351 486 351 q 397 331 415 351 q 378 271 378 310 l 378 146 q 397 86 378 107 q 450 65 415 65 m 444 -7 q 336 34 376 -7 q 296 146 296 75 l 296 271 q 336 383 296 342 q 444 424 376 424 q 533 394 506 424 q 564 335 561 364 q 596 394 567 364 q 685 424 625 424 q 794 383 754 424 q 833 271 833 342 l 833 146 q 794 34 833 75 q 685 -7 754 -7 q 597 23 625 -7 q 565 82 568 53 q 534 23 563 53 q 444 -7 506 -7 m 679 65 q 733 86 715 65 q 751 146 751 107 l 751 271 q 733 331 751 311 q 679 351 715 351 q 624 331 643 351 q 604 271 604 311 l 604 146 q 624 86 604 107 q 679 65 643 65 m 167 611 q 45 654 90 611 q 0 771 0 697 l 0 861 q 45 978 0 935 q 167 1021 90 1021 q 289 978 244 1021 q 333 861 333 935 l 333 771 q 289 654 333 697 q 167 611 244 611 m 167 693 q 225 713 206 693 q 244 771 244 732 l 244 861 q 225 919 244 900 q 167 939 206 939 q 108 919 128 939 q 89 861 89 900 l 89 771 q 108 713 89 732 q 167 693 128 693 z "},"⁺":{"ha":833,"x_min":222,"x_max":611,"o":"m 361 424 l 361 569 l 222 569 l 222 667 l 361 667 l 361 813 l 472 813 l 472 667 l 611 667 l 611 569 l 472 569 l 472 424 l 361 424 z "},"∷":{"ha":833,"x_min":76,"x_max":756,"o":"m 642 483 q 560 515 592 483 q 528 596 528 546 q 560 677 528 646 q 642 708 592 708 q 724 677 692 708 q 756 596 756 646 q 724 515 756 546 q 642 483 692 483 m 190 -14 q 108 17 140 -14 q 76 99 76 49 q 108 180 76 149 q 190 211 140 211 q 272 180 240 211 q 304 99 304 149 q 272 17 304 49 q 190 -14 240 -14 m 642 -14 q 560 17 592 -14 q 528 99 528 49 q 560 180 528 149 q 642 211 592 211 q 724 180 692 211 q 756 99 756 149 q 724 17 756 49 q 642 -14 692 -14 m 190 483 q 108 515 140 483 q 76 596 76 546 q 108 677 76 646 q 190 708 140 708 q 272 677 240 708 q 304 596 304 646 q 272 515 304 546 q 190 483 240 483 z "},"⊆":{"ha":833,"x_min":49,"x_max":792,"o":"m 69 0 l 69 114 l 792 114 l 792 0 l 69 0 m 368 278 q 201 315 272 278 q 89 422 129 353 q 49 581 49 490 l 49 642 q 89 801 49 733 q 201 907 129 869 q 368 944 272 944 l 792 944 l 792 831 l 368 831 q 224 781 275 831 q 174 639 174 731 l 174 583 q 224 442 174 492 q 368 392 275 392 l 792 392 l 792 278 l 368 278 z "},"⊇":{"ha":833,"x_min":42,"x_max":785,"o":"m 42 0 l 42 114 l 764 114 l 764 0 l 42 0 m 42 278 l 42 392 l 465 392 q 609 442 558 392 q 660 583 660 492 l 660 639 q 609 781 660 731 q 465 831 558 831 l 42 831 l 42 944 l 465 944 q 633 907 561 944 q 744 801 704 869 q 785 642 785 733 l 785 581 q 744 422 785 490 q 633 315 704 353 q 465 278 561 278 l 42 278 z "},"∘":{"ha":833,"x_min":250,"x_max":583,"o":"m 417 292 q 297 339 344 292 q 250 458 250 386 q 297 578 250 532 q 417 625 344 625 q 537 578 490 625 q 583 458 583 532 q 537 339 583 386 q 417 292 490 292 m 417 347 q 497 378 465 347 q 528 458 528 410 q 497 538 528 507 q 417 569 465 569 q 337 538 368 569 q 306 458 306 507 q 337 378 306 410 q 417 347 368 347 z "},"∼":{"ha":833,"x_min":90,"x_max":743,"o":"m 90 354 l 90 451 q 140 583 90 533 q 271 632 190 632 q 358 614 322 632 q 420 569 394 596 q 467 515 446 542 q 510 469 488 488 q 560 451 532 451 q 608 471 592 451 q 625 528 625 490 l 625 625 l 743 625 l 743 528 q 694 397 743 447 q 563 347 644 347 q 475 365 511 347 q 413 410 439 383 q 367 465 388 438 q 324 510 346 492 q 274 528 301 528 q 226 508 243 528 q 208 451 208 489 l 208 354 l 90 354 z "},"⊂":{"ha":833,"x_min":49,"x_max":792,"o":"m 368 167 q 201 204 272 167 q 89 310 129 242 q 49 469 49 379 l 49 531 q 89 690 49 622 q 201 796 129 758 q 368 833 272 833 l 792 833 l 792 719 l 368 719 q 224 669 275 719 q 174 528 174 619 l 174 472 q 224 331 174 381 q 368 281 275 281 l 792 281 l 792 167 l 368 167 z "},"∋":{"ha":833,"x_min":49,"x_max":792,"o":"m 49 97 l 49 208 l 472 208 q 572 235 528 208 q 641 307 615 263 q 667 403 667 351 l 667 444 l 49 444 l 49 556 l 667 556 l 667 597 q 641 693 667 649 q 572 765 615 738 q 472 792 528 792 l 49 792 l 49 903 l 472 903 q 632 863 560 903 q 748 755 704 824 q 792 600 792 686 l 792 400 q 748 245 792 314 q 632 137 704 176 q 472 97 560 97 l 49 97 z "},"⊃":{"ha":833,"x_min":42,"x_max":785,"o":"m 42 167 l 42 281 l 465 281 q 609 331 558 281 q 660 472 660 381 l 660 528 q 609 669 660 619 q 465 719 558 719 l 42 719 l 42 833 l 465 833 q 633 796 561 833 q 744 690 704 758 q 785 531 785 622 l 785 469 q 744 310 785 379 q 633 204 704 242 q 465 167 561 167 l 42 167 z "},"∀":{"ha":833,"x_min":69,"x_max":764,"o":"m 332 0 l 69 1014 l 196 1014 l 367 326 q 398 192 385 254 q 417 97 411 129 q 436 191 424 129 q 467 325 449 253 l 636 1014 l 764 1014 l 500 0 l 332 0 m 224 628 l 224 733 l 599 733 l 599 628 l 224 628 z "},"↑":{"ha":833,"x_min":14,"x_max":819,"o":"m 354 0 l 354 722 q 357 784 354 753 q 361 833 360 815 l 347 833 q 271 758 333 813 l 14 539 l 14 685 l 418 1028 l 819 686 l 819 540 l 561 760 q 512 806 531 786 q 486 833 493 825 l 472 833 q 477 784 475 815 q 479 722 479 753 l 479 0 l 354 0 z "},"↗":{"ha":833,"x_min":14,"x_max":771,"o":"m 96 106 l 14 192 l 504 686 q 544 723 524 706 q 578 750 565 740 l 576 760 q 531 756 561 758 q 465 753 500 753 l 194 753 l 194 861 l 771 861 l 771 285 l 660 285 l 660 561 q 663 629 660 596 q 668 681 665 663 l 658 683 q 628 646 649 669 q 589 603 608 622 l 96 106 z "},"→":{"ha":833,"x_min":56,"x_max":792,"o":"m 324 49 l 549 333 q 581 369 563 351 q 611 396 599 386 l 611 408 q 565 405 593 407 q 514 403 538 403 l 56 403 l 56 514 l 514 514 q 565 512 538 514 q 611 507 593 510 l 611 519 q 584 546 601 528 q 549 585 567 564 l 324 868 l 469 868 l 792 458 l 471 49 l 324 49 z "},"↘":{"ha":833,"x_min":14,"x_max":771,"o":"m 194 104 l 194 213 l 465 213 q 531 210 500 213 q 576 206 561 208 l 578 215 q 544 243 565 225 q 504 279 524 261 l 14 774 l 99 861 l 592 364 q 631 322 611 344 q 661 283 651 299 l 671 286 q 664 337 668 304 q 660 404 660 369 l 660 681 l 771 681 l 771 104 l 194 104 z "},"↓":{"ha":833,"x_min":14,"x_max":819,"o":"m 415 -14 l 14 328 l 14 474 l 272 254 q 322 208 303 228 q 347 181 342 189 l 361 181 q 357 230 360 199 q 354 292 354 261 l 354 1014 l 479 1014 l 479 292 q 477 230 479 261 q 472 181 475 199 l 486 181 q 563 256 500 201 l 819 475 l 819 329 l 415 -14 z "},"↙":{"ha":833,"x_min":63,"x_max":819,"o":"m 63 104 l 63 681 l 174 681 l 174 404 q 170 336 174 369 q 164 283 167 303 l 174 281 q 204 319 185 296 q 243 361 224 342 l 736 858 l 819 774 l 329 279 q 290 243 311 261 q 256 215 268 225 l 257 206 q 303 210 272 208 q 368 213 333 213 l 639 213 l 639 104 l 63 104 z "},"←":{"ha":833,"x_min":56,"x_max":792,"o":"m 378 49 l 56 458 l 376 868 l 524 868 l 299 583 q 267 548 285 565 q 236 521 249 531 l 236 508 q 283 513 254 511 q 333 514 311 514 l 792 514 l 792 403 l 333 403 q 283 406 311 403 q 236 410 254 408 l 236 397 q 263 371 246 389 q 299 332 281 353 l 524 49 l 378 49 z "},"↖":{"ha":833,"x_min":63,"x_max":819,"o":"m 735 104 l 242 601 q 203 644 222 621 q 172 682 183 668 l 163 679 q 169 628 165 661 q 174 561 174 596 l 174 285 l 63 285 l 63 861 l 639 861 l 639 753 l 368 753 q 303 756 333 753 q 257 760 272 758 l 256 750 q 290 723 268 740 q 329 686 311 706 l 819 192 l 735 104 z "},"↔":{"ha":833,"x_min":-111,"x_max":944,"o":"m 211 49 l -111 458 l 210 868 l 357 868 l 132 583 q 100 548 118 565 q 69 521 82 531 l 69 508 q 116 513 88 511 q 167 514 144 514 l 667 514 q 718 512 690 514 q 764 507 746 510 l 764 519 q 737 546 754 528 q 701 585 719 564 l 476 868 l 622 868 l 944 458 l 624 49 l 476 49 l 701 333 q 733 369 715 351 q 764 396 751 386 l 764 408 q 718 405 746 407 q 667 403 690 403 l 167 403 q 116 406 144 403 q 69 410 88 408 l 69 397 q 97 371 79 389 q 132 332 114 353 l 357 49 l 211 49 z "},"↕":{"ha":833,"x_min":14,"x_max":819,"o":"m 417 -236 l 14 106 l 14 251 l 272 32 q 322 -14 303 6 q 347 -42 342 -33 l 361 -42 q 357 8 360 -24 q 354 69 354 39 l 354 944 q 357 1006 354 975 q 361 1056 360 1038 l 347 1056 q 271 981 333 1035 l 14 761 l 14 907 l 417 1250 l 819 908 l 819 763 l 561 982 q 512 1028 531 1008 q 486 1056 493 1047 l 472 1056 q 477 1006 475 1038 q 479 944 479 975 l 479 69 q 477 8 479 39 q 472 -42 475 -24 l 486 -42 q 563 33 500 -21 l 819 253 l 819 107 l 417 -236 z "},"⇧":{"ha":833,"x_min":21,"x_max":813,"o":"m 194 0 l 194 471 l 306 471 l 306 0 l 194 0 m 21 371 l 21 471 l 236 471 l 236 371 l 21 371 m 528 0 l 528 471 l 639 471 l 639 0 l 528 0 m 597 371 l 597 471 l 813 471 l 813 371 l 597 371 m 194 0 l 194 106 l 639 106 l 639 0 l 194 0 m 21 471 l 349 764 l 485 764 l 811 471 l 649 471 l 414 678 l 181 471 l 21 471 z "},"⌄":{"ha":833,"x_min":14,"x_max":819,"o":"m 415 -14 l 14 328 l 14 474 l 424 128 l 819 475 l 819 329 l 415 -14 z "},"⟵":{"ha":1667,"x_min":56,"x_max":1625,"o":"m 378 49 l 56 458 l 376 868 l 524 868 l 299 583 q 267 548 285 565 q 236 521 249 531 l 236 508 q 283 513 254 511 q 333 514 311 514 l 1625 514 l 1625 403 l 333 403 q 283 406 311 403 q 236 410 254 408 l 236 397 q 264 372 246 389 q 299 332 282 354 l 524 49 l 378 49 z "},"⟶":{"ha":1667,"x_min":42,"x_max":1611,"o":"m 1289 49 l 1143 49 l 1368 332 q 1403 372 1385 354 q 1431 397 1421 389 l 1431 410 q 1385 406 1413 408 q 1333 403 1357 403 l 42 403 l 42 514 l 1333 514 q 1385 513 1357 514 q 1431 508 1413 511 l 1431 521 q 1400 548 1418 531 q 1368 583 1382 565 l 1143 868 l 1290 868 l 1611 458 l 1289 49 z "},"⟷":{"ha":1667,"x_min":56,"x_max":1611,"o":"m 378 49 l 56 458 l 376 868 l 524 868 l 299 583 q 267 548 285 565 q 236 521 249 531 l 236 508 q 283 513 254 511 q 333 514 311 514 l 1333 514 q 1385 512 1357 514 q 1431 507 1413 510 l 1431 519 q 1403 546 1421 528 q 1368 585 1386 564 l 1143 868 l 1289 868 l 1611 458 l 1290 49 l 1143 49 l 1368 333 q 1400 369 1382 351 q 1431 396 1418 386 l 1431 408 q 1385 405 1413 407 q 1333 403 1357 403 l 333 403 q 283 406 311 403 q 236 410 254 408 l 236 397 q 264 372 246 389 q 299 332 282 354 l 524 49 l 378 49 z "},"▁":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 -187 l 847 -187 l 847 -417 l -14 -417 z "},"▂":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 42 l 847 42 l 847 -417 l -14 -417 z "},"▃":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 271 l 847 271 l 847 -417 l -14 -417 z "},"▄":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 500 l 847 500 l 847 -417 l -14 -417 z "},"▅":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 729 l 847 729 l 847 -417 l -14 -417 z "},"▆":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 958 l 847 958 l 847 -417 l -14 -417 z "},"▇":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 1188 l 847 1188 l 847 -417 l -14 -417 z "},"█":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 1417 l 847 1417 l 847 -417 l -14 -417 z "},"▀":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 500 l -14 1417 l 847 1417 l 847 500 l -14 500 z "},"▔":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 1188 l -14 1417 l 847 1417 l 847 1188 l -14 1188 z "},"▏":{"ha":833,"x_min":-14,"x_max":104,"o":"m -14 -417 l -14 1417 l 104 1417 l 104 -417 l -14 -417 z "},"▎":{"ha":833,"x_min":-14,"x_max":208,"o":"m -14 -417 l -14 1417 l 208 1417 l 208 -417 l -14 -417 z "},"▍":{"ha":833,"x_min":-14,"x_max":278,"o":"m -14 -417 l -14 1417 l 278 1417 l 278 -417 l -14 -417 z "},"▌":{"ha":833,"x_min":-14,"x_max":417,"o":"m -14 -417 l -14 1417 l 417 1417 l 417 -417 l -14 -417 z "},"▋":{"ha":833,"x_min":-14,"x_max":521,"o":"m -14 -417 l -14 1417 l 521 1417 l 521 -417 l -14 -417 z "},"▊":{"ha":833,"x_min":-14,"x_max":625,"o":"m -14 -417 l -14 1417 l 625 1417 l 625 -417 l -14 -417 z "},"▉":{"ha":833,"x_min":-14,"x_max":729,"o":"m -14 -417 l -14 1417 l 729 1417 l 729 -417 l -14 -417 z "},"▐":{"ha":833,"x_min":417,"x_max":847,"o":"m 417 -417 l 417 1417 l 847 1417 l 847 -417 l 417 -417 z "},"▕":{"ha":833,"x_min":729,"x_max":847,"o":"m 729 -417 l 729 1417 l 847 1417 l 847 -417 l 729 -417 z "},"▖":{"ha":833,"x_min":-14,"x_max":417,"o":"m -14 -417 l -14 500 l 417 500 l 417 -417 l -14 -417 z "},"▗":{"ha":833,"x_min":417,"x_max":847,"o":"m 417 -417 l 417 500 l 847 500 l 847 -417 l 417 -417 z "},"▘":{"ha":833,"x_min":-14,"x_max":417,"o":"m -14 500 l -14 1417 l 417 1417 l 417 500 l -14 500 z "},"▙":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 1417 l 417 1417 l 417 500 l 847 500 l 847 -417 l -14 -417 z "},"▚":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 500 l -14 1417 l 417 1417 l 417 500 l -14 500 m 417 -417 l 417 500 l 847 500 l 847 -417 l 417 -417 z "},"▛":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 1417 l 847 1417 l 847 500 l 417 500 l 417 -417 l -14 -417 z "},"▜":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 -417 l 417 500 l -14 500 l -14 1417 l 847 1417 l 847 -417 l 417 -417 z "},"▝":{"ha":833,"x_min":417,"x_max":847,"o":"m 417 500 l 417 1417 l 847 1417 l 847 500 l 417 500 z "},"▞":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 500 l 417 1417 l 847 1417 l 847 500 l 417 500 m -14 -417 l -14 500 l 417 500 l 417 -417 l -14 -417 z "},"▟":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 -417 l -14 500 l 417 500 l 417 1417 l 847 1417 l 847 -417 l -14 -417 z "},"░":{"ha":833,"x_min":83,"x_max":833,"o":"m 750 1333 l 750 1417 l 833 1417 l 833 1333 l 750 1333 m 83 1333 l 83 1417 l 167 1417 l 167 1333 l 83 1333 m 250 1333 l 250 1417 l 333 1417 l 333 1333 l 250 1333 m 417 1333 l 417 1417 l 500 1417 l 500 1333 l 417 1333 m 583 1333 l 583 1417 l 667 1417 l 667 1333 l 583 1333 m 750 1167 l 750 1250 l 833 1250 l 833 1167 l 750 1167 m 83 1167 l 83 1250 l 167 1250 l 167 1167 l 83 1167 m 250 1167 l 250 1250 l 333 1250 l 333 1167 l 250 1167 m 417 1167 l 417 1250 l 500 1250 l 500 1167 l 417 1167 m 583 1167 l 583 1250 l 667 1250 l 667 1167 l 583 1167 m 750 1000 l 750 1083 l 833 1083 l 833 1000 l 750 1000 m 83 1000 l 83 1083 l 167 1083 l 167 1000 l 83 1000 m 250 1000 l 250 1083 l 333 1083 l 333 1000 l 250 1000 m 417 1000 l 417 1083 l 500 1083 l 500 1000 l 417 1000 m 583 1000 l 583 1083 l 667 1083 l 667 1000 l 583 1000 m 750 833 l 750 917 l 833 917 l 833 833 l 750 833 m 83 833 l 83 917 l 167 917 l 167 833 l 83 833 m 250 833 l 250 917 l 333 917 l 333 833 l 250 833 m 417 833 l 417 917 l 500 917 l 500 833 l 417 833 m 583 833 l 583 917 l 667 917 l 667 833 l 583 833 m 750 667 l 750 750 l 833 750 l 833 667 l 750 667 m 83 667 l 83 750 l 167 750 l 167 667 l 83 667 m 250 667 l 250 750 l 333 750 l 333 667 l 250 667 m 417 667 l 417 750 l 500 750 l 500 667 l 417 667 m 583 667 l 583 750 l 667 750 l 667 667 l 583 667 m 750 500 l 750 583 l 833 583 l 833 500 l 750 500 m 83 500 l 83 583 l 167 583 l 167 500 l 83 500 m 250 500 l 250 583 l 333 583 l 333 500 l 250 500 m 417 500 l 417 583 l 500 583 l 500 500 l 417 500 m 583 500 l 583 583 l 667 583 l 667 500 l 583 500 m 750 333 l 750 417 l 833 417 l 833 333 l 750 333 m 83 333 l 83 417 l 167 417 l 167 333 l 83 333 m 250 333 l 250 417 l 333 417 l 333 333 l 250 333 m 417 333 l 417 417 l 500 417 l 500 333 l 417 333 m 583 333 l 583 417 l 667 417 l 667 333 l 583 333 m 750 167 l 750 250 l 833 250 l 833 167 l 750 167 m 83 167 l 83 250 l 167 250 l 167 167 l 83 167 m 250 167 l 250 250 l 333 250 l 333 167 l 250 167 m 417 167 l 417 250 l 500 250 l 500 167 l 417 167 m 583 167 l 583 250 l 667 250 l 667 167 l 583 167 m 750 0 l 750 83 l 833 83 l 833 0 l 750 0 m 83 0 l 83 83 l 167 83 l 167 0 l 83 0 m 250 0 l 250 83 l 333 83 l 333 0 l 250 0 m 417 0 l 417 83 l 500 83 l 500 0 l 417 0 m 583 0 l 583 83 l 667 83 l 667 0 l 583 0 m 750 -167 l 750 -83 l 833 -83 l 833 -167 l 750 -167 m 83 -167 l 83 -83 l 167 -83 l 167 -167 l 83 -167 m 250 -167 l 250 -83 l 333 -83 l 333 -167 l 250 -167 m 417 -167 l 417 -83 l 500 -83 l 500 -167 l 417 -167 m 583 -167 l 583 -83 l 667 -83 l 667 -167 l 583 -167 m 750 -333 l 750 -250 l 833 -250 l 833 -333 l 750 -333 m 83 -333 l 83 -250 l 167 -250 l 167 -333 l 83 -333 m 250 -333 l 250 -250 l 333 -250 l 333 -333 l 250 -333 m 417 -333 l 417 -250 l 500 -250 l 500 -333 l 417 -333 m 583 -333 l 583 -250 l 667 -250 l 667 -333 l 583 -333 z "},"▒":{"ha":833,"x_min":0,"x_max":833,"o":"m 750 1333 l 750 1417 l 833 1417 l 833 1333 l 750 1333 m 0 -417 l 0 -333 l 83 -333 l 83 -417 l 0 -417 m 0 -250 l 0 -167 l 83 -167 l 83 -250 l 0 -250 m 83 -333 l 83 -250 l 167 -250 l 167 -333 l 83 -333 m 167 -417 l 167 -333 l 250 -333 l 250 -417 l 167 -417 m 0 -83 l 0 0 l 83 0 l 83 -83 l 0 -83 m 83 -167 l 83 -83 l 167 -83 l 167 -167 l 83 -167 m 167 -250 l 167 -167 l 250 -167 l 250 -250 l 167 -250 m 250 -333 l 250 -250 l 333 -250 l 333 -333 l 250 -333 m 333 -417 l 333 -333 l 417 -333 l 417 -417 l 333 -417 m 0 83 l 0 167 l 83 167 l 83 83 l 0 83 m 83 0 l 83 83 l 167 83 l 167 0 l 83 0 m 167 -83 l 167 0 l 250 0 l 250 -83 l 167 -83 m 250 -167 l 250 -83 l 333 -83 l 333 -167 l 250 -167 m 333 -250 l 333 -167 l 417 -167 l 417 -250 l 333 -250 m 417 -333 l 417 -250 l 500 -250 l 500 -333 l 417 -333 m 500 -417 l 500 -333 l 583 -333 l 583 -417 l 500 -417 m 0 250 l 0 333 l 83 333 l 83 250 l 0 250 m 83 167 l 83 250 l 167 250 l 167 167 l 83 167 m 167 83 l 167 167 l 250 167 l 250 83 l 167 83 m 250 0 l 250 83 l 333 83 l 333 0 l 250 0 m 333 -83 l 333 0 l 417 0 l 417 -83 l 333 -83 m 417 -167 l 417 -83 l 500 -83 l 500 -167 l 417 -167 m 500 -250 l 500 -167 l 583 -167 l 583 -250 l 500 -250 m 583 -333 l 583 -250 l 667 -250 l 667 -333 l 583 -333 m 667 -417 l 667 -333 l 750 -333 l 750 -417 l 667 -417 m 0 417 l 0 500 l 83 500 l 83 417 l 0 417 m 83 333 l 83 417 l 167 417 l 167 333 l 83 333 m 167 250 l 167 333 l 250 333 l 250 250 l 167 250 m 250 167 l 250 250 l 333 250 l 333 167 l 250 167 m 333 83 l 333 167 l 417 167 l 417 83 l 333 83 m 417 0 l 417 83 l 500 83 l 500 0 l 417 0 m 500 -83 l 500 0 l 583 0 l 583 -83 l 500 -83 m 583 -167 l 583 -83 l 667 -83 l 667 -167 l 583 -167 m 667 -250 l 667 -167 l 750 -167 l 750 -250 l 667 -250 m 750 -333 l 750 -250 l 833 -250 l 833 -333 l 750 -333 m 0 583 l 0 667 l 83 667 l 83 583 l 0 583 m 83 500 l 83 583 l 167 583 l 167 500 l 83 500 m 167 417 l 167 500 l 250 500 l 250 417 l 167 417 m 250 333 l 250 417 l 333 417 l 333 333 l 250 333 m 333 250 l 333 333 l 417 333 l 417 250 l 333 250 m 417 167 l 417 250 l 500 250 l 500 167 l 417 167 m 500 83 l 500 167 l 583 167 l 583 83 l 500 83 m 583 0 l 583 83 l 667 83 l 667 0 l 583 0 m 667 -83 l 667 0 l 750 0 l 750 -83 l 667 -83 m 750 -167 l 750 -83 l 833 -83 l 833 -167 l 750 -167 m 0 750 l 0 833 l 83 833 l 83 750 l 0 750 m 83 667 l 83 750 l 167 750 l 167 667 l 83 667 m 167 583 l 167 667 l 250 667 l 250 583 l 167 583 m 250 500 l 250 583 l 333 583 l 333 500 l 250 500 m 333 417 l 333 500 l 417 500 l 417 417 l 333 417 m 417 333 l 417 417 l 500 417 l 500 333 l 417 333 m 500 250 l 500 333 l 583 333 l 583 250 l 500 250 m 583 167 l 583 250 l 667 250 l 667 167 l 583 167 m 667 83 l 667 167 l 750 167 l 750 83 l 667 83 m 750 0 l 750 83 l 833 83 l 833 0 l 750 0 m 0 917 l 0 1000 l 83 1000 l 83 917 l 0 917 m 83 833 l 83 917 l 167 917 l 167 833 l 83 833 m 167 750 l 167 833 l 250 833 l 250 750 l 167 750 m 250 667 l 250 750 l 333 750 l 333 667 l 250 667 m 333 583 l 333 667 l 417 667 l 417 583 l 333 583 m 417 500 l 417 583 l 500 583 l 500 500 l 417 500 m 500 417 l 500 500 l 583 500 l 583 417 l 500 417 m 583 333 l 583 417 l 667 417 l 667 333 l 583 333 m 667 250 l 667 333 l 750 333 l 750 250 l 667 250 m 750 167 l 750 250 l 833 250 l 833 167 l 750 167 m 0 1083 l 0 1167 l 83 1167 l 83 1083 l 0 1083 m 83 1000 l 83 1083 l 167 1083 l 167 1000 l 83 1000 m 167 917 l 167 1000 l 250 1000 l 250 917 l 167 917 m 250 833 l 250 917 l 333 917 l 333 833 l 250 833 m 333 750 l 333 833 l 417 833 l 417 750 l 333 750 m 417 667 l 417 750 l 500 750 l 500 667 l 417 667 m 500 583 l 500 667 l 583 667 l 583 583 l 500 583 m 583 500 l 583 583 l 667 583 l 667 500 l 583 500 m 667 417 l 667 500 l 750 500 l 750 417 l 667 417 m 750 333 l 750 417 l 833 417 l 833 333 l 750 333 m 0 1250 l 0 1333 l 83 1333 l 83 1250 l 0 1250 m 83 1167 l 83 1250 l 167 1250 l 167 1167 l 83 1167 m 167 1083 l 167 1167 l 250 1167 l 250 1083 l 167 1083 m 250 1000 l 250 1083 l 333 1083 l 333 1000 l 250 1000 m 333 917 l 333 1000 l 417 1000 l 417 917 l 333 917 m 417 833 l 417 917 l 500 917 l 500 833 l 417 833 m 500 750 l 500 833 l 583 833 l 583 750 l 500 750 m 583 667 l 583 750 l 667 750 l 667 667 l 583 667 m 667 583 l 667 667 l 750 667 l 750 583 l 667 583 m 750 500 l 750 583 l 833 583 l 833 500 l 750 500 m 83 1333 l 83 1417 l 167 1417 l 167 1333 l 83 1333 m 167 1250 l 167 1333 l 250 1333 l 250 1250 l 167 1250 m 250 1167 l 250 1250 l 333 1250 l 333 1167 l 250 1167 m 333 1083 l 333 1167 l 417 1167 l 417 1083 l 333 1083 m 417 1000 l 417 1083 l 500 1083 l 500 1000 l 417 1000 m 500 917 l 500 1000 l 583 1000 l 583 917 l 500 917 m 583 833 l 583 917 l 667 917 l 667 833 l 583 833 m 667 750 l 667 833 l 750 833 l 750 750 l 667 750 m 750 667 l 750 750 l 833 750 l 833 667 l 750 667 m 250 1333 l 250 1417 l 333 1417 l 333 1333 l 250 1333 m 333 1250 l 333 1333 l 417 1333 l 417 1250 l 333 1250 m 417 1167 l 417 1250 l 500 1250 l 500 1167 l 417 1167 m 500 1083 l 500 1167 l 583 1167 l 583 1083 l 500 1083 m 583 1000 l 583 1083 l 667 1083 l 667 1000 l 583 1000 m 667 917 l 667 1000 l 750 1000 l 750 917 l 667 917 m 750 833 l 750 917 l 833 917 l 833 833 l 750 833 m 417 1333 l 417 1417 l 500 1417 l 500 1333 l 417 1333 m 500 1250 l 500 1333 l 583 1333 l 583 1250 l 500 1250 m 583 1167 l 583 1250 l 667 1250 l 667 1167 l 583 1167 m 667 1083 l 667 1167 l 750 1167 l 750 1083 l 667 1083 m 750 1000 l 750 1083 l 833 1083 l 833 1000 l 750 1000 m 583 1333 l 583 1417 l 667 1417 l 667 1333 l 583 1333 m 667 1250 l 667 1333 l 750 1333 l 750 1250 l 667 1250 m 750 1167 l 750 1250 l 833 1250 l 833 1167 l 750 1167 z "},"▓":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 -417 l 0 -333 l 83 -333 l 83 -250 l 0 -250 l 0 -167 l 83 -167 l 83 -83 l 0 -83 l 0 0 l 83 0 l 83 83 l 0 83 l 0 167 l 83 167 l 83 250 l 0 250 l 0 333 l 83 333 l 83 417 l 0 417 l 0 500 l 83 500 l 83 583 l 0 583 l 0 667 l 83 667 l 83 750 l 0 750 l 0 833 l 83 833 l 83 917 l 0 917 l 0 1000 l 83 1000 l 83 1083 l 0 1083 l 0 1167 l 83 1167 l 83 1250 l 0 1250 l 0 1333 l 83 1333 l 83 1417 l 167 1417 l 167 1333 l 250 1333 l 250 1417 l 333 1417 l 333 1333 l 417 1333 l 417 1417 l 500 1417 l 500 1333 l 583 1333 l 583 1417 l 667 1417 l 667 1333 l 750 1333 l 750 1417 l 833 1417 l 833 -417 l 0 -417 m 167 -333 l 250 -333 l 250 -250 l 167 -250 l 167 -333 m 167 -167 l 250 -167 l 250 -83 l 167 -83 l 167 -167 m 333 -333 l 417 -333 l 417 -250 l 333 -250 l 333 -333 m 167 0 l 250 0 l 250 83 l 167 83 l 167 0 m 333 -167 l 417 -167 l 417 -83 l 333 -83 l 333 -167 m 500 -333 l 583 -333 l 583 -250 l 500 -250 l 500 -333 m 167 167 l 250 167 l 250 250 l 167 250 l 167 167 m 333 0 l 417 0 l 417 83 l 333 83 l 333 0 m 500 -167 l 583 -167 l 583 -83 l 500 -83 l 500 -167 m 667 -333 l 750 -333 l 750 -250 l 667 -250 l 667 -333 m 167 333 l 250 333 l 250 417 l 167 417 l 167 333 m 333 167 l 417 167 l 417 250 l 333 250 l 333 167 m 500 0 l 583 0 l 583 83 l 500 83 l 500 0 m 667 -167 l 750 -167 l 750 -83 l 667 -83 l 667 -167 m 167 500 l 250 500 l 250 583 l 167 583 l 167 500 m 333 333 l 417 333 l 417 417 l 333 417 l 333 333 m 500 167 l 583 167 l 583 250 l 500 250 l 500 167 m 667 0 l 750 0 l 750 83 l 667 83 l 667 0 m 167 667 l 250 667 l 250 750 l 167 750 l 167 667 m 333 500 l 417 500 l 417 583 l 333 583 l 333 500 m 500 333 l 583 333 l 583 417 l 500 417 l 500 333 m 667 167 l 750 167 l 750 250 l 667 250 l 667 167 m 167 833 l 250 833 l 250 917 l 167 917 l 167 833 m 333 667 l 417 667 l 417 750 l 333 750 l 333 667 m 500 500 l 583 500 l 583 583 l 500 583 l 500 500 m 667 333 l 750 333 l 750 417 l 667 417 l 667 333 m 167 1000 l 250 1000 l 250 1083 l 167 1083 l 167 1000 m 333 833 l 417 833 l 417 917 l 333 917 l 333 833 m 500 667 l 583 667 l 583 750 l 500 750 l 500 667 m 667 500 l 750 500 l 750 583 l 667 583 l 667 500 m 167 1167 l 250 1167 l 250 1250 l 167 1250 l 167 1167 m 333 1000 l 417 1000 l 417 1083 l 333 1083 l 333 1000 m 500 833 l 583 833 l 583 917 l 500 917 l 500 833 m 667 667 l 750 667 l 750 750 l 667 750 l 667 667 m 333 1167 l 417 1167 l 417 1250 l 333 1250 l 333 1167 m 500 1000 l 583 1000 l 583 1083 l 500 1083 l 500 1000 m 667 833 l 750 833 l 750 917 l 667 917 l 667 833 m 500 1167 l 583 1167 l 583 1250 l 500 1250 l 500 1167 m 667 1000 l 750 1000 l 750 1083 l 667 1083 l 667 1000 m 667 1167 l 750 1167 l 750 1250 l 667 1250 l 667 1167 z "},"●":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 q 197 126 294 69 q 42 280 99 182 q -14 500 -14 378 q 42 721 -14 624 q 197 874 99 818 q 417 931 294 931 q 638 874 540 931 q 791 721 735 818 q 847 500 847 624 q 791 280 847 378 q 638 126 735 182 q 417 69 540 69 z "},"◯":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 q 197 126 294 69 q 42 280 99 182 q -14 500 -14 378 q 42 721 -14 624 q 197 874 99 818 q 417 931 294 931 q 638 874 540 931 q 791 721 735 818 q 847 500 847 624 q 791 280 847 378 q 638 126 735 182 q 417 69 540 69 m 417 139 q 601 186 519 139 q 731 315 683 233 q 778 500 778 397 q 731 685 778 603 q 601 814 683 767 q 417 861 519 861 q 232 814 314 861 q 103 685 150 767 q 56 500 56 603 q 103 315 56 397 q 232 186 150 233 q 417 139 314 139 z "},"◔":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 q 197 126 294 69 q 42 280 99 182 q -14 500 -14 378 q 42 721 -14 624 q 197 874 99 818 q 417 931 294 931 q 638 874 540 931 q 791 721 735 818 q 847 500 847 624 q 791 280 847 378 q 638 126 735 182 q 417 69 540 69 m 417 139 q 601 186 519 139 q 731 315 683 233 q 778 500 778 397 q 644 500 715 500 q 512 500 574 500 q 417 500 450 500 q 417 567 417 521 q 417 669 417 613 q 417 776 417 725 q 417 861 417 828 q 232 814 314 861 q 103 685 150 767 q 56 500 56 603 q 103 315 56 397 q 232 186 150 233 q 417 139 314 139 z "},"◕":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 q 197 126 294 69 q 42 280 99 182 q -14 500 -14 378 q 42 721 -14 624 q 197 874 99 818 q 417 931 294 931 q 638 874 540 931 q 791 721 735 818 q 847 500 847 624 q 791 280 847 378 q 638 126 735 182 q 417 69 540 69 m 56 500 q 216 500 154 500 q 324 500 278 500 q 417 500 369 500 q 417 651 417 553 q 417 861 417 750 q 232 814 314 861 q 103 685 150 767 q 56 500 56 603 z "},"◌":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 500 q 0 613 -14 561 l 67 594 q 58 549 61 572 q 56 500 56 525 q 58 452 56 475 q 67 406 61 429 l 0 388 q -14 500 -14 439 m 40 283 l 101 318 q 235 185 150 233 l 200 124 q 40 283 97 181 m 40 717 q 200 876 97 819 l 235 815 q 101 682 150 767 l 40 717 m 304 917 q 417 931 356 931 q 529 917 478 931 l 511 850 q 465 858 489 856 q 417 861 442 861 q 369 858 392 861 q 322 850 346 856 l 304 917 m 304 83 l 322 150 q 369 142 346 144 q 417 139 392 139 q 465 142 442 139 q 511 150 489 144 l 529 83 q 417 69 478 69 q 304 83 356 69 m 599 815 l 633 876 q 793 717 736 819 l 732 682 q 599 815 683 767 m 599 185 q 732 318 683 233 l 793 283 q 633 124 736 181 l 599 185 m 767 406 q 775 452 772 429 q 778 500 778 475 q 775 549 778 525 q 767 594 772 572 l 833 613 q 847 500 847 561 q 833 388 847 439 l 767 406 z "},"◎":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 q 197 126 294 69 q 42 280 99 182 q -14 500 -14 378 q 42 721 -14 624 q 197 874 99 818 q 417 931 294 931 q 638 874 540 931 q 791 721 735 818 q 847 500 847 624 q 791 280 847 378 q 638 126 735 182 q 417 69 540 69 m 417 139 q 601 186 519 139 q 731 315 683 233 q 778 500 778 397 q 731 685 778 603 q 601 814 683 767 q 417 861 519 861 q 232 814 314 861 q 103 685 150 767 q 56 500 56 603 q 103 315 56 397 q 232 186 150 233 q 417 139 314 139 m 417 324 q 291 374 342 324 q 240 500 240 425 q 291 626 240 575 q 417 676 342 676 q 542 626 492 676 q 593 500 593 575 q 542 374 593 425 q 417 324 492 324 m 417 388 q 497 420 465 388 q 529 500 529 453 q 497 581 529 549 q 417 613 465 613 q 337 581 369 613 q 304 500 304 549 q 337 420 304 453 q 417 388 369 388 z "},"◆":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 l -14 500 l 417 932 l 847 500 l 417 69 z "},"◇":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 l -14 500 l 417 932 l 847 500 l 417 69 m 417 178 l 739 500 l 417 824 l 94 500 l 417 178 z "},"◊":{"ha":833,"x_min":83,"x_max":750,"o":"m 333 0 l 83 450 l 83 549 l 333 1000 l 508 1000 l 750 549 l 750 450 l 508 0 l 333 0 m 415 83 l 421 83 q 449 140 431 103 q 489 218 468 178 l 625 478 l 625 521 l 489 782 q 449 860 468 822 q 421 917 431 897 l 415 917 q 386 860 406 897 q 346 782 367 822 l 208 521 l 208 478 l 346 218 q 387 140 368 176 q 415 83 406 103 z "},"■":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 83 l 0 917 l 833 917 l 833 83 l 0 83 z "},"□":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 83 l 0 917 l 833 917 l 833 83 l 0 83 m 69 153 l 764 153 l 764 847 l 69 847 l 69 153 z "},"▪":{"ha":833,"x_min":208,"x_max":625,"o":"m 208 292 l 208 708 l 625 708 l 625 292 l 208 292 z "},"▫":{"ha":833,"x_min":208,"x_max":625,"o":"m 208 292 l 208 708 l 625 708 l 625 292 l 208 292 m 278 361 l 556 361 l 556 639 l 278 639 l 278 361 z "},"◧":{"ha":833,"x_min":0,"x_max":833,"o":"m 833 83 l 833 917 l 0 917 l 0 83 l 833 83 m 764 153 l 403 153 l 403 847 l 764 847 l 764 153 z "},"◨":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 83 l 0 917 l 833 917 l 833 83 l 0 83 m 69 153 l 431 153 l 431 847 l 69 847 l 69 153 z "},"◩":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 83 l 0 917 l 833 917 l 833 83 l 0 83 m 69 153 l 764 153 l 764 847 l 69 153 z "},"◪":{"ha":833,"x_min":0,"x_max":833,"o":"m 833 917 l 833 83 l 0 83 l 0 917 l 833 917 m 764 847 l 69 847 l 69 153 l 764 847 z "},"◫":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 83 l 0 917 l 833 917 l 833 83 l 0 83 m 69 153 l 764 153 l 764 847 l 69 847 l 69 153 m 382 97 l 382 903 l 451 903 l 451 97 l 382 97 z "},"▲":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 83 l 417 931 l 847 83 l -14 83 z "},"▶":{"ha":833,"x_min":0,"x_max":847,"o":"m 0 69 l 0 931 l 847 500 l 0 69 z "},"▼":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 l -14 917 l 847 917 l 417 69 z "},"◀":{"ha":833,"x_min":-14,"x_max":833,"o":"m 833 68 l -14 500 l 833 931 l 833 68 z "},"△":{"ha":833,"x_min":-14,"x_max":847,"o":"m -14 83 l 417 931 l 847 83 l -14 83 m 101 153 l 732 153 l 417 774 l 101 153 z "},"▷":{"ha":833,"x_min":0,"x_max":847,"o":"m 0 69 l 0 931 l 847 500 l 0 69 m 69 185 l 692 500 l 69 815 l 69 185 z "},"▽":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 69 l -14 917 l 847 917 l 417 69 m 417 226 l 732 847 l 101 847 l 417 226 z "},"◁":{"ha":833,"x_min":-14,"x_max":833,"o":"m 833 69 l -14 500 l 833 931 l 833 69 m 764 185 l 764 815 l 142 500 l 764 185 z "},"►":{"ha":833,"x_min":0,"x_max":847,"o":"m 0 292 l 0 708 l 847 500 l 0 292 z "},"◄":{"ha":833,"x_min":-14,"x_max":833,"o":"m 833 292 l 833 708 l -14 500 l 833 292 z "},"▻":{"ha":833,"x_min":0,"x_max":847,"o":"m 0 292 l 0 708 l 847 500 l 0 292 m 69 381 l 622 500 l 69 619 l 69 381 z "},"◅":{"ha":833,"x_min":-14,"x_max":833,"o":"m 833 292 l 833 708 l -14 500 l 833 292 m 764 381 l 211 500 l 764 619 l 764 381 z "},"▴":{"ha":833,"x_min":208,"x_max":625,"o":"m 208 292 l 417 722 l 625 292 l 208 292 z "},"▸":{"ha":833,"x_min":208,"x_max":639,"o":"m 208 292 l 639 500 l 208 708 l 208 292 z "},"▾":{"ha":833,"x_min":208,"x_max":625,"o":"m 208 708 l 417 278 l 625 708 l 208 708 z "},"◂":{"ha":833,"x_min":194,"x_max":625,"o":"m 625 708 l 194 500 l 625 292 l 625 708 z "},"▵":{"ha":833,"x_min":208,"x_max":625,"o":"m 208 292 l 417 722 l 625 292 l 208 292 m 297 347 l 536 347 l 417 594 l 297 347 z "},"▹":{"ha":833,"x_min":208,"x_max":639,"o":"m 208 292 l 208 708 l 639 500 l 208 292 m 264 381 l 511 500 l 264 619 l 264 381 z "},"▿":{"ha":833,"x_min":208,"x_max":625,"o":"m 417 278 l 208 708 l 625 708 l 417 278 m 417 406 l 536 653 l 297 653 l 417 406 z "},"◃":{"ha":833,"x_min":194,"x_max":625,"o":"m 625 292 l 194 500 l 625 708 l 625 292 m 569 381 l 569 619 l 322 500 l 569 381 z "},"╦":{"ha":833,"x_min":-28,"x_max":861,"o":"m 486 -417 l 486 444 l 861 444 l 861 306 l 625 306 l 625 -417 l 486 -417 m 208 -417 l 208 306 l -28 306 l -28 444 l 347 444 l 347 -417 l 208 -417 m -28 583 l -28 722 l 861 722 l 861 583 l -28 583 z "},"╗":{"ha":833,"x_min":-28,"x_max":625,"o":"m 486 -417 l 486 583 l -28 583 l -28 722 l 625 722 l 625 -417 l 486 -417 m 208 -417 l 208 306 l -28 306 l -28 444 l 347 444 l 347 -417 l 208 -417 z "},"╔":{"ha":833,"x_min":208,"x_max":861,"o":"m 208 -417 l 208 722 l 861 722 l 861 583 l 347 583 l 347 -417 l 208 -417 m 486 -417 l 486 444 l 861 444 l 861 306 l 625 306 l 625 -417 l 486 -417 z "},"═":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 583 l -28 722 l 861 722 l 861 583 l -28 583 m -28 306 l -28 444 l 861 444 l 861 306 l -28 306 z "},"╩":{"ha":833,"x_min":-28,"x_max":861,"o":"m 486 583 l 486 1417 l 625 1417 l 625 722 l 861 722 l 861 583 l 486 583 m -28 306 l -28 444 l 861 444 l 861 306 l -28 306 m -28 583 l -28 722 l 208 722 l 208 1417 l 347 1417 l 347 583 l -28 583 z "},"╝":{"ha":833,"x_min":-28,"x_max":625,"o":"m -28 306 l -28 444 l 486 444 l 486 1417 l 625 1417 l 625 306 l -28 306 m -28 583 l -28 722 l 208 722 l 208 1417 l 347 1417 l 347 583 l -28 583 z "},"╚":{"ha":833,"x_min":208,"x_max":861,"o":"m 208 306 l 208 1417 l 347 1417 l 347 444 l 861 444 l 861 306 l 208 306 m 486 583 l 486 1417 l 625 1417 l 625 722 l 861 722 l 861 583 l 486 583 z "},"║":{"ha":833,"x_min":208,"x_max":625,"o":"m 486 -417 l 486 1417 l 625 1417 l 625 -417 l 486 -417 m 208 -417 l 208 1417 l 347 1417 l 347 -417 l 208 -417 z "},"╬":{"ha":833,"x_min":-28,"x_max":861,"o":"m 486 -417 l 486 444 l 861 444 l 861 306 l 625 306 l 625 -417 l 486 -417 m 208 -417 l 208 306 l -28 306 l -28 444 l 347 444 l 347 -417 l 208 -417 m -28 583 l -28 722 l 208 722 l 208 1417 l 347 1417 l 347 583 l -28 583 m 486 583 l 486 1417 l 625 1417 l 625 722 l 861 722 l 861 583 l 486 583 z "},"╣":{"ha":833,"x_min":-28,"x_max":625,"o":"m 208 -417 l 208 306 l -28 306 l -28 444 l 347 444 l 347 -417 l 208 -417 m 486 -417 l 486 1417 l 625 1417 l 625 -417 l 486 -417 m -28 583 l -28 722 l 208 722 l 208 1417 l 347 1417 l 347 583 l -28 583 z "},"╠":{"ha":833,"x_min":208,"x_max":861,"o":"m 486 -417 l 486 444 l 861 444 l 861 306 l 625 306 l 625 -417 l 486 -417 m 208 -417 l 208 1417 l 347 1417 l 347 -417 l 208 -417 m 486 583 l 486 1417 l 625 1417 l 625 722 l 861 722 l 861 583 l 486 583 z "},"╥":{"ha":833,"x_min":-28,"x_max":861,"o":"m 208 -417 l 208 444 l -28 444 l -28 583 l 861 583 l 861 444 l 625 444 l 625 -417 l 486 -417 l 486 444 l 347 444 l 347 -417 l 208 -417 z "},"╖":{"ha":833,"x_min":-28,"x_max":625,"o":"m 208 -417 l 208 444 l -28 444 l -28 583 l 625 583 l 625 -417 l 486 -417 l 486 444 l 347 444 l 347 -417 l 208 -417 z "},"╓":{"ha":833,"x_min":208,"x_max":861,"o":"m 208 -417 l 208 583 l 861 583 l 861 444 l 625 444 l 625 -417 l 486 -417 l 486 444 l 347 444 l 347 -417 l 208 -417 z "},"┰":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┒":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 556 583 l 556 -417 l 278 -417 z "},"┧":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 556 583 l 556 -417 l 278 -417 z "},"┎":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┟":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"╁":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┯":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"┑":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 486 653 l 486 -417 l 347 -417 z "},"┩":{"ha":833,"x_min":-28,"x_max":556,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 375 l 486 375 l 486 -417 l 347 -417 z "},"┍":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"┡":{"ha":833,"x_min":278,"x_max":861,"o":"m 347 -417 l 347 375 l 278 375 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"╇":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"╤":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 306 l -28 306 l -28 444 l 861 444 l 861 306 l 486 306 l 486 -417 l 347 -417 m -28 583 l -28 722 l 861 722 l 861 583 l -28 583 z "},"╕":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 306 l -28 306 l -28 444 l 347 444 l 347 583 l -28 583 l -28 722 l 486 722 l 486 -417 l 347 -417 z "},"╒":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 722 l 861 722 l 861 583 l 486 583 l 486 444 l 861 444 l 861 306 l 486 306 l 486 -417 l 347 -417 z "},"╍":{"ha":833,"x_min":104,"x_max":729,"o":"m 521 375 l 521 653 l 729 653 l 729 375 l 521 375 m 104 375 l 104 653 l 313 653 l 313 375 l 104 375 z "},"╏":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 -201 l 278 375 l 556 375 l 556 -201 l 278 -201 m 278 639 l 278 1213 l 556 1213 l 556 639 l 278 639 z "},"╻":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 -417 l 278 583 l 556 583 l 556 -417 l 278 -417 z "},"┳":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┓":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 556 653 l 556 -417 l 278 -417 z "},"┏":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"━":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 861 653 l 861 375 l -28 375 z "},"╸":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 375 l -28 653 l 486 653 l 486 375 l -28 375 z "},"╾":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 486 653 l 486 583 l 861 583 l 861 444 l 486 444 l 486 375 l -28 375 z "},"┉":{"ha":833,"x_min":35,"x_max":799,"o":"m 660 375 l 660 653 l 799 653 l 799 375 l 660 375 m 35 375 l 35 653 l 174 653 l 174 375 l 35 375 m 243 375 l 243 653 l 382 653 l 382 375 l 243 375 m 451 375 l 451 653 l 590 653 l 590 375 l 451 375 z "},"┋":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 1000 l 278 1299 l 556 1299 l 556 1000 l 278 1000 m 278 -271 l 278 28 l 556 28 l 556 -271 l 278 -271 m 278 153 l 278 451 l 556 451 l 556 153 l 278 153 m 278 576 l 278 875 l 556 875 l 556 576 l 278 576 z "},"╺":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 375 l 347 653 l 861 653 l 861 375 l 347 375 z "},"┅":{"ha":833,"x_min":51,"x_max":782,"o":"m 607 375 l 607 653 l 782 653 l 782 375 l 607 375 m 51 375 l 51 653 l 226 653 l 226 375 l 51 375 m 329 375 l 329 653 l 504 653 l 504 375 l 329 375 z "},"┇":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 253 l 278 749 l 556 749 l 556 253 l 278 253 m 278 -304 l 278 149 l 556 149 l 556 -304 l 278 -304 m 278 850 l 278 1303 l 556 1303 l 556 850 l 278 850 z "},"╹":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 444 l 278 1417 l 556 1417 l 556 444 l 278 444 z "},"┻":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l -28 375 z "},"┛":{"ha":833,"x_min":-28,"x_max":556,"o":"m -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 375 l -28 375 z "},"╿":{"ha":833,"x_min":278,"x_max":556,"o":"m 347 -417 l 347 444 l 278 444 l 278 1417 l 556 1417 l 556 444 l 486 444 l 486 -417 l 347 -417 z "},"┗":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 375 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 278 375 z "},"┃":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 -417 l 278 1417 l 556 1417 l 556 -417 l 278 -417 z "},"╋":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┫":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 -417 l 278 -417 z "},"┣":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"╅":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 556 653 l 556 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┭":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 486 653 l 486 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┵":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 486 444 l 486 375 l -28 375 z "},"┽":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┲":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 278 583 l 278 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┺":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 375 l 278 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 278 375 z "},"╊":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"╃":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 556 444 l 556 375 l 486 375 l 486 -417 l 347 -417 z "},"╮":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 111 q 307 288 347 213 q 194 403 267 363 q 21 444 121 444 l -28 444 l -28 583 l 21 583 q 267 525 163 583 q 428 360 371 467 q 486 111 486 254 l 486 -417 l 347 -417 z "},"╭":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 111 q 405 360 347 254 q 567 525 463 467 q 813 583 672 583 l 861 583 l 861 444 l 813 444 q 640 403 714 444 q 526 288 567 363 q 486 111 486 213 l 486 -417 l 347 -417 z "},"╯":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 444 l -28 583 l 21 583 q 194 624 121 583 q 307 740 267 665 q 347 917 347 815 l 347 1417 l 486 1417 l 486 917 q 428 667 486 774 q 267 503 371 561 q 21 444 163 444 l -28 444 z "},"╰":{"ha":833,"x_min":347,"x_max":861,"o":"m 813 444 q 567 503 672 444 q 405 667 463 561 q 347 917 347 774 l 347 1417 l 486 1417 l 486 917 q 526 740 486 815 q 640 624 567 665 q 813 583 714 583 l 861 583 l 861 444 l 813 444 z "},"╳":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 -222 l -28 -167 l 346 500 l -28 1167 l -28 1222 l 83 1222 l 417 632 l 750 1222 l 861 1222 l 861 1167 l 488 500 l 861 -167 l 861 -222 l 750 -222 l 417 368 l 83 -222 l -28 -222 z "},"╲":{"ha":833,"x_min":-28,"x_max":861,"o":"m 750 -222 l -28 1167 l -28 1222 l 83 1222 l 861 -167 l 861 -222 l 750 -222 z "},"╱":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 -222 l -28 -167 l 750 1222 l 861 1222 l 861 1167 l 83 -222 l -28 -222 z "},"╌":{"ha":833,"x_min":97,"x_max":736,"o":"m 514 444 l 514 583 l 736 583 l 736 444 l 514 444 m 97 444 l 97 583 l 319 583 l 319 444 l 97 444 z "},"╎":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 -229 l 347 403 l 486 403 l 486 -229 l 347 -229 m 347 611 l 347 1240 l 486 1240 l 486 611 l 347 611 z "},"╷":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 -417 l 347 583 l 486 583 l 486 -417 l 347 -417 z "},"┬":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┐":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 486 583 l 486 -417 l 347 -417 z "},"┌":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"─":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 444 l -28 583 l 861 583 l 861 444 l -28 444 z "},"╴":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 444 l -28 583 l 486 583 l 486 444 l -28 444 z "},"╼":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 375 l 347 444 l -28 444 l -28 583 l 347 583 l 347 653 l 861 653 l 861 375 l 347 375 z "},"┈":{"ha":833,"x_min":35,"x_max":799,"o":"m 660 444 l 660 583 l 799 583 l 799 444 l 660 444 m 35 444 l 35 583 l 174 583 l 174 444 l 35 444 m 243 444 l 243 583 l 382 583 l 382 444 l 243 444 m 451 444 l 451 583 l 590 583 l 590 444 l 451 444 z "},"┊":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 1000 l 347 1299 l 486 1299 l 486 1000 l 347 1000 m 347 -271 l 347 28 l 486 28 l 486 -271 l 347 -271 m 347 153 l 347 451 l 486 451 l 486 153 l 347 153 m 347 576 l 347 875 l 486 875 l 486 576 l 347 576 z "},"╶":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 444 l 347 583 l 861 583 l 861 444 l 347 444 z "},"┄":{"ha":833,"x_min":51,"x_max":782,"o":"m 607 444 l 607 583 l 782 583 l 782 444 l 607 444 m 51 444 l 51 583 l 226 583 l 226 444 l 51 444 m 329 444 l 329 583 l 504 583 l 504 444 l 329 444 z "},"┆":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 833 l 347 1303 l 486 1303 l 486 833 l 347 833 m 347 -304 l 347 164 l 486 164 l 486 -304 l 347 -304 m 347 268 l 347 732 l 486 732 l 486 268 l 347 268 z "},"╵":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 444 l 347 1417 l 486 1417 l 486 444 l 347 444 z "},"╽":{"ha":833,"x_min":278,"x_max":556,"o":"m 278 -417 l 278 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 556 583 l 556 -417 l 278 -417 z "},"┴":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l -28 444 z "},"┘":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 444 l -28 444 z "},"└":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 444 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 347 444 z "},"│":{"ha":833,"x_min":347,"x_max":486,"o":"m 347 -417 l 347 1417 l 486 1417 l 486 -417 l 347 -417 z "},"┼":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┤":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 -417 l 347 -417 z "},"├":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 1417 l 486 1417 l 486 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"╆":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 278 583 l 278 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┮":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 347 583 l 347 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"┶":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 375 l 347 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 347 375 z "},"┾":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 347 583 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"┱":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 556 653 l 556 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┹":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 556 444 l 556 375 l -28 375 z "},"╉":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 278 653 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"╄":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l 278 375 l 278 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"╨":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 444 l -28 583 l 208 583 l 208 1417 l 347 1417 l 347 583 l 486 583 l 486 1417 l 625 1417 l 625 583 l 861 583 l 861 444 l -28 444 z "},"╜":{"ha":833,"x_min":-28,"x_max":625,"o":"m -28 444 l -28 583 l 208 583 l 208 1417 l 347 1417 l 347 583 l 486 583 l 486 1417 l 625 1417 l 625 444 l -28 444 z "},"╙":{"ha":833,"x_min":208,"x_max":861,"o":"m 208 444 l 208 1417 l 347 1417 l 347 583 l 486 583 l 486 1417 l 625 1417 l 625 583 l 861 583 l 861 444 l 208 444 z "},"╀":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┸":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l -28 444 z "},"┦":{"ha":833,"x_min":-28,"x_max":556,"o":"m 347 -417 l 347 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 444 l 486 444 l 486 -417 l 347 -417 z "},"┚":{"ha":833,"x_min":-28,"x_max":556,"o":"m -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 444 l -28 444 z "},"┞":{"ha":833,"x_min":278,"x_max":861,"o":"m 347 -417 l 347 444 l 278 444 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 486 444 l 486 -417 l 347 -417 z "},"┖":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 444 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 278 444 z "},"╈":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┷":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l -28 375 z "},"┪":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 556 653 l 556 -417 l 278 -417 z "},"┙":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 375 l -28 375 z "},"┢":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 556 375 l 556 -417 l 278 -417 z "},"┕":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 375 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 347 375 z "},"╧":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 583 l -28 722 l 347 722 l 347 1417 l 486 1417 l 486 722 l 861 722 l 861 583 l -28 583 m -28 306 l -28 444 l 861 444 l 861 306 l -28 306 z "},"╛":{"ha":833,"x_min":-28,"x_max":486,"o":"m -28 306 l -28 444 l 347 444 l 347 583 l -28 583 l -28 722 l 347 722 l 347 1417 l 486 1417 l 486 306 l -28 306 z "},"╘":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 306 l 347 1417 l 486 1417 l 486 722 l 861 722 l 861 583 l 486 583 l 486 444 l 861 444 l 861 306 l 347 306 z "},"╫":{"ha":833,"x_min":-28,"x_max":861,"o":"m 208 -417 l 208 444 l -28 444 l -28 583 l 208 583 l 208 1417 l 347 1417 l 347 583 l 486 583 l 486 1417 l 625 1417 l 625 583 l 861 583 l 861 444 l 625 444 l 625 -417 l 486 -417 l 486 444 l 347 444 l 347 -417 l 208 -417 z "},"╢":{"ha":833,"x_min":-28,"x_max":625,"o":"m 208 -417 l 208 444 l -28 444 l -28 583 l 208 583 l 208 1417 l 347 1417 l 347 -417 l 208 -417 m 486 -417 l 486 1417 l 625 1417 l 625 -417 l 486 -417 z "},"╟":{"ha":833,"x_min":208,"x_max":861,"o":"m 486 -417 l 486 1417 l 625 1417 l 625 583 l 861 583 l 861 444 l 625 444 l 625 -417 l 486 -417 m 208 -417 l 208 1417 l 347 1417 l 347 -417 l 208 -417 z "},"╂":{"ha":833,"x_min":-28,"x_max":861,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┨":{"ha":833,"x_min":-28,"x_max":556,"o":"m 278 -417 l 278 444 l -28 444 l -28 583 l 278 583 l 278 1417 l 556 1417 l 556 -417 l 278 -417 z "},"┠":{"ha":833,"x_min":278,"x_max":861,"o":"m 278 -417 l 278 1417 l 556 1417 l 556 583 l 861 583 l 861 444 l 556 444 l 556 -417 l 278 -417 z "},"┿":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"┥":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 375 l -28 375 l -28 653 l 347 653 l 347 1417 l 486 1417 l 486 -417 l 347 -417 z "},"┝":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 1417 l 486 1417 l 486 653 l 861 653 l 861 375 l 486 375 l 486 -417 l 347 -417 z "},"╪":{"ha":833,"x_min":-28,"x_max":861,"o":"m 347 -417 l 347 306 l -28 306 l -28 444 l 347 444 l 347 583 l -28 583 l -28 722 l 347 722 l 347 1417 l 486 1417 l 486 722 l 861 722 l 861 583 l 486 583 l 486 444 l 861 444 l 861 306 l 486 306 l 486 -417 l 347 -417 z "},"╡":{"ha":833,"x_min":-28,"x_max":486,"o":"m 347 -417 l 347 306 l -28 306 l -28 444 l 347 444 l 347 583 l -28 583 l -28 722 l 347 722 l 347 1417 l 486 1417 l 486 -417 l 347 -417 z "},"╞":{"ha":833,"x_min":347,"x_max":861,"o":"m 347 -417 l 347 1417 l 486 1417 l 486 722 l 861 722 l 861 583 l 486 583 l 486 444 l 861 444 l 861 306 l 486 306 l 486 -417 l 347 -417 z "},"⍴":{"ha":833,"x_min":131,"x_max":708,"o":"m 131 -250 l 131 494 q 166 646 131 582 q 267 744 201 710 q 421 778 332 778 q 575 744 511 778 q 674 647 639 710 q 708 494 708 583 l 708 271 q 678 119 708 183 q 594 21 649 56 q 461 -14 539 -14 q 312 38 368 -14 q 256 175 256 89 l 281 146 l 253 146 l 256 -28 l 256 -250 l 131 -250 m 419 94 q 541 142 499 94 q 583 278 583 189 l 583 486 q 541 622 583 575 q 419 669 499 669 q 298 622 340 669 q 256 486 256 575 l 256 278 q 299 143 256 192 q 419 94 343 94 z "},"⚠":{"ha":833,"x_min":-14,"x_max":847,"o":"m 417 133 q 371 181 371 133 q 417 228 371 228 l 419 228 q 465 181 465 228 q 419 133 465 133 l 417 133 m 403 283 l 382 432 l 382 511 l 451 511 l 451 432 l 431 283 l 403 283 m -14 0 l 417 847 l 847 0 l -14 0 m 101 69 l 732 69 l 417 690 l 101 69 z "},"⚡":{"ha":833,"x_min":28,"x_max":806,"o":"m 653 1167 l 403 611 l 806 611 l 69 -153 l 410 431 l 28 431 l 653 1167 z "},"✕":{"ha":833,"x_min":92,"x_max":742,"o":"m 171 140 l 93 218 l 338 463 l 92 708 l 172 789 l 418 543 l 663 788 l 740 710 l 496 465 l 742 219 l 661 139 l 415 385 l 171 140 z "},"@":{"ha":833,"x_min":63,"x_max":778,"o":"m 451 -250 q 246 -201 333 -250 q 110 -60 158 -151 q 63 153 63 31 l 63 625 q 108 840 63 750 q 237 979 153 931 q 438 1028 321 1028 q 619 987 543 1028 q 737 869 696 946 q 778 688 778 793 l 778 90 l 679 90 l 679 167 l 640 167 l 667 194 q 626 109 667 142 q 519 76 586 76 q 381 131 429 76 q 333 292 333 186 l 333 458 q 381 619 333 564 q 519 674 429 674 q 626 641 586 674 q 667 554 667 608 l 647 583 l 681 583 l 667 681 l 667 688 q 640 821 667 767 q 563 903 614 875 q 438 931 513 931 q 243 850 313 931 q 174 625 174 769 l 174 153 q 248 -66 174 14 q 451 -146 322 -146 l 549 -146 l 549 -250 l 451 -250 m 556 164 q 640 199 613 164 q 667 306 667 233 l 667 460 q 640 556 667 525 q 556 586 613 586 q 472 555 500 586 q 444 458 444 524 l 444 292 q 472 195 444 226 q 556 164 500 164 z "},"&":{"ha":833,"x_min":76,"x_max":786,"o":"m 319 -14 q 141 47 206 -14 q 76 215 76 108 l 76 389 q 115 513 76 463 q 224 585 153 564 l 214 599 q 151 707 171 657 q 132 807 132 757 q 163 924 132 874 q 251 1001 194 974 q 382 1028 307 1028 q 522 999 463 1028 q 613 917 581 969 q 644 790 644 864 l 519 790 q 503 860 519 831 q 456 904 486 889 q 382 919 425 919 q 316 906 344 919 q 272 866 288 892 q 257 804 257 840 q 272 729 257 769 q 313 653 286 689 l 551 324 l 650 500 l 781 500 l 624 224 l 786 0 l 649 0 l 561 121 q 319 -14 458 -14 m 326 97 q 417 128 374 97 q 492 215 461 160 l 288 497 q 223 463 244 490 q 201 389 201 435 l 201 215 q 234 128 201 160 q 326 97 267 97 z "},"¶":{"ha":833,"x_min":90,"x_max":701,"o":"m 354 -250 l 354 431 q 163 496 236 431 q 90 667 90 561 l 90 778 q 163 949 90 885 q 354 1014 236 1014 l 465 1014 l 465 -250 l 354 -250 m 590 -250 l 590 1014 l 701 1014 l 701 -250 l 590 -250 z "},"§":{"ha":833,"x_min":107,"x_max":726,"o":"m 396 -214 q 259 -187 321 -214 q 158 -112 197 -160 q 107 0 118 -64 l 239 0 q 294 -74 251 -46 q 396 -103 338 -103 l 438 -103 q 558 -70 517 -103 q 600 17 600 -37 q 565 99 600 67 q 460 146 529 132 l 332 172 q 178 253 236 192 q 119 396 119 315 q 171 532 119 475 q 299 596 222 589 l 299 606 q 221 624 261 606 q 153 687 181 643 q 125 804 125 731 q 198 967 125 907 q 401 1028 271 1028 l 443 1028 q 628 972 553 1028 q 718 826 704 917 l 586 826 q 537 892 576 867 q 443 917 497 917 l 401 917 q 291 886 331 917 q 251 803 251 856 q 287 726 251 758 q 386 679 322 693 l 511 653 q 667 572 610 632 q 724 428 724 513 q 673 292 724 347 q 539 236 622 236 l 539 226 q 623 203 579 225 q 697 136 667 181 q 726 21 726 92 q 650 -151 726 -87 q 438 -214 574 -214 l 396 -214 m 458 257 q 531 268 500 249 q 580 327 563 288 q 597 415 597 367 q 567 501 597 464 q 488 547 536 538 l 385 568 q 312 558 343 576 q 263 501 281 539 q 246 417 246 464 q 276 326 246 364 q 353 278 306 288 l 458 257 z "},"©":{"ha":833,"x_min":63,"x_max":771,"o":"m 417 153 q 231 194 311 153 q 107 311 151 236 q 63 486 63 386 l 63 694 q 107 869 63 794 q 231 986 151 944 q 417 1028 311 1028 q 603 986 524 1028 q 726 869 682 944 q 771 694 771 794 l 771 486 q 726 311 771 386 q 603 194 682 236 q 417 153 524 153 m 417 222 q 563 255 500 222 q 660 347 625 288 q 694 486 694 407 l 694 694 q 660 833 694 774 q 563 925 625 892 q 417 958 500 958 q 271 925 333 958 q 174 833 208 892 q 139 694 139 774 l 139 486 q 174 347 139 407 q 271 255 208 288 q 417 222 333 222 m 424 340 q 298 384 346 340 q 250 500 250 428 l 250 681 q 298 797 250 753 q 424 840 346 840 q 549 797 501 840 q 596 681 596 753 l 506 681 q 483 741 506 718 q 424 764 460 764 q 363 741 386 764 q 340 681 340 718 l 340 500 q 363 440 340 463 q 424 417 386 417 q 483 440 460 417 q 506 500 506 463 l 596 500 q 549 384 596 428 q 424 340 501 340 z "},"®":{"ha":833,"x_min":63,"x_max":771,"o":"m 417 153 q 231 194 311 153 q 107 311 151 236 q 63 486 63 386 l 63 694 q 107 869 63 794 q 231 986 151 944 q 417 1028 311 1028 q 603 986 524 1028 q 726 869 682 944 q 771 694 771 794 l 771 486 q 726 311 771 386 q 603 194 682 236 q 417 153 524 153 m 504 347 l 415 560 l 500 560 l 593 347 l 504 347 m 417 222 q 563 255 500 222 q 660 347 625 288 q 694 486 694 407 l 694 694 q 660 833 694 774 q 563 925 625 892 q 417 958 500 958 q 271 925 333 958 q 174 833 208 892 q 139 694 139 774 l 139 486 q 174 347 139 407 q 271 255 208 288 q 417 222 333 222 m 264 347 l 264 833 l 422 833 q 541 794 497 833 q 585 688 585 754 q 541 581 585 621 q 422 542 497 542 l 347 542 l 347 347 l 264 347 m 347 611 l 422 611 q 479 631 458 611 q 500 688 500 651 q 479 744 500 724 q 422 764 458 764 l 347 764 l 347 611 z "},"™":{"ha":833,"x_min":21,"x_max":785,"o":"m 160 514 l 160 944 l 21 944 l 21 1014 l 382 1014 l 382 944 l 243 944 l 243 514 l 160 514 m 431 514 l 431 1014 l 542 1014 l 589 872 q 602 823 596 853 q 611 774 608 793 q 619 823 614 793 q 631 872 624 853 l 676 1014 l 785 1014 l 785 514 l 708 514 l 708 821 q 710 876 708 847 q 714 930 711 904 q 718 972 717 956 q 700 909 710 944 q 686 861 690 874 l 644 718 l 574 718 l 528 863 q 514 910 524 875 q 496 972 504 944 q 501 930 499 956 q 505 876 503 904 q 507 821 507 847 l 507 514 l 431 514 z "},"°":{"ha":833,"x_min":208,"x_max":625,"o":"m 417 625 q 266 681 324 625 q 208 826 208 736 q 266 972 208 917 q 417 1028 324 1028 q 568 972 511 1028 q 625 826 625 917 q 568 681 625 736 q 417 625 511 625 m 415 696 q 507 732 472 696 q 542 826 542 768 q 507 922 542 886 q 415 958 472 958 q 326 922 360 958 q 292 826 292 886 q 326 732 292 768 q 415 696 360 696 z "},"′":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 646 l 340 1078 l 521 1078 l 340 646 l 229 646 z "},"″":{"ha":833,"x_min":118,"x_max":729,"o":"m 438 646 l 549 1078 l 729 1078 l 549 646 l 438 646 m 118 646 l 229 1078 l 410 1078 l 229 646 l 118 646 z "},"|":{"ha":833,"x_min":354,"x_max":479,"o":"m 354 -153 l 354 1153 l 479 1153 l 479 -153 l 354 -153 z "},"¦":{"ha":833,"x_min":354,"x_max":479,"o":"m 354 625 l 354 1153 l 479 1153 l 479 625 l 354 625 m 354 -153 l 354 375 l 479 375 l 479 -153 l 354 -153 z "},"†":{"ha":833,"x_min":111,"x_max":722,"o":"m 354 -153 l 354 722 l 111 722 l 111 833 l 354 833 l 354 1153 l 479 1153 l 479 833 l 722 833 l 722 722 l 479 722 l 479 -153 l 354 -153 z "},"ℓ":{"ha":833,"x_min":97,"x_max":694,"o":"m 468 0 q 345 27 397 0 q 265 104 293 54 q 236 222 236 154 l 236 813 q 297 969 236 910 q 458 1028 358 1028 q 620 969 560 1028 q 681 813 681 911 l 681 694 q 626 526 681 601 q 474 415 571 451 l 139 288 l 97 400 l 435 524 q 524 590 493 546 q 556 694 556 635 l 556 813 q 531 888 556 861 q 458 914 506 914 q 387 888 413 914 q 361 813 361 861 l 361 222 q 390 142 361 171 q 468 114 418 114 q 526 128 500 114 q 571 161 551 142 q 600 199 590 181 l 694 140 q 651 78 682 111 q 574 23 619 46 q 468 0 528 0 z "},"‡":{"ha":833,"x_min":111,"x_max":722,"o":"m 354 -153 l 354 194 l 111 194 l 111 306 l 354 306 l 354 708 l 111 708 l 111 819 l 354 819 l 354 1153 l 479 1153 l 479 819 l 722 819 l 722 708 l 479 708 l 479 306 l 722 306 l 722 194 l 479 194 l 479 -153 l 354 -153 z "},"№":{"ha":833,"x_min":42,"x_max":819,"o":"m 42 0 l 42 1014 l 174 1014 l 336 385 q 356 308 344 356 q 378 210 367 261 q 399 118 390 158 q 393 186 396 149 q 388 264 390 224 q 383 340 385 304 q 382 403 382 376 l 382 1014 l 479 1014 l 479 0 l 347 0 l 189 631 q 170 710 182 663 q 147 808 158 757 q 125 897 135 858 q 130 831 128 868 q 134 753 132 793 q 138 677 136 714 q 139 611 139 640 l 139 0 l 42 0 m 688 417 q 594 457 632 417 q 556 563 556 497 l 556 882 q 594 988 556 947 q 688 1028 632 1028 q 782 988 744 1028 q 819 882 819 947 l 819 563 q 782 457 819 497 q 688 417 744 417 m 688 493 q 722 506 707 493 q 736 549 736 518 l 736 896 q 722 936 736 921 q 688 951 707 951 q 654 936 669 951 q 639 896 639 921 l 639 549 q 654 506 639 518 q 688 493 669 493 z "},"℮":{"ha":833,"x_min":83,"x_max":750,"o":"m 417 -14 q 242 31 318 -14 q 125 158 167 76 q 83 347 83 240 l 83 667 q 125 856 83 775 q 242 983 167 938 q 417 1028 318 1028 q 592 983 518 1028 q 708 857 667 938 q 750 667 750 776 l 750 499 l 181 499 l 181 568 l 621 568 l 611 557 l 611 875 q 544 935 594 904 q 417 965 494 965 q 290 935 340 965 q 222 875 239 904 l 222 139 q 290 79 239 110 q 417 49 340 49 q 567 91 499 49 q 663 201 635 133 l 732 201 q 663 89 710 138 q 552 13 615 40 q 417 -14 489 -14 z "},"⌃":{"ha":833,"x_min":83,"x_max":750,"o":"m 83 514 l 347 764 l 486 764 l 750 514 l 596 514 l 414 678 l 236 514 l 83 514 z "},"⌂":{"ha":833,"x_min":113,"x_max":721,"o":"m 113 0 l 113 482 l 417 778 l 721 482 l 721 0 l 113 0 m 182 69 l 651 69 l 651 449 l 417 678 l 182 449 l 182 69 z "},"⌥":{"ha":833,"x_min":14,"x_max":819,"o":"m 510 0 l 240 653 l 14 653 l 14 764 l 324 764 l 593 111 l 819 111 l 819 0 l 510 0 m 536 653 l 536 764 l 819 764 l 819 653 l 536 653 z "},"⌘":{"ha":833,"x_min":21,"x_max":813,"o":"m 658 471 l 658 564 q 703 581 686 564 q 719 625 719 597 q 703 669 719 653 q 658 685 686 685 q 615 669 632 685 q 599 625 599 653 l 506 625 q 548 736 506 694 q 658 778 590 778 q 770 736 728 778 q 813 625 813 694 q 770 513 813 556 q 658 471 728 471 m 174 -14 q 63 28 106 -14 q 21 140 21 71 q 63 251 21 210 q 174 293 106 293 l 174 200 q 131 184 147 200 q 114 140 114 168 q 131 96 114 113 q 174 79 147 79 q 218 96 201 79 q 235 140 235 113 l 328 140 q 285 28 328 71 q 174 -14 243 -14 m 235 140 l 235 625 l 328 625 l 328 140 l 235 140 m 174 200 l 174 293 l 658 293 l 658 200 l 174 200 m 658 -14 q 548 28 590 -14 q 506 140 506 71 l 599 140 q 615 96 599 113 q 658 79 632 79 q 703 96 686 79 q 719 140 719 113 q 703 184 719 168 q 658 200 686 200 l 658 293 q 770 251 728 293 q 813 140 813 210 q 770 28 813 71 q 658 -14 728 -14 m 174 471 q 63 513 106 471 q 21 625 21 556 q 63 736 21 694 q 174 778 106 778 q 285 736 243 778 q 328 625 328 694 l 235 625 q 218 669 235 653 q 174 685 201 685 q 131 669 147 685 q 114 625 114 653 q 131 581 114 597 q 174 564 147 564 l 174 471 m 174 471 l 174 564 l 658 564 l 658 471 l 174 471 m 506 140 l 506 625 l 599 625 l 599 140 l 506 140 z "},"⏻":{"ha":833,"x_min":-28,"x_max":861,"o":"m 417 -14 q 243 19 324 -14 q 101 113 163 53 q 6 253 40 174 q -28 424 -28 332 q 7 593 -28 514 q 100 732 42 672 q 165 767 129 763 q 222 749 200 772 q 240 693 244 726 q 207 628 235 660 q 152 537 172 589 q 132 424 132 485 q 168 273 132 339 q 269 169 204 207 q 417 132 333 132 q 565 169 500 132 q 665 273 629 207 q 701 424 701 339 q 682 537 701 485 q 626 628 663 589 q 594 693 599 660 q 611 749 589 726 q 669 767 635 772 q 733 732 704 763 q 827 594 793 674 q 861 424 861 514 q 827 253 861 332 q 732 113 793 174 q 590 19 671 53 q 417 -14 510 -14 m 417 313 q 363 337 386 313 q 340 396 340 361 l 340 924 q 363 983 340 958 q 417 1007 386 1007 q 471 983 449 1007 q 493 924 493 958 l 493 396 q 471 337 493 361 q 417 313 449 313 z "},"⏼":{"ha":833,"x_min":-28,"x_max":861,"o":"m 417 -14 q 243 19 324 -14 q 101 113 163 53 q 6 253 40 174 q -28 424 -28 332 q 6 594 -28 515 q 101 734 40 674 q 243 828 163 794 q 417 861 324 861 q 590 828 510 861 q 732 734 671 794 q 827 594 793 674 q 861 424 861 515 q 827 253 861 332 q 732 113 793 174 q 590 19 671 53 q 417 -14 510 -14 m 417 118 q 568 159 500 118 q 676 269 636 200 q 715 424 715 339 q 676 578 715 508 q 568 688 636 647 q 417 729 500 729 q 266 688 333 729 q 158 578 199 647 q 118 424 118 508 q 158 269 118 339 q 266 159 199 200 q 417 118 333 118 m 417 215 q 363 240 386 215 q 340 299 340 264 l 340 549 q 363 608 340 583 q 417 632 386 632 q 471 608 449 632 q 493 549 493 583 l 493 299 q 471 240 493 264 q 417 215 449 215 z "},"⭘":{"ha":833,"x_min":-28,"x_max":861,"o":"m 417 -14 q 243 19 324 -14 q 101 113 163 53 q 6 253 40 174 q -28 424 -28 332 q 6 594 -28 515 q 101 734 40 674 q 243 828 163 794 q 417 861 324 861 q 590 828 510 861 q 732 734 671 794 q 827 594 793 674 q 861 424 861 515 q 827 253 861 332 q 732 113 793 174 q 590 19 671 53 q 417 -14 510 -14 m 417 118 q 568 159 500 118 q 676 269 636 200 q 715 424 715 339 q 676 578 715 508 q 568 688 636 647 q 417 729 500 729 q 266 688 333 729 q 158 578 199 647 q 118 424 118 508 q 158 269 118 339 q 266 159 199 200 q 417 118 333 118 z "},"⏽":{"ha":833,"x_min":340,"x_max":493,"o":"m 417 -7 q 363 17 386 -7 q 340 76 340 42 l 340 771 q 363 830 340 806 q 417 854 386 854 q 471 830 449 854 q 493 771 493 806 l 493 76 q 471 17 493 42 q 417 -7 449 -7 z "},"⏾":{"ha":833,"x_min":8,"x_max":853,"o":"m 139 118 q 41 265 74 183 q 9 432 8 346 q 43 599 10 518 q 143 747 76 681 q 257 832 197 801 q 212 657 215 753 q 240 471 208 561 q 336 317 272 381 q 492 219 401 251 q 677 191 582 188 q 853 236 772 194 q 768 122 822 176 q 620 22 701 56 q 453 -12 539 -11 q 285 20 367 -12 q 139 118 204 53 z "},"⌅":{"ha":833,"x_min":83,"x_max":750,"o":"m 118 653 l 118 764 l 715 764 l 715 653 l 118 653 m 83 319 l 347 569 l 486 569 l 750 319 l 596 319 l 414 483 l 236 319 l 83 319 z "},"˳":{"ha":833,"x_min":250,"x_max":583,"o":"m 417 -347 q 296 -309 342 -347 q 250 -208 250 -271 q 296 -108 250 -146 q 417 -69 342 -69 q 538 -108 492 -69 q 583 -208 583 -146 q 538 -309 583 -271 q 417 -347 492 -347 m 415 -276 q 477 -258 454 -276 q 500 -208 500 -239 q 478 -156 500 -172 q 415 -139 456 -139 q 356 -158 379 -139 q 333 -208 333 -176 q 356 -258 333 -239 q 415 -276 379 -276 z "},"˷":{"ha":833,"x_min":194,"x_max":639,"o":"m 514 -292 q 446 -277 472 -292 q 401 -243 419 -262 q 367 -209 383 -224 q 326 -194 350 -194 q 297 -206 308 -194 q 285 -243 285 -218 l 285 -285 l 194 -285 l 194 -243 q 229 -146 194 -181 q 319 -111 264 -111 q 388 -126 361 -111 q 432 -160 414 -140 q 467 -194 450 -179 q 507 -208 483 -208 q 538 -197 526 -208 q 549 -160 549 -185 l 549 -118 l 639 -118 l 639 -160 q 605 -257 639 -222 q 514 -292 571 -292 z "},"ʹ":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 569 l 340 1001 l 521 1001 l 340 569 l 229 569 z "},"͵":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 -222 l 340 210 l 521 210 l 340 -222 l 229 -222 z "},"ʼ":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 646 l 340 1078 l 521 1078 l 340 646 l 229 646 z "},"ʺ":{"ha":833,"x_min":76,"x_max":750,"o":"m 458 568 l 569 1000 l 750 1000 l 569 568 l 458 568 m 76 568 l 188 1000 l 368 1000 l 188 568 l 76 568 z "},"ˉ":{"ha":833,"x_min":194,"x_max":639,"o":"z "},"ʹ":{"ha":833,"x_min":229,"x_max":521,"o":"m 229 569 l 340 1001 l 521 1001 l 340 569 l 229 569 z "},"̈":{"ha":0,"x_min":174,"x_max":660,"o":"m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"̇":{"ha":0,"x_min":318,"x_max":515,"o":"m 417 901 q 344 925 371 901 q 318 989 318 949 q 344 1055 318 1031 q 417 1079 371 1079 q 489 1055 463 1079 q 515 989 515 1031 q 489 925 515 949 q 417 901 463 901 z "},"̀":{"ha":0,"x_min":253,"x_max":544,"o":"m 413 896 l 253 1090 l 392 1090 l 544 896 l 413 896 z "},"́":{"ha":0,"x_min":294,"x_max":576,"o":"m 294 896 l 442 1090 l 576 1090 l 422 896 l 294 896 z "},"̋":{"ha":0,"x_min":204,"x_max":733,"o":"m 453 896 l 606 1090 l 733 1090 l 574 896 l 453 896 m 204 896 l 357 1090 l 485 1090 l 325 896 l 204 896 z "},"̂":{"ha":0,"x_min":165,"x_max":668,"o":"m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"̌":{"ha":0,"x_min":165,"x_max":668,"o":"m 360 896 l 165 1090 l 303 1090 l 417 982 l 528 1090 l 668 1090 l 475 896 l 360 896 z "},"̆":{"ha":0,"x_min":194,"x_max":639,"o":"m 417 889 q 256 944 317 889 q 194 1090 194 1000 l 293 1090 q 326 1003 293 1036 q 415 969 360 969 q 506 1003 472 969 q 540 1090 540 1036 l 639 1090 q 578 944 639 1000 q 417 889 517 889 z "},"̊":{"ha":0,"x_min":250,"x_max":583,"o":"m 417 844 q 296 888 342 844 q 250 1003 250 932 q 296 1117 250 1074 q 417 1161 342 1161 q 538 1117 492 1161 q 583 1003 583 1074 q 538 888 583 932 q 417 844 492 844 m 417 918 q 477 941 454 918 q 500 1003 500 964 q 477 1065 500 1042 q 417 1089 454 1089 q 356 1065 379 1089 q 333 1003 333 1042 q 356 941 333 964 q 417 918 379 918 z "},"̃":{"ha":0,"x_min":194,"x_max":639,"o":"m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"̄":{"ha":0,"x_min":194,"x_max":639,"o":"m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"̉":{"ha":0,"x_min":292,"x_max":556,"o":"m 358 896 l 428 983 q 447 1028 447 1010 q 403 1056 447 1056 l 292 1056 l 292 1146 l 438 1146 q 523 1119 490 1146 q 556 1043 556 1092 q 532 968 556 999 l 476 896 l 358 896 z "},"̏":{"ha":0,"x_min":100,"x_max":629,"o":"m 381 896 l 260 896 l 100 1090 l 228 1090 l 381 896 m 629 896 l 508 896 l 349 1090 l 476 1090 l 629 896 z "},"̒":{"ha":0,"x_min":292,"x_max":576,"o":"m 576 1222 l 465 896 l 292 896 l 472 1222 l 576 1222 z "},"̛":{"ha":0,"x_min":-133,"x_max":56,"o":"m -133 674 l -133 764 l -97 764 q -61 776 -74 764 q -49 813 -49 789 l -49 917 l 56 917 l 56 806 q 15 710 56 746 q -90 674 -25 674 l -133 674 z "},"̣":{"ha":0,"x_min":318,"x_max":515,"o":"m 417 -296 q 344 -272 371 -296 q 318 -208 318 -249 q 344 -142 318 -167 q 417 -118 371 -118 q 489 -142 463 -118 q 515 -208 515 -167 q 489 -272 515 -249 q 417 -296 463 -296 z "},"̥":{"ha":0,"x_min":250,"x_max":583,"o":"m 417 -347 q 296 -309 342 -347 q 250 -208 250 -271 q 296 -108 250 -146 q 417 -69 342 -69 q 538 -108 492 -69 q 583 -208 583 -146 q 538 -309 583 -271 q 417 -347 492 -347 m 415 -276 q 477 -258 454 -276 q 500 -208 500 -239 q 478 -156 500 -172 q 415 -139 456 -139 q 356 -158 379 -139 q 333 -208 333 -176 q 356 -258 333 -239 q 415 -276 379 -276 z "},"̦":{"ha":0,"x_min":264,"x_max":542,"o":"m 264 -333 l 396 -132 l 542 -132 l 396 -333 l 264 -333 z "},"̧":{"ha":0,"x_min":285,"x_max":569,"o":"m 285 -282 l 285 -206 l 382 -206 q 431 -190 413 -206 q 450 -156 450 -174 q 412 -114 450 -132 q 304 -96 374 -96 l 353 36 l 432 36 l 403 -49 q 478 -67 439 -53 q 543 -106 517 -81 q 569 -167 569 -131 q 524 -248 569 -214 q 403 -282 478 -282 l 285 -282 z "},"̨":{"ha":0,"x_min":257,"x_max":535,"o":"m 426 -282 q 303 -245 350 -282 q 257 -153 257 -208 q 283 -72 257 -112 q 375 14 310 -32 l 479 14 l 464 1 q 396 -69 417 -37 q 375 -129 375 -100 q 396 -179 375 -160 q 451 -199 417 -199 l 535 -199 l 535 -282 l 426 -282 z "},"̶":{"ha":0,"x_min":-875,"x_max":42,"o":"m -875 403 l -875 500 l 42 500 l 42 403 l -875 403 z "},"̸":{"ha":0,"x_min":167,"x_max":667,"o":"m 167 -83 l 579 1083 l 667 1083 l 254 -83 l 167 -83 z "},"¨":{"ha":833,"x_min":174,"x_max":660,"o":"m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"˙":{"ha":833,"x_min":318,"x_max":515,"o":"m 417 901 q 344 925 371 901 q 318 989 318 949 q 344 1055 318 1031 q 417 1079 371 1079 q 489 1055 463 1079 q 515 989 515 1031 q 489 925 515 949 q 417 901 463 901 z "},"`":{"ha":833,"x_min":253,"x_max":544,"o":"m 413 896 l 253 1090 l 392 1090 l 544 896 l 413 896 z "},"´":{"ha":833,"x_min":294,"x_max":576,"o":"m 294 896 l 442 1090 l 576 1090 l 422 896 l 294 896 z "},"˝":{"ha":833,"x_min":204,"x_max":733,"o":"m 453 896 l 606 1090 l 733 1090 l 574 896 l 453 896 m 204 896 l 357 1090 l 485 1090 l 325 896 l 204 896 z "},"ˆ":{"ha":833,"x_min":165,"x_max":668,"o":"m 165 896 l 358 1090 l 474 1090 l 668 896 l 531 896 l 417 1004 l 306 896 l 165 896 z "},"ˇ":{"ha":833,"x_min":165,"x_max":668,"o":"m 360 896 l 165 1090 l 303 1090 l 417 982 l 528 1090 l 668 1090 l 475 896 l 360 896 z "},"˘":{"ha":833,"x_min":194,"x_max":639,"o":"m 417 889 q 256 944 317 889 q 194 1090 194 1000 l 293 1090 q 326 1003 293 1036 q 415 969 360 969 q 506 1003 472 969 q 540 1090 540 1036 l 639 1090 q 578 944 639 1000 q 417 889 517 889 z "},"˚":{"ha":833,"x_min":250,"x_max":583,"o":"m 417 844 q 296 888 342 844 q 250 1003 250 932 q 296 1117 250 1074 q 417 1161 342 1161 q 538 1117 492 1161 q 583 1003 583 1074 q 538 888 583 932 q 417 844 492 844 m 417 918 q 477 941 454 918 q 500 1003 500 964 q 477 1065 500 1042 q 417 1089 454 1089 q 356 1065 379 1089 q 333 1003 333 1042 q 356 941 333 964 q 417 918 379 918 z "},"˜":{"ha":833,"x_min":194,"x_max":639,"o":"m 514 903 q 446 917 472 903 q 401 951 419 932 q 367 985 383 971 q 326 1000 350 1000 q 297 988 308 1000 q 285 951 285 976 l 285 910 l 194 910 l 194 951 q 229 1049 194 1014 q 319 1083 264 1083 q 388 1069 361 1083 q 432 1035 414 1054 q 467 1001 450 1015 q 507 986 483 986 q 538 998 526 986 q 549 1035 549 1010 l 549 1076 l 639 1076 l 639 1035 q 605 938 639 972 q 514 903 571 903 z "},"¯":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 931 l 194 1035 l 639 1035 l 639 931 l 194 931 z "},"¸":{"ha":833,"x_min":285,"x_max":569,"o":"m 285 -282 l 285 -206 l 382 -206 q 431 -190 413 -206 q 450 -156 450 -174 q 412 -114 450 -132 q 304 -96 374 -96 l 353 36 l 432 36 l 403 -49 q 478 -67 439 -53 q 543 -106 517 -81 q 569 -167 569 -131 q 524 -248 569 -214 q 403 -282 478 -282 l 285 -282 z "},"˛":{"ha":833,"x_min":257,"x_max":535,"o":"m 426 -282 q 303 -245 350 -282 q 257 -153 257 -208 q 283 -72 257 -112 q 375 14 310 -32 l 479 14 l 464 1 q 396 -69 417 -37 q 375 -129 375 -100 q 396 -179 375 -160 q 451 -199 417 -199 l 535 -199 l 535 -282 l 426 -282 z "},"΄":{"ha":833,"x_min":294,"x_max":576,"o":"m 294 896 l 442 1090 l 576 1090 l 422 896 l 294 896 z "},"΅":{"ha":833,"x_min":174,"x_max":660,"o":"m 360 1068 l 468 1250 l 579 1250 l 457 1068 l 360 1068 m 571 901 q 506 925 531 901 q 482 989 482 949 q 506 1055 482 1031 q 571 1079 531 1079 q 635 1055 611 1079 q 660 989 660 1031 q 635 925 660 949 q 571 901 611 901 m 263 901 q 198 925 222 901 q 174 989 174 949 q 198 1055 174 1031 q 263 1079 222 1079 q 327 1055 303 1079 q 351 989 351 1031 q 327 925 351 949 q 263 901 303 901 z "},"":{"ha":833,"x_min":125,"x_max":833,"o":"m 125 -375 l 125 154 q 156 277 125 215 q 238 376 186 339 l 439 526 q 494 583 474 551 q 514 640 514 614 l 514 876 l 361 876 l 597 1113 l 833 876 l 681 876 l 681 626 q 653 523 681 575 q 581 438 625 471 l 365 278 q 311 215 331 251 q 292 139 292 179 l 292 -375 l 125 -375 m 125 506 l 125 1347 l 292 1347 l 292 629 l 125 506 z "},"":{"ha":833,"x_min":146,"x_max":688,"o":"m 229 -264 l 229 417 l 358 417 l 538 10 q 569 -78 554 -29 q 590 -160 583 -128 l 604 -160 q 600 -126 606 -160 q 589 -48 594 -93 q 583 35 583 -3 l 583 417 l 688 417 l 688 -264 l 560 -264 l 382 143 q 349 231 365 182 q 325 313 333 281 l 311 313 q 326 219 318 275 q 333 118 333 163 l 333 -264 l 229 -264 m 146 556 l 146 1236 l 257 1236 l 257 660 l 564 660 l 564 556 l 146 556 z "},"":{"ha":833,"x_min":69,"x_max":764,"o":"m 153 -111 q 94 -87 118 -111 q 69 -28 69 -62 l 69 575 q 94 634 69 610 q 153 658 118 658 l 167 658 l 167 979 q 200 1103 167 1050 q 290 1186 233 1157 q 417 1215 346 1215 q 547 1185 490 1215 q 635 1101 603 1154 q 667 979 667 1049 l 667 658 l 681 658 q 740 634 715 658 q 764 575 764 610 l 764 -28 q 740 -87 764 -62 q 681 -111 715 -111 l 153 -111 m 354 69 l 478 69 l 478 292 q 529 329 503 301 q 556 404 556 357 q 517 494 556 460 q 417 528 479 528 q 316 494 354 528 q 278 404 278 460 q 303 329 278 357 q 354 292 329 301 l 354 69 m 278 660 l 556 660 l 556 979 q 517 1080 556 1042 q 417 1118 479 1118 q 316 1080 354 1118 q 278 979 278 1042 l 278 660 z "},"":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 -375 l 0 1347 l 833 486 l 0 -375 z "},"":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 -375 l 669 483 l 8 1347 l 164 1347 l 833 486 l 164 -375 l 0 -375 z "},"":{"ha":833,"x_min":0,"x_max":833,"o":"m 833 -375 l 0 486 l 833 1347 l 833 -375 z "},"":{"ha":833,"x_min":0,"x_max":833,"o":"m 669 -375 l 0 486 l 669 1347 l 825 1347 l 164 483 l 833 -375 l 669 -375 z "}},"familyName":"JetBrains Mono","ascender":1417,"descender":-417,"underlinePosition":-215,"underlineThickness":69,"boundingBox":{"yMin":-417,"xMin":-2410,"yMax":1417,"xMax":1625},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2020 The JetBrains Mono Project Authors (https://github.com/JetBrains/JetBrainsMono)","fontFamily":"JetBrains Mono","fontSubfamily":"Regular","uniqueID":"2.211;JB;JetBrainsMono-Regular","fullName":"JetBrains Mono Regular","version":"Version 2.211","postScriptName":"JetBrainsMono-Regular","trademark":"JetBrains Mono is a trademark of JetBrains s.r.o.","manufacturer":"JetBrains","designer":"Philipp Nurullin, Konstantin Bulenkov","manufacturerURL":"https://www.jetbrains.com","designerURL":"https://www.jetbrains.com","licence":"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL","licenceURL":"https://scripts.sil.org/OFL","unknown1":"JetBrainsMonoRoman","unknown2":"Weight","unknown3":"Regular","unknown4":"Italic","unknown5":"Roman"},"cssFontWeight":"normal","cssFontStyle":"normal"}'),Ss=JSON.parse('{"glyphs":{"0":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 347 174 m 521 347 l 868 347 l 868 1042 l 694 1042 l 694 1215 l 347 1215 l 347 521 l 521 521 l 521 347 z "},"1":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"2":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 694 868 l 694 1042 l 868 1042 l 868 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 521 521 l 521 347 l 1215 347 l 1215 174 l 0 174 z "},"3":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 347 694 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"4":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 174 l 694 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 694 l 1215 694 l 1215 521 l 1042 521 l 1042 174 l 694 174 m 347 694 l 694 694 l 694 1042 l 521 1042 l 521 868 l 347 868 l 347 694 z "},"5":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 868 l 0 868 l 0 1389 l 1042 1389 l 1042 1215 l 347 1215 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"6":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"7":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 694 l 521 694 l 521 868 l 694 868 l 694 1042 l 868 1042 l 868 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 694 694 l 694 174 l 347 174 z "},"8":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 868 868 l 868 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 868 l 868 868 l 868 1215 l 347 1215 l 347 1042 l 521 1042 l 521 868 m 174 347 l 868 347 l 868 521 l 521 521 l 521 694 l 174 694 l 174 347 z "},"9":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 694 347 l 694 521 l 868 521 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 z "},"\\u0000":{"ha":0,"x_min":0,"x_max":0,"o":""},"\\r":{"ha":1389,"x_min":0,"x_max":0,"o":""}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""},"A":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 z "},"Á":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 m 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 694 z "},"Ă":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 1215 694 m 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 694 z "},"Â":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"Ä":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"À":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 m 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 694 z "},"Ā":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"Ą":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 694 l 347 694 l 347 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 m 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 l 868 868 l 868 1042 m 694 347 l 868 347 l 868 174 l 694 174 l 694 347 m 868 0 l 868 174 l 1215 174 l 1215 0 l 868 0 z "},"Å":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"Ã":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 1215 694 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 347 1215 l 347 1042 l 174 1042 l 174 1215 l 347 1215 m 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 694 z "},"Æ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 347 l 1215 347 l 1215 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 m 347 694 l 521 694 l 521 1042 l 347 1042 l 347 694 z "},"B":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"C":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 347 1042 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"Ć":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 694 l 868 694 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"Č":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"Ç":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 l 521 694 l 521 521 l 868 521 l 868 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 694 174 l 694 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"Ĉ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"Ċ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"D":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 0 174 m 347 347 l 694 347 l 694 521 l 868 521 l 868 1042 l 694 1042 l 694 1215 l 347 1215 l 347 347 z "},"Ð":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 m 521 347 l 694 347 l 694 521 l 868 521 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 868 l 694 868 l 694 694 l 521 694 l 521 347 z "},"Ď":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 0 174 m 347 347 l 694 347 l 694 521 l 868 521 l 868 694 l 694 694 l 694 868 l 347 868 l 347 347 z "},"Đ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 m 521 347 l 694 347 l 694 521 l 868 521 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 868 l 694 868 l 694 694 l 521 694 l 521 347 z "},"E":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 347 694 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"É":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ĕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 l 0 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"Ě":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ê":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"Ë":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ė":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 0 174 l 0 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"È":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ē":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ę":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 347 1215 l 347 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1215 694 l 1215 521 l 694 521 l 694 347 l 521 347 l 521 521 l 0 521 l 0 1389 l 1215 1389 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"F":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 347 694 l 347 174 l 0 174 z "},"G":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 1215 l 521 1215 l 521 1042 l 347 1042 l 347 521 l 521 521 l 521 347 l 868 347 l 868 694 l 694 694 l 694 868 l 1215 868 l 1215 174 l 347 174 z "},"Ğ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 868 l 347 868 l 347 347 l 868 347 l 868 521 l 694 521 l 694 694 l 1215 694 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"Ĝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 868 347 l 868 521 l 694 521 l 694 694 l 1215 694 l 1215 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"Ģ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 0 l 347 174 l 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 l 521 694 l 521 521 l 868 521 l 868 694 l 694 694 l 694 868 l 1215 868 l 1215 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 z "},"Ġ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 868 347 l 868 521 l 694 521 l 694 694 l 1215 694 l 1215 174 l 174 174 z "},"H":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 z "},"Ħ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 m 347 868 l 868 868 l 868 1042 l 347 1042 l 347 868 z "},"Ĥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1215 1215 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 z "},"I":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ĳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 521 l 0 694 l 174 694 l 174 1215 l 0 1215 l 0 1389 l 694 1389 l 694 1215 l 521 1215 l 521 694 l 694 694 l 694 521 l 0 521 m 174 174 l 174 347 l 868 347 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Í":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ĭ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"Î":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ï":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"İ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ì":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 1389 l 694 1215 l 521 1215 l 521 1389 l 694 1389 m 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"Ī":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 174 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Į":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 868 1215 l 868 694 l 1215 694 l 1215 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 521 694 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"Ĩ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 694 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1215 l 347 1215 l 347 1042 l 694 1042 l 694 1215 z "},"J":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ĵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 1215 l 694 1215 l 694 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"K":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 694 868 l 694 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Ķ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 347 174 l 347 347 l 0 347 l 0 1389 l 347 1389 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 694 347 l 694 174 l 521 174 l 521 0 l 174 0 m 347 347 l 694 347 l 694 521 l 521 521 l 521 694 l 347 694 l 347 347 z "},"L":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 521 1389 l 521 347 l 1215 347 l 1215 174 l 174 174 z "},"Ĺ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 347 l 1215 174 l 174 174 l 174 1215 l 694 1215 l 694 1042 l 521 1042 l 521 347 l 1215 347 z "},"Ľ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 521 1389 l 521 347 l 1215 347 l 1215 174 l 174 174 m 868 868 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 z "},"Ļ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 0 l 347 174 l 521 174 l 521 347 l 174 347 l 174 1389 l 521 1389 l 521 521 l 1215 521 l 1215 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 z "},"Ŀ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 521 1389 l 521 347 l 1215 347 l 1215 174 l 174 174 m 694 694 l 694 1042 l 1042 1042 l 1042 694 l 694 694 z "},"Ł":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1389 l 521 1389 l 521 1042 l 694 1042 l 694 868 l 521 868 l 521 347 l 1215 347 l 1215 174 l 174 174 z "},"M":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 868 l 694 868 l 694 521 l 521 521 l 521 868 l 347 868 l 347 174 l 0 174 z "},"N":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 868 l 347 868 l 347 174 l 0 174 z "},"Ń":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 1042 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 521 1042 l 521 868 l 694 868 l 694 694 l 868 694 l 868 1042 l 1215 1042 z "},"Ň":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 521 1042 l 521 868 l 694 868 l 694 694 l 868 694 l 868 1042 l 1215 1042 z "},"Ņ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 347 l 868 347 l 868 521 l 694 521 l 694 694 l 521 694 l 521 868 l 347 868 l 347 347 l 0 347 l 0 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 m 521 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 l 347 174 l 521 174 l 521 347 z "},"Ŋ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 0 l 347 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 868 l 347 868 l 347 347 l 0 347 l 0 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 174 l 1042 174 l 1042 0 l 347 0 z "},"Ñ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 521 1042 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1042 l 521 1042 l 521 868 l 694 868 l 694 694 l 868 694 l 868 1042 l 1215 1042 z "},"O":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 1215 l 347 1215 l 347 347 z "},"Ó":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"Ŏ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"Ô":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Ö":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Ò":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"Ő":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"Ō":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Ø":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 868 1042 l 868 1215 l 347 1215 l 347 694 l 521 694 l 521 521 l 347 521 l 347 347 m 521 694 l 521 868 l 694 868 l 694 694 l 521 694 z "},"Õ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1042 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Œ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 347 l 1215 347 l 1215 174 l 174 174 m 347 347 l 521 347 l 521 1215 l 347 1215 l 347 347 z "},"P":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 694 l 1042 694 l 1042 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1215 l 347 1215 l 347 694 z "},"Þ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 347 347 l 347 174 l 0 174 m 347 521 l 868 521 l 868 1042 l 347 1042 l 347 521 z "},"Q":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 1215 l 347 1215 l 347 347 l 694 347 l 694 521 l 521 521 l 521 694 l 868 694 l 868 1215 m 1042 174 l 1042 347 l 1215 347 l 1215 174 l 1042 174 z "},"R":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 m 347 694 l 694 694 l 694 868 l 868 868 l 868 1215 l 347 1215 l 347 694 z "},"Ŕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 694 868 l 347 868 l 347 694 l 694 694 l 694 868 z "},"Ř":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 694 868 l 347 868 l 347 694 l 694 694 l 694 868 z "},"Ŗ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 0 l 347 174 l 521 174 l 521 347 l 694 347 l 694 521 l 521 521 l 521 694 l 347 694 l 347 347 l 0 347 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 m 347 868 l 694 868 l 694 1042 l 868 1042 l 868 1215 l 347 1215 l 347 868 z "},"S":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ś":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 z "},"Š":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 z "},"Ş":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 868 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 694 174 l 694 347 l 174 347 l 174 521 l 0 521 l 0 694 l 347 694 l 347 521 l 868 521 l 868 868 l 174 868 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 347 1215 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"Ŝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"T":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 521 174 z "},"Ŧ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 521 l 347 521 l 347 694 l 521 694 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 868 694 l 868 174 l 521 174 z "},"Ť":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"Ț":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 694 174 l 694 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"U":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1389 l 347 1389 l 347 347 l 868 347 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ú":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"Ŭ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 868 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"Û":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 m 174 174 l 174 347 l 0 347 l 0 868 l 347 868 l 347 347 l 868 347 l 868 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ü":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ù":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 521 1042 l 521 1215 l 694 1215 l 694 1042 l 521 1042 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"Ű":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 347 l 868 347 l 868 1042 l 1215 1042 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"Ū":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ų":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 694 l 1042 694 l 1042 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 0 694 l 0 1389 l 347 1389 l 347 694 l 868 694 l 868 1389 l 1215 1389 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"Ů":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 868 l 1042 868 l 1042 1042 l 868 1042 l 868 868 l 347 868 l 347 1042 l 174 1042 l 174 868 l 347 868 l 347 347 z "},"Ũ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 521 1042 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"V":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1389 l 1215 1389 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 347 l 694 347 l 694 174 l 521 174 z "},"W":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1389 l 347 1389 l 347 694 l 521 694 l 521 1389 l 694 1389 l 694 694 l 868 694 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 868 174 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 174 174 z "},"Ŵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 174 l 0 174 m 347 694 l 521 694 l 521 868 l 694 868 l 694 694 l 868 694 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 z "},"X":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1389 l 347 1389 l 347 1042 l 521 1042 l 521 868 l 694 868 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Y":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1389 l 521 1389 l 521 868 l 868 868 l 868 1389 l 1215 1389 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 174 l 521 174 z "},"Ý":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 l 521 521 l 347 521 l 347 694 l 174 694 l 174 1042 l 521 1042 l 521 694 l 868 694 l 868 1042 l 1215 1042 z "},"Ŷ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 521 l 347 521 l 347 694 l 174 694 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 m 521 694 l 868 694 l 868 1215 l 521 1215 l 521 694 z "},"Ÿ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 521 174 l 521 521 l 347 521 l 347 694 l 174 694 l 174 1042 l 521 1042 l 521 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 z "},"Z":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 0 1215 l 0 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 694 694 l 694 521 l 521 521 l 521 347 l 1215 347 l 1215 174 l 0 174 z "},"Ź":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ž":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 z "},"Ż":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 z "},"a":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"á":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 521 l 347 521 l 347 347 l 868 347 l 868 521 z "},"ă":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 521 l 347 521 l 347 347 l 868 347 l 868 521 z "},"â":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ä":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"à":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 868 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 521 l 347 521 l 347 347 l 868 347 l 868 521 z "},"ā":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ą":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 868 1042 l 868 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 868 l 347 868 l 347 694 l 868 694 l 868 868 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"å":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ã":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1042 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"æ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 521 694 l 521 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 694 521 l 694 347 l 1042 347 l 1042 174 l 174 174 m 694 694 l 868 694 l 868 868 l 694 868 l 694 694 m 347 347 l 521 347 l 521 521 l 347 521 l 347 347 z "},"b":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1389 l 347 1389 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"c":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 1215 347 l 1215 174 l 174 174 z "},"ć":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 347 868 l 347 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"č":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 1215 347 l 1215 174 l 174 174 z "},"ç":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 868 l 347 868 l 347 521 l 1215 521 l 1215 347 l 868 347 l 868 174 l 694 174 l 694 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1215 1042 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"ĉ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 1215 347 l 1215 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"ċ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 347 868 l 347 347 l 1215 347 l 1215 174 l 174 174 z "},"d":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ð":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 521 868 l 521 1042 l 174 1042 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 868 l 1042 868 l 1042 694 l 1215 694 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 174 1042 l 174 868 l 0 868 l 0 1042 l 174 1042 m 868 694 l 347 694 l 347 347 l 868 347 l 868 694 z "},"ď":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 174 l 174 174 m 1042 868 l 1042 1389 l 1389 1389 l 1389 1042 l 1215 1042 l 1215 868 l 1042 868 m 347 347 l 521 347 l 521 868 l 347 868 l 347 347 z "},"đ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 1042 1042 l 1042 174 l 174 174 m 347 347 l 694 347 l 694 868 l 347 868 l 347 347 z "},"e":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"é":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 694 l 868 694 l 868 868 z "},"ĕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 694 l 868 694 l 868 868 z "},"ě":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ê":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ë":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ė":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"è":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 694 l 868 694 l 868 868 z "},"ē":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ę":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 0 694 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 1215 l 347 1215 l 347 1042 l 868 1042 l 868 1215 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"f":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 z "},"g":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"ğ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1215 1042 m 868 868 l 347 868 l 347 521 l 868 521 l 868 868 z "},"ĝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"ģ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 l 694 1215 l 694 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"ġ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"h":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 z "},"ħ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 1042 l 521 1042 l 521 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 694 l 521 694 l 521 174 l 174 174 z "},"ĥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 z "},"i":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ı":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"í":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 868 868 l 868 347 l 1215 347 z "},"ĭ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 1215 l 174 1215 l 174 1389 l 347 1389 l 347 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 347 1042 l 347 1215 l 868 1215 l 868 1042 l 347 1042 m 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 868 868 l 868 347 l 1215 347 z "},"î":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 m 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ï":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ì":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 521 1042 l 521 1215 l 694 1215 l 694 1042 l 521 1042 m 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 868 868 l 868 347 l 1215 347 z "},"ĳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 174 347 l 174 868 l 0 868 l 0 1042 l 521 1042 l 521 347 l 174 347 m 347 0 l 347 174 l 868 174 l 868 868 l 694 868 l 694 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 347 0 z "},"ī":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"į":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 m 1215 694 l 1215 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 521 694 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 694 l 1215 694 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"ĩ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 1389 l 694 1215 l 347 1215 l 347 1389 l 694 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 174 1215 l 347 1215 l 347 1042 l 174 1042 l 174 1215 m 694 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 m 868 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 868 868 l 868 347 z "},"j":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 0 l 174 174 l 694 174 l 694 868 l 521 868 l 521 1042 l 1042 1042 l 1042 174 l 868 174 l 868 0 l 174 0 z "},"ĵ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 1042 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 694 1215 l 694 1042 l 347 1042 m 174 0 l 174 174 l 694 174 l 694 694 l 521 694 l 521 868 l 1042 868 l 1042 174 l 868 174 l 868 0 l 174 0 z "},"k":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 521 l 347 521 l 347 174 l 0 174 z "},"ķ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 347 l 0 1389 l 347 1389 l 347 868 l 694 868 l 694 1042 l 868 1042 l 868 1215 l 1215 1215 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 868 347 l 868 521 l 694 521 l 694 694 l 347 694 l 347 347 l 0 347 m 174 0 l 174 174 l 347 174 l 347 347 l 694 347 l 694 174 l 521 174 l 521 0 l 174 0 z "},"ĸ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 521 l 347 521 l 347 174 l 0 174 z "},"l":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 347 1215 l 347 1389 l 868 1389 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ĺ":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 1042 347 l 1042 174 l 0 174 l 0 347 l 347 347 l 347 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 347 l 1042 347 z "},"ľ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 347 347 l 347 1215 l 174 1215 l 174 1389 l 694 1389 l 694 347 l 1042 347 l 1042 174 l 0 174 m 868 868 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 z "},"ļ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 0 l 347 174 l 521 174 l 521 347 l 174 347 l 174 521 l 521 521 l 521 1215 l 347 1215 l 347 1389 l 868 1389 l 868 521 l 1215 521 l 1215 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 z "},"ŀ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 347 347 l 347 1215 l 174 1215 l 174 1389 l 694 1389 l 694 347 l 1042 347 l 1042 174 l 0 174 m 868 694 l 868 1042 l 1215 1042 l 1215 694 l 868 694 z "},"ł":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1042 l 1042 1042 l 1042 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"m":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 694 868 l 694 174 l 347 174 l 347 868 l 174 868 l 174 174 l 0 174 z "},"n":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 z "},"ń":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"ň":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 z "},"ņ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 347 l 868 347 l 868 1042 l 347 1042 l 347 347 l 0 347 l 0 1215 l 1042 1215 l 1042 1042 l 1215 1042 m 521 347 l 868 347 l 868 174 l 694 174 l 694 0 l 347 0 l 347 174 l 521 174 l 521 347 z "},"ŋ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 0 l 347 174 l 868 174 l 868 1042 l 347 1042 l 347 347 l 0 347 l 0 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 347 0 z "},"ñ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 m 347 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1042 z "},"o":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ó":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"ŏ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"ô":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ö":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ò":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"ő":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"ō":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ø":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 347 l 868 347 l 868 694 l 694 694 l 694 868 l 347 868 l 347 521 l 521 521 l 521 347 m 521 521 l 521 694 l 694 694 l 694 521 l 521 521 z "},"õ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1042 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"œ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 694 521 l 694 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 521 347 l 521 868 l 347 868 l 347 347 m 694 694 l 868 694 l 868 868 l 694 868 l 694 694 z "},"p":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 1042 521 l 1042 347 l 347 347 l 347 0 l 0 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"þ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 1389 l 347 1389 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 1042 521 l 1042 347 l 347 347 l 347 0 l 0 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"q":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 0 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 0 l 868 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"r":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 868 l 694 868 l 694 694 l 521 694 l 521 174 l 174 174 l 174 1042 l 521 1042 l 521 868 m 1215 1042 l 1215 868 l 694 868 l 694 1042 l 1215 1042 z "},"ŕ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 174 l 174 174 l 174 1042 l 521 1042 l 521 868 m 1215 1042 l 1215 868 l 694 868 l 694 1042 l 1215 1042 z "},"ř":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 694 868 l 694 694 l 521 694 l 521 174 l 174 174 m 521 868 l 694 868 l 694 1042 l 521 1042 l 521 868 z "},"ŗ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1042 l 694 1042 l 694 868 l 521 868 l 521 347 l 694 347 l 694 174 l 521 174 l 521 0 l 174 0 l 174 174 l 347 174 l 347 347 l 174 347 l 174 1215 l 521 1215 l 521 1042 m 1215 1215 l 1215 1042 l 694 1042 l 694 1215 l 1215 1215 z "},"s":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 z "},"ś":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 z "},"š":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 z "},"ş":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 694 174 l 694 347 l 0 347 l 0 521 l 868 521 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 174 1042 l 174 1215 l 1042 1215 l 1042 1042 l 347 1042 l 347 868 l 1042 868 l 1042 694 l 1215 694 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"ŝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"ß":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1215 l 521 1215 l 521 521 l 694 521 l 694 347 l 521 347 l 521 174 l 174 174 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 z "},"ſ":{"ha":1389,"x_min":521,"x_max":1215,"o":"m 521 174 l 521 1215 l 694 1215 l 694 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 521 174 z "},"t":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 z "},"ŧ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 521 521 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 z "},"ť":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 868 l 1215 694 l 868 694 l 868 174 l 521 174 l 521 694 l 174 694 l 174 868 l 521 868 l 521 1215 l 868 1215 l 868 868 l 1215 868 z "},"ț":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1042 l 1215 868 l 868 868 l 868 174 l 694 174 l 694 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"u":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 174 l 174 174 z "},"ú":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"ŭ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 868 1042 l 347 1042 l 347 1215 l 868 1215 l 868 1042 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"û":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 m 174 174 l 174 347 l 0 347 l 0 868 l 347 868 l 347 347 l 868 347 l 868 868 l 1215 868 l 1215 174 l 174 174 z "},"ü":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 174 l 174 174 z "},"ù":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 521 1042 l 521 1215 l 694 1215 l 694 1042 l 521 1042 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"ű":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 347 l 868 347 l 868 1042 l 1215 1042 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"ū":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 174 l 174 174 z "},"ų":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 0 694 l 0 1389 l 347 1389 l 347 694 l 868 694 l 868 1389 l 1215 1389 m 347 347 l 521 347 l 521 174 l 347 174 l 347 347 m 521 0 l 521 174 l 868 174 l 868 0 l 521 0 z "},"ů":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 174 174 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 868 347 l 868 868 l 1042 868 l 1042 1042 l 868 1042 l 868 868 l 347 868 l 347 1042 l 174 1042 l 174 868 l 347 868 l 347 347 z "},"ũ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 521 1042 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 347 l 868 347 l 868 1042 l 1215 1042 z "},"v":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 1042 l 521 1042 l 521 521 l 868 521 l 868 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 521 174 z "},"w":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 m 694 1042 l 694 347 l 521 347 l 521 1042 l 694 1042 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 1042 l 1215 1042 z "},"ŵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 m 347 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 347 868 l 347 347 m 694 868 l 694 347 l 521 347 l 521 868 l 694 868 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 868 l 1215 868 z "},"x":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 z "},"y":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ý":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 z "},"ŷ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 347 868 l 347 521 l 868 521 l 868 868 l 1215 868 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ÿ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"z":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 z "},"ź":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"ž":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 z "},"ż":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 1215 347 l 1215 174 l 0 174 z "},"ﬁ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 868 l 0 868 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 521 1215 l 521 1042 l 1215 1042 l 1215 174 l 868 174 l 868 868 l 521 868 l 521 174 l 174 174 z "},"ﬂ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 868 l 0 868 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 174 l 868 174 l 868 868 l 521 868 l 521 174 l 174 174 m 521 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 z "},"ª":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 694 l 347 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 694 l 347 694 m 521 868 l 694 868 l 694 1042 l 521 1042 l 521 868 z "},"º":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 694 l 347 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 868 l 868 868 l 868 694 l 347 694 m 521 868 l 694 868 l 694 1215 l 521 1215 l 521 868 z "},"А":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 z "},"Б":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"В":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"Г":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 521 1215 l 521 174 l 174 174 z "},"Ѓ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 521 868 l 521 174 l 174 174 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ґ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1389 l 1215 1389 l 1215 1042 l 521 1042 l 521 174 l 174 174 l 174 1215 l 868 1215 l 868 1389 z "},"Д":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 0 0 l 0 347 l 174 347 l 174 694 l 347 694 l 347 1389 l 1215 1389 l 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 347 174 l 347 0 l 0 0 m 521 347 l 868 347 l 868 1215 l 521 1215 l 521 347 z "},"Е":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 347 694 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ѐ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 l 0 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"Ё":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ж":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1389 l 347 1389 m 694 868 l 868 868 l 868 694 l 694 694 l 694 174 l 521 174 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1389 l 694 1389 l 694 868 m 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 1389 l 1215 1389 m 174 694 l 347 694 l 347 174 l 0 174 l 0 521 l 174 521 l 174 694 m 868 174 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 z "},"З":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 347 694 l 347 868 l 868 868 l 868 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"И":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 694 l 521 694 l 521 868 l 694 868 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 z "},"Й":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 1042 l 347 1042 l 347 521 l 521 521 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 0 174 z "},"Ѝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 521 1042 l 521 1215 l 694 1215 l 694 1042 l 521 1042 m 1215 1042 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 0 174 l 0 1042 l 347 1042 l 347 521 l 521 521 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 z "},"К":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 z "},"Ќ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 m 1215 1042 l 1215 868 l 868 868 l 868 1042 l 1215 1042 z "},"Л":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 1389 l 1215 1389 l 1215 174 l 868 174 l 868 1215 l 521 1215 l 521 347 l 347 347 l 347 174 l 0 174 z "},"М":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 868 l 694 868 l 694 521 l 521 521 l 521 868 l 347 868 l 347 174 l 0 174 z "},"Н":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 z "},"О":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 1215 l 347 1215 l 347 347 z "},"П":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 174 l 868 174 l 868 1215 l 347 1215 l 347 174 l 0 174 z "},"Р":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 694 l 1042 694 l 1042 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1215 l 347 1215 l 347 694 z "},"С":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 347 1042 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"Т":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 521 174 z "},"У":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ў":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"Ф":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 694 347 l 694 174 l 521 174 m 347 521 l 521 521 l 521 1042 l 347 1042 l 347 521 m 694 521 l 868 521 l 868 1042 l 694 1042 l 694 521 z "},"Х":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1389 l 347 1389 l 347 1042 l 521 1042 l 521 868 l 694 868 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Ч":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 174 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 z "},"Ц":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 0 l 868 174 l 0 174 l 0 1389 l 347 1389 l 347 347 l 694 347 l 694 1389 l 1042 1389 l 1042 347 l 1215 347 l 1215 0 l 868 0 z "},"Ш":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 347 l 521 347 l 521 1389 l 694 1389 l 694 347 l 868 347 l 868 1389 l 1215 1389 l 1215 174 l 0 174 z "},"Щ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1042 0 l 1042 174 l 0 174 l 0 1389 l 347 1389 l 347 347 l 521 347 l 521 1389 l 694 1389 l 694 347 l 868 347 l 868 1389 l 1215 1389 l 1215 347 l 1389 347 l 1389 0 l 1042 0 z "},"Џ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 0 l 521 174 l 0 174 l 0 1389 l 347 1389 l 347 347 l 868 347 l 868 1389 l 1215 1389 l 1215 174 l 694 174 l 694 0 l 521 0 z "},"Ь":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Ъ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 1215 l 0 1215 l 0 1389 l 521 1389 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 347 l 868 347 l 868 868 l 521 868 l 521 347 z "},"Ы":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1042 l 694 1042 l 694 174 l 0 174 m 868 174 l 868 1389 l 1215 1389 l 1215 174 l 868 174 m 347 347 l 521 347 l 521 868 l 347 868 l 347 347 z "},"Љ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 174 l 521 174 l 521 1215 l 347 1215 l 347 174 l 0 174 m 868 347 l 1042 347 l 1042 868 l 868 868 l 868 347 z "},"Њ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 174 l 521 174 l 521 694 l 347 694 l 347 174 l 0 174 m 868 347 l 1042 347 l 1042 868 l 868 868 l 868 347 z "},"Ѕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Є":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 l 1042 868 l 1042 694 l 347 694 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"Э":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 694 347 l 694 521 l 868 521 l 868 694 l 174 694 l 174 868 l 868 868 l 868 1042 l 694 1042 l 694 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 z "},"І":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ї":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ј":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ћ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 1215 l 0 1215 l 0 1389 l 868 1389 l 868 1215 l 521 1215 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 868 174 l 868 868 l 521 868 l 521 174 l 174 174 z "},"Ю":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 174 1389 l 174 868 l 347 868 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 521 174 l 521 347 l 347 347 l 347 694 l 174 694 l 174 174 l 0 174 m 694 347 l 868 347 l 868 1215 l 694 1215 l 694 347 z "},"Я":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 0 694 l 0 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 174 l 868 174 l 868 521 l 521 521 l 521 174 l 0 174 m 521 694 l 868 694 l 868 1215 l 347 1215 l 347 868 l 521 868 l 521 694 z "},"Ђ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 0 l 694 174 l 868 174 l 868 868 l 521 868 l 521 174 l 174 174 l 174 1215 l 0 1215 l 0 1389 l 868 1389 l 868 1215 l 521 1215 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 1042 174 l 1042 0 l 694 0 z "},"Ѣ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 1042 l 521 1042 l 521 868 l 1042 868 l 1042 694 l 1215 694 m 868 694 l 521 694 l 521 347 l 868 347 l 868 694 z "},"Ѫ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1389 l 1215 1389 m 174 1042 l 347 1042 l 347 868 l 174 868 l 174 1042 m 868 868 l 868 1042 l 1042 1042 l 1042 868 l 868 868 m 347 868 l 868 868 l 868 694 l 694 694 l 694 174 l 521 174 l 521 694 l 347 694 l 347 868 m 174 694 l 347 694 l 347 174 l 0 174 l 0 521 l 174 521 l 174 694 m 868 174 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 z "},"Ѳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 1215 l 347 1215 l 347 347 m 174 694 l 1042 694 l 1042 868 l 174 868 l 174 694 z "},"Ѵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 1389 l 347 1389 l 347 694 l 521 694 l 521 521 l 694 521 l 694 694 l 868 694 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 521 l 868 521 l 868 347 l 694 347 l 694 174 l 521 174 z "},"Ғ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 521 1215 l 521 868 l 868 868 l 868 694 l 521 694 l 521 174 l 174 174 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1389 l 1215 1389 z "},"Ҕ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 521 1215 l 521 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 1042 174 l 1042 0 l 694 0 l 694 174 l 868 174 l 868 694 l 521 694 l 521 174 l 174 174 l 174 1389 l 1215 1389 z "},"Җ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 347 1389 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1389 l 347 1389 m 868 868 l 868 694 l 694 694 l 694 174 l 521 174 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1389 l 694 1389 l 694 868 l 868 868 m 1042 868 l 868 868 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 m 174 694 l 347 694 l 347 174 l 0 174 l 0 521 l 174 521 l 174 694 m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 z "},"Ҙ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 0 l 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 694 l 347 694 l 347 868 l 868 868 l 868 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 z "},"Қ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 347 l 1215 347 l 1215 0 l 868 0 l 868 347 l 694 347 l 694 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 z "},"Ҝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 868 l 868 868 l 868 694 l 694 694 l 694 521 l 521 521 l 521 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 868 m 1042 1215 l 1042 868 l 868 868 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 m 1215 174 l 868 174 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 z "},"Ҡ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1042 l 868 694 l 1042 694 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 694 l 521 694 l 521 174 l 174 174 l 174 1215 l 0 1215 l 0 1389 l 521 1389 l 521 868 l 694 868 l 694 1042 l 868 1042 m 1042 1215 l 1042 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 z "},"Ң":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 347 z "},"Ԥ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 1215 l 347 1215 l 347 174 l 0 174 l 0 1389 l 1215 1389 l 1215 347 z "},"Ҫ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 347 1042 l 347 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 868 174 l 868 0 l 521 0 l 521 174 l 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 z "},"Ҭ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 868 1215 l 868 347 l 1042 347 l 1042 0 l 694 0 l 694 174 l 521 174 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 z "},"Ү":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1389 l 521 1389 l 521 868 l 868 868 l 868 1389 l 1215 1389 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 174 l 521 174 z "},"Ұ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 521 174 l 521 347 l 347 347 l 347 521 l 521 521 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1389 l 521 1389 l 521 868 l 868 868 l 868 1389 l 1215 1389 z "},"Ҷ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 347 z "},"Ҹ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 521 l 521 521 l 521 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 868 l 868 868 l 868 1389 l 1215 1389 z "},"Һ":{"ha":1389,"x_min":174,"x_max":1389,"o":"m 174 174 l 174 1389 l 521 1389 l 521 868 l 1215 868 l 1215 694 l 1389 694 l 1389 174 l 1042 174 l 1042 694 l 521 694 l 521 174 l 174 174 z "},"Ӏ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ӂ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Ӌ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 347 z "},"Ӑ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"Ӓ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 347 l 347 347 l 347 174 l 0 174 m 347 521 l 868 521 l 868 694 l 694 694 l 694 868 l 521 868 l 521 694 l 347 694 l 347 521 z "},"Ӗ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ә":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 868 868 l 868 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 347 l 868 694 l 347 694 l 347 347 l 868 347 z "},"Ӝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Ӟ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 l 868 868 l 347 868 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ӣ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 1042 l 347 1042 l 347 521 l 521 521 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 0 174 z "},"Ӥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 1042 l 347 1042 l 347 521 l 521 521 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 0 174 z "},"Ӧ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"Ө":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 1215 l 347 1215 l 347 347 m 174 694 l 1042 694 l 1042 868 l 174 868 l 174 694 z "},"Ӯ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ӱ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"Ӳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 868 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 694 l 868 694 l 868 1042 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"Ӵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 868 174 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 174 l 868 174 z "},"Ӷ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 521 1215 l 521 347 l 694 347 l 694 0 l 347 0 l 347 174 l 174 174 l 174 1389 l 1215 1389 z "},"Ӹ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 1042 l 347 1042 l 347 868 l 694 868 l 694 174 l 0 174 m 868 174 l 868 1042 l 1215 1042 l 1215 174 l 868 174 m 347 347 l 521 347 l 521 694 l 347 694 l 347 347 z "},"Ԛ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 1215 l 347 1215 l 347 347 l 694 347 l 694 521 l 521 521 l 521 694 l 868 694 l 868 1215 m 1042 174 l 1042 347 l 1215 347 l 1215 174 l 1042 174 z "},"Ԝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1389 l 347 1389 l 347 694 l 521 694 l 521 1389 l 694 1389 l 694 694 l 868 694 l 868 1389 l 1215 1389 l 1215 347 l 1042 347 l 1042 174 l 868 174 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 174 174 z "},"а":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"б":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 347 1215 l 347 868 l 521 868 l 521 694 l 347 694 l 347 347 l 868 347 l 868 868 l 521 868 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1215 1389 z "},"в":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"г":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 521 868 l 521 174 l 174 174 z "},"ѓ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 521 868 l 521 174 l 174 174 l 174 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1042 l 1215 1042 z "},"ґ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1215 l 1215 1215 l 1215 868 l 521 868 l 521 174 l 174 174 l 174 1042 l 868 1042 l 868 1215 z "},"д":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 347 174 l 347 0 l 0 0 l 0 347 l 174 347 l 174 521 l 347 521 l 347 1042 l 1215 1042 l 1215 347 m 521 347 l 868 347 l 868 868 l 521 868 l 521 347 z "},"е":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ѐ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 521 1215 l 347 1215 l 347 1389 l 521 1389 m 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 694 l 868 694 l 868 868 z "},"ё":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ж":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 z "},"з":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 l 868 868 l 347 868 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"и":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 521 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 521 l 521 521 l 521 694 z "},"й":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 1389 l 1042 1215 l 174 1215 l 174 1389 l 1042 1389 m 347 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 521 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 521 l 521 521 l 521 694 z "},"ѝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 521 1042 l 521 1215 l 694 1215 l 694 1042 l 521 1042 m 347 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 521 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 521 l 521 521 l 521 694 z "},"к":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 m 1215 1042 l 1215 868 l 868 868 l 868 1042 l 1215 1042 z "},"ќ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 m 1215 1042 l 1215 868 l 868 868 l 868 1042 l 1215 1042 z "},"л":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 174 l 868 174 l 868 868 l 521 868 l 521 347 l 347 347 l 347 174 l 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 1042 l 1215 1042 z "},"м":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 868 l 521 694 l 347 694 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 868 l 521 868 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 347 l 521 347 l 521 694 z "},"н":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 z "},"о":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"п":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 1215 1042 l 1215 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 z "},"р":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 0 l 0 0 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 694 l 347 694 l 347 347 l 868 347 l 868 868 l 521 868 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"с":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 868 l 347 868 l 347 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"т":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 z "},"у":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ў":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ф":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 0 l 521 0 m 347 347 l 521 347 l 521 868 l 347 868 l 347 347 m 694 347 l 868 347 l 868 868 l 694 868 l 694 347 z "},"х":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 z "},"ч":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 174 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 174 l 868 174 z "},"ц":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 0 l 868 174 l 0 174 l 0 1042 l 347 1042 l 347 347 l 694 347 l 694 1042 l 1042 1042 l 1042 347 l 1215 347 l 1215 0 l 868 0 z "},"ш":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 347 l 521 347 l 521 1042 l 694 1042 l 694 347 l 868 347 l 868 1042 l 1215 1042 l 1215 174 l 0 174 z "},"щ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1042 0 l 1042 174 l 0 174 l 0 1042 l 347 1042 l 347 347 l 521 347 l 521 1042 l 694 1042 l 694 347 l 868 347 l 868 1042 l 1215 1042 l 1215 347 l 1389 347 l 1389 0 l 1042 0 z "},"џ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 0 l 521 174 l 0 174 l 0 1042 l 347 1042 l 347 347 l 868 347 l 868 1042 l 1215 1042 l 1215 174 l 694 174 l 694 0 l 521 0 z "},"ь":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ъ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 868 l 0 868 l 0 1042 l 521 1042 l 521 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 521 347 l 868 347 l 868 521 l 521 521 l 521 347 z "},"ы":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 174 l 0 174 m 868 174 l 868 1042 l 1215 1042 l 1215 174 l 868 174 m 347 347 l 521 347 l 521 521 l 347 521 l 347 347 z "},"љ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 1042 l 868 1042 l 868 868 l 1215 868 l 1215 174 l 521 174 l 521 868 l 347 868 l 347 174 l 0 174 m 868 347 l 1042 347 l 1042 694 l 868 694 l 868 347 z "},"њ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 868 1042 l 868 868 l 1215 868 l 1215 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 m 868 347 l 1042 347 l 1042 694 l 868 694 l 868 347 z "},"ѕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 868 347 l 868 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 0 174 z "},"є":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 868 l 347 868 l 347 694 l 694 694 l 694 521 l 347 521 l 347 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"э":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 l 868 868 l 347 868 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"і":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ї":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 347 868 l 347 1042 l 868 1042 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ј":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 0 l 174 174 l 694 174 l 694 868 l 521 868 l 521 1042 l 1042 1042 l 1042 174 l 868 174 l 868 0 l 174 0 z "},"ћ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 1042 l 521 1042 l 521 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 868 174 l 868 694 l 521 694 l 521 174 l 174 174 z "},"ю":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 694 l 347 694 l 347 868 l 521 868 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 174 l 0 174 m 694 347 l 868 347 l 868 868 l 694 868 l 694 347 z "},"я":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ђ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 0 l 694 174 l 868 174 l 868 694 l 521 694 l 521 174 l 174 174 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 868 1215 l 868 1042 l 521 1042 l 521 868 l 1042 868 l 1042 694 l 1215 694 l 1215 174 l 1042 174 l 1042 0 l 694 0 z "},"ѣ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 868 l 0 868 l 0 1042 l 174 1042 l 174 1389 l 521 1389 l 521 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 1042 694 l 1042 521 l 1215 521 m 868 521 l 521 521 l 521 347 l 868 347 l 868 521 z "},"ѫ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 868 l 347 868 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 868 m 347 694 l 868 694 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 694 m 0 174 l 0 521 l 347 521 l 347 174 l 0 174 m 1215 174 l 868 174 l 868 521 l 1215 521 l 1215 174 z "},"ѳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 m 174 521 l 1042 521 l 1042 694 l 174 694 l 174 521 z "},"ѵ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 1042 l 521 1042 l 521 521 l 868 521 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 347 l 868 347 l 868 174 l 521 174 z "},"ғ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 521 868 l 521 694 l 868 694 l 868 521 l 521 521 l 521 174 l 174 174 l 174 521 l 0 521 l 0 694 l 174 694 l 174 1042 l 1215 1042 z "},"ҕ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 868 l 521 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 1042 174 l 1042 0 l 694 0 l 694 174 l 868 174 l 868 521 l 521 521 l 521 174 l 174 174 l 174 1042 l 1215 1042 l 1215 868 l 521 868 z "},"җ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 z "},"ҙ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 0 l 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 l 868 868 l 347 868 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 z "},"қ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 m 1215 1042 l 1215 868 l 868 868 l 868 1042 l 1215 1042 z "},"ҝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 694 l 868 694 l 868 521 l 694 521 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 868 l 694 868 l 694 694 m 1042 868 l 1042 694 l 868 694 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 m 1215 174 l 868 174 l 868 521 l 1215 521 l 1215 174 z "},"ҡ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 521 521 l 521 174 l 174 174 l 174 868 l 0 868 l 0 1042 l 521 1042 l 521 694 l 694 694 l 694 868 m 1215 1042 l 1215 868 l 868 868 l 868 1042 l 1215 1042 z "},"ң":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 347 z "},"ԥ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 868 l 347 868 l 347 174 l 0 174 l 0 1042 l 1215 1042 l 1215 347 z "},"ҫ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 694 l 868 694 l 868 868 l 347 868 l 347 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 0 l 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 z "},"ҭ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1042 l 1215 868 l 868 868 l 868 347 l 1042 347 l 1042 0 l 694 0 l 694 174 l 521 174 l 521 868 l 174 868 l 174 1042 l 1215 1042 z "},"ү":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 0 l 521 0 l 521 347 l 347 347 l 347 521 l 174 521 l 174 1042 l 521 1042 l 521 521 l 868 521 l 868 1042 l 1215 1042 z "},"ұ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 347 l 1042 347 l 1042 174 l 868 174 l 868 0 l 521 0 l 521 174 l 347 174 l 347 347 l 521 347 l 521 521 l 347 521 l 347 694 l 174 694 l 174 1042 l 521 1042 l 521 694 l 868 694 l 868 1042 l 1215 1042 z "},"ҷ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 347 z "},"ҹ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 347 l 521 347 l 521 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 868 l 694 868 l 694 694 l 868 694 l 868 1042 l 1215 1042 z "},"һ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 868 l 521 868 l 521 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 m 1215 868 l 1215 174 l 868 174 l 868 868 l 521 868 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"ӏ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 347 1215 l 347 1389 l 868 1389 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"ӂ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 z "},"ӌ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1215 347 l 1389 347 l 1389 0 l 1042 0 l 1042 174 l 868 174 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 347 z "},"ӑ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ӓ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ӗ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 347 521 l 347 347 l 1042 347 l 1042 174 l 174 174 m 347 694 l 868 694 l 868 868 l 347 868 l 347 694 z "},"ә":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 694 l 868 694 l 868 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 521 l 347 521 l 347 347 z "},"ӝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 l 694 1042 l 694 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 z "},"ӟ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 521 l 347 521 l 347 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 l 868 868 l 347 868 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"ӣ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 m 347 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 521 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 521 l 521 521 l 521 694 z "},"ӥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 m 1042 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 m 347 521 l 521 521 l 521 347 l 347 347 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 521 m 1215 1042 l 1215 174 l 868 174 l 868 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 m 521 694 l 694 694 l 694 521 l 521 521 l 521 694 z "},"ӧ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"ө":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 m 174 521 l 1042 521 l 1042 694 l 174 694 l 174 521 z "},"ӯ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ӱ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 347 1042 l 347 521 l 868 521 l 868 1042 l 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"ӳ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 347 1215 l 347 1389 l 521 1389 l 521 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 1215 1042 l 1215 174 l 1042 174 l 1042 0 l 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 521 l 868 521 l 868 1042 l 1215 1042 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"ӵ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 868 174 l 868 521 l 174 521 l 174 694 l 0 694 l 0 1042 l 347 1042 l 347 694 l 868 694 l 868 1042 l 1215 1042 l 1215 174 l 868 174 z "},"ӷ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 521 868 l 521 347 l 694 347 l 694 0 l 347 0 l 347 174 l 174 174 l 174 1042 l 1215 1042 z "},"ӹ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 174 l 0 174 m 868 174 l 868 1042 l 1215 1042 l 1215 174 l 868 174 m 347 347 l 521 347 l 521 521 l 347 521 l 347 347 z "},"ԛ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 0 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 0 l 868 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"ԝ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 m 694 1042 l 694 347 l 521 347 l 521 1042 l 694 1042 m 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 1042 l 1215 1042 z "},"Ҥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 1215 l 868 1215 l 868 174 l 521 174 l 521 694 l 347 694 l 347 174 l 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1389 z "},"ҥ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 868 l 868 868 l 868 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 l 0 1042 l 347 1042 l 347 694 l 521 694 l 521 1042 z "},"Ӕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 347 l 1215 347 l 1215 174 l 521 174 l 521 521 l 347 521 l 347 174 l 0 174 m 347 694 l 521 694 l 521 1042 l 347 1042 l 347 694 z "},"ӕ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 521 694 l 521 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 694 521 l 694 347 l 1042 347 l 1042 174 l 174 174 m 694 694 l 868 694 l 868 868 l 694 868 l 694 694 m 347 347 l 521 347 l 521 521 l 347 521 l 347 347 z "},"Α":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 868 174 l 868 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 694 z "},"Β":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 0 174 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"Γ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 1215 1389 l 1215 1215 l 521 1215 l 521 174 l 174 174 z "},"Δ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 0 174 m 347 347 l 868 347 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 347 z "},"Ε":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 1215 l 347 1215 l 347 868 l 1042 868 l 1042 694 l 347 694 l 347 347 l 1215 347 l 1215 174 l 0 174 z "},"Ζ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 0 1215 l 0 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 694 694 l 694 521 l 521 521 l 521 347 l 1215 347 l 1215 174 l 0 174 z "},"Η":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 694 l 347 694 l 347 174 l 0 174 z "},"Θ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"Ι":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Κ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 694 868 l 694 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Λ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 868 174 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 174 l 0 174 z "},"Μ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 868 l 694 868 l 694 521 l 521 521 l 521 868 l 347 868 l 347 174 l 0 174 z "},"Ν":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 868 868 l 868 1389 l 1215 1389 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 868 l 347 868 l 347 174 l 0 174 z "},"Ξ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 1215 l 0 1389 l 1215 1389 l 1215 1215 l 0 1215 m 174 694 l 174 868 l 1042 868 l 1042 694 l 174 694 m 0 174 l 0 347 l 1215 347 l 1215 174 l 0 174 z "},"Ο":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 1215 l 347 1215 l 347 347 z "},"Π":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 174 l 868 174 l 868 1215 l 347 1215 l 347 174 l 0 174 z "},"Ρ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 694 l 1042 694 l 1042 521 l 347 521 l 347 174 l 0 174 m 347 694 l 868 694 l 868 1215 l 347 1215 l 347 694 z "},"Σ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 0 1215 l 0 1389 l 1215 1389 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 1042 868 l 1042 694 l 694 694 l 694 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 174 l 0 174 z "},"Τ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 521 174 z "},"Υ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1389 l 521 1389 l 521 868 l 868 868 l 868 1389 l 1215 1389 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 174 l 521 174 z "},"Φ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 694 347 l 694 174 l 521 174 m 347 521 l 521 521 l 521 1042 l 347 1042 l 347 521 m 694 521 l 868 521 l 868 1042 l 694 1042 l 694 521 z "},"Χ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1389 l 347 1389 l 347 1042 l 521 1042 l 521 868 l 694 868 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 521 l 347 521 l 347 174 l 0 174 z "},"Ψ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 347 174 l 347 347 l 521 347 l 521 694 l 174 694 l 174 868 l 0 868 l 0 1389 l 347 1389 l 347 868 l 521 868 l 521 1389 l 868 1389 l 868 868 l 1042 868 l 1042 1389 l 1389 1389 l 1389 868 l 1215 868 l 1215 694 l 868 694 l 868 347 l 1042 347 l 1042 174 l 347 174 z "},"Ω":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 521 l 868 521 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 521 l 521 521 l 521 174 l 0 174 z "},"Ά":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1042 l 1215 174 l 868 174 l 868 521 l 521 521 l 521 174 l 174 174 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 m 347 1215 l 174 1215 l 174 1389 l 347 1389 l 347 1215 m 174 1215 l 174 1042 l 0 1042 l 0 1215 l 174 1215 m 868 1042 l 521 1042 l 521 694 l 868 694 l 868 1042 z "},"Έ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1389 1389 l 1389 1215 l 694 1215 l 694 868 l 1042 868 l 1042 694 l 694 694 l 694 347 l 1389 347 l 1389 174 l 347 174 l 347 1215 l 174 1215 l 174 1389 l 1389 1389 m 0 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1215 z "},"Ή":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1389 1389 l 1389 174 l 1042 174 l 1042 694 l 694 694 l 694 174 l 347 174 l 347 1215 l 174 1215 l 174 1389 l 694 1389 l 694 868 l 1042 868 l 1042 1389 l 1389 1389 m 0 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1215 z "},"Ί":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1389 l 347 1389 l 347 1215 l 174 1215 l 174 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 347 l 1215 347 l 1215 174 l 521 174 l 521 347 l 694 347 l 694 1215 l 521 1215 l 521 1389 l 1215 1389 m 0 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1215 z "},"Ό":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1389 1215 l 1389 347 l 1215 347 l 1215 174 l 521 174 l 521 347 l 347 347 l 347 1215 l 521 1215 l 521 1389 l 1215 1389 l 1215 1215 l 1389 1215 m 0 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1215 m 1042 1215 l 694 1215 l 694 347 l 1042 347 l 1042 1215 z "},"Ύ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1389 1389 l 1389 868 l 1215 868 l 1215 694 l 1042 694 l 1042 174 l 694 174 l 694 694 l 521 694 l 521 868 l 347 868 l 347 1215 l 174 1215 l 174 1389 l 694 1389 l 694 868 l 1042 868 l 1042 1389 l 1389 1389 m 0 1215 l 174 1215 l 174 1042 l 0 1042 l 0 1215 z "},"Ώ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1389 1042 l 1389 521 l 1215 521 l 1215 347 l 1389 347 l 1389 174 l 868 174 l 868 521 l 1042 521 l 1042 1042 l 868 1042 l 868 1215 l 694 1215 l 694 1042 l 521 1042 l 521 521 l 694 521 l 694 174 l 174 174 l 174 347 l 347 347 l 347 521 l 174 521 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 1389 1042 m 347 1215 l 174 1215 l 174 1389 l 347 1389 l 347 1215 m 174 1215 l 174 1042 l 0 1042 l 0 1215 l 174 1215 z "},"Ϊ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 174 174 z "},"Ϋ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 868 1215 l 868 1389 l 1215 1389 l 1215 1215 l 868 1215 m 521 174 l 521 521 l 347 521 l 347 694 l 174 694 l 174 1042 l 521 1042 l 521 694 l 868 694 l 868 1042 l 1215 1042 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 z "},"α":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"β":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 0 l 0 0 m 347 868 l 868 868 l 868 1215 l 347 1215 l 347 868 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"γ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 0 l 521 347 l 347 347 l 347 521 l 174 521 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 521 l 868 521 l 868 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 0 l 521 0 z "},"δ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 694 868 l 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"ε":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 174 174 z "},"ζ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 0 l 694 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 694 1215 l 694 1042 l 521 1042 l 521 868 l 347 868 l 347 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 1042 174 l 1042 0 l 694 0 z "},"η":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 868 l 521 868 l 521 174 l 174 174 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 m 1215 868 l 1215 0 l 868 0 l 868 868 l 521 868 l 521 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"θ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 347 174 m 347 868 l 868 868 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 m 521 347 l 694 347 l 694 521 l 868 521 l 868 694 l 347 694 l 347 521 l 521 521 l 521 347 z "},"ι":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 521 174 l 521 347 l 347 347 l 347 868 l 174 868 l 174 1042 l 694 1042 l 694 347 l 1042 347 l 1042 174 l 521 174 z "},"κ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 347 1042 l 347 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 521 l 347 521 l 347 174 l 0 174 z "},"λ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 694 l 347 694 l 347 1042 l 174 1042 l 174 1215 l 0 1215 l 0 1389 l 347 1389 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 174 l 868 174 l 868 521 l 694 521 l 694 694 l 521 694 l 521 521 l 347 521 l 347 174 l 0 174 z "},"μ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 694 347 l 694 174 l 347 174 l 347 0 l 0 0 l 0 1042 l 347 1042 l 347 347 m 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 1042 l 1042 1042 l 1042 347 l 1215 347 z "},"ν":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 521 l 868 521 l 868 1042 l 1215 1042 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 521 174 z "},"ξ":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 521 0 l 521 174 l 694 174 l 694 347 l 174 347 l 174 521 l 0 521 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 0 1215 l 0 1389 l 1042 1389 l 1042 1215 l 521 1215 l 521 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 347 l 1042 347 l 1042 174 l 868 174 l 868 0 l 521 0 z "},"ο":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 868 l 347 868 l 347 347 z "},"π":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 868 l 0 868 l 0 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 347 l 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 868 l 521 868 l 521 174 l 0 174 z "},"ρ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 1042 521 l 1042 347 l 347 347 l 347 0 l 0 0 m 347 521 l 868 521 l 868 868 l 347 868 l 347 521 z "},"ς":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 0 l 174 174 l 868 174 l 868 347 l 174 347 l 174 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 1042 1042 l 1042 868 l 347 868 l 347 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 1042 174 l 1042 0 l 174 0 z "},"σ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 694 l 1042 694 l 1042 347 l 868 347 l 868 174 l 174 174 m 347 347 l 694 347 l 694 694 l 521 694 l 521 868 l 347 868 l 347 347 z "},"τ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 174 l 694 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 1215 347 l 1215 174 l 694 174 z "},"υ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"φ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 0 l 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 347 l 521 347 l 521 868 l 694 868 l 694 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"χ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 0 l 868 0 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 0 l 0 0 z "},"ψ":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 521 0 l 521 174 l 174 174 l 174 347 l 0 347 l 0 1042 l 347 1042 l 347 347 l 521 347 l 521 1215 l 868 1215 l 868 347 l 1042 347 l 1042 1042 l 1389 1042 l 1389 347 l 1215 347 l 1215 174 l 868 174 l 868 0 l 521 0 z "},"ω":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 347 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 694 868 l 694 347 l 521 347 l 521 868 l 694 868 z "},"ί":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 1042 347 l 1042 174 l 521 174 l 521 347 l 347 347 l 347 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 347 l 1042 347 z "},"ϊ":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 0 1215 l 0 1389 l 347 1389 l 347 1215 l 0 1215 m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 521 174 l 521 347 l 347 347 l 347 868 l 174 868 l 174 1042 l 694 1042 l 694 347 l 1042 347 l 1042 174 l 521 174 z "},"ΐ":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 174 1215 l 0 1215 l 0 1389 l 174 1389 l 174 1215 m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 1042 1389 l 1042 1215 l 868 1215 l 868 1389 l 1042 1389 m 694 347 l 1042 347 l 1042 174 l 521 174 l 521 347 l 347 347 l 347 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1042 l 694 1042 l 694 347 z "},"ύ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1215 l 694 1042 l 521 1042 l 521 1215 l 694 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 174 347 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"ϋ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 m 347 174 l 347 347 l 174 347 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 347 l 1042 347 l 1042 174 l 347 174 z "},"ΰ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1215 l 0 1215 l 0 1389 l 174 1389 l 174 1215 m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 521 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1042 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 174 347 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 l 521 868 l 521 347 l 868 347 l 868 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 z "},"ό":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"ώ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 694 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 m 347 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 347 m 1215 868 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 868 347 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 m 694 868 l 694 347 l 521 347 l 521 868 l 694 868 z "},"ά":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 m 868 868 l 347 868 l 347 347 l 868 347 l 868 868 z "},"έ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 1042 l 1215 868 l 347 868 l 347 694 l 1042 694 l 1042 521 l 347 521 l 347 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1042 l 1215 1042 z "},"ή":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1215 868 l 1215 0 l 868 0 l 868 868 l 521 868 l 521 1215 l 694 1215 l 694 1042 l 1042 1042 l 1042 868 l 1215 868 m 347 868 l 521 868 l 521 174 l 174 174 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 868 z "},"ͺ":{"ha":1389,"x_min":521,"x_max":1042,"o":"m 694 347 l 694 174 l 521 174 l 521 347 l 694 347 m 1042 174 l 1042 0 l 694 0 l 694 174 l 1042 174 z "},"¹":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 347 694 l 347 868 l 521 868 l 521 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 868 l 1042 868 l 1042 694 l 347 694 z "},"²":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 347 694 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 347 694 z "},"³":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 347 694 l 347 868 l 694 868 l 694 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 347 694 z "},"⁴":{"ha":1389,"x_min":347,"x_max":868,"o":"m 694 694 l 694 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 868 1389 l 868 694 l 694 694 z "},"⁄":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"½":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 694 l 174 694 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 347 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 868 694 l 868 868 l 1215 868 l 1215 521 l 1042 521 l 1042 694 l 868 694 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 694 174 l 694 347 l 868 347 l 868 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"¼":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 694 l 174 694 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 347 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 1042 868 l 1215 868 l 1215 174 l 1042 174 l 1042 347 l 694 347 l 694 521 l 868 521 l 868 694 l 1042 694 l 1042 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"¾":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1215 l 347 1042 l 174 1042 l 174 1215 l 0 1215 l 0 1389 l 521 1389 l 521 1215 l 347 1215 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 521 868 l 347 868 l 347 1042 l 521 1042 l 521 868 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 347 868 l 347 694 l 0 694 l 0 868 l 347 868 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 1042 868 l 1215 868 l 1215 174 l 1042 174 l 1042 347 l 694 347 l 694 521 l 868 521 l 868 694 l 1042 694 l 1042 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"*":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 347 l 174 521 l 347 521 l 347 694 l 0 694 l 0 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1042 l 694 1042 l 694 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 694 347 l 694 521 l 521 521 l 521 347 l 174 347 z "},"\\\\":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 1389 l 174 1215 l 0 1215 l 0 1389 l 174 1389 m 347 1215 l 347 1042 l 174 1042 l 174 1215 l 347 1215 m 521 1042 l 521 868 l 347 868 l 347 1042 l 521 1042 m 694 868 l 694 694 l 521 694 l 521 868 l 694 868 m 868 694 l 868 521 l 694 521 l 694 694 l 868 694 m 1042 521 l 1042 347 l 868 347 l 868 521 l 1042 521 m 1215 347 l 1215 174 l 1042 174 l 1042 347 l 1215 347 z "},"·":{"ha":1389,"x_min":347,"x_max":694,"o":"m 347 521 l 347 868 l 694 868 l 694 521 l 347 521 z "},"•":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 521 347 l 521 521 l 347 521 l 347 868 l 521 868 l 521 1042 l 868 1042 l 868 868 l 1042 868 l 1042 521 l 868 521 l 868 347 l 521 347 z "},":":{"ha":1389,"x_min":347,"x_max":694,"o":"m 347 868 l 347 1215 l 694 1215 l 694 868 l 347 868 m 347 347 l 347 694 l 694 694 l 694 347 l 347 347 z "},",":{"ha":1389,"x_min":174,"x_max":694,"o":"m 174 0 l 174 174 l 347 174 l 347 521 l 694 521 l 694 174 l 521 174 l 521 0 l 174 0 z "},"…":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 521 l 174 521 l 174 174 l 0 174 m 521 174 l 521 521 l 694 521 l 694 174 l 521 174 m 1042 174 l 1042 521 l 1215 521 l 1215 174 l 1042 174 z "},"!":{"ha":1389,"x_min":347,"x_max":868,"o":"m 347 521 l 347 1389 l 868 1389 l 868 868 l 694 868 l 694 521 l 347 521 m 347 174 l 347 347 l 694 347 l 694 174 l 347 174 z "},"¡":{"ha":1389,"x_min":347,"x_max":868,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 m 347 174 l 347 694 l 521 694 l 521 1042 l 868 1042 l 868 174 l 347 174 z "},"#":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 1042 1042 l 1042 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 521 347 l 521 174 l 174 174 m 521 521 l 694 521 l 694 1042 l 521 1042 l 521 521 z "},".":{"ha":1389,"x_min":347,"x_max":694,"o":"m 347 174 l 347 521 l 694 521 l 694 174 l 347 174 z "},"?":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 521 l 347 694 l 694 694 l 694 868 l 868 868 l 868 1042 l 347 1042 l 347 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 347 521 m 347 174 l 347 347 l 868 347 l 868 174 l 347 174 z "},"¿":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1215 l 347 1389 l 868 1389 l 868 1215 l 347 1215 m 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 347 694 l 347 521 l 868 521 l 868 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 174 174 z "},"\\"":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 868 l 174 1389 l 521 1389 l 521 868 l 174 868 m 694 868 l 694 1389 l 1042 1389 l 1042 868 l 694 868 z "},"\'":{"ha":1389,"x_min":347,"x_max":694,"o":"m 347 868 l 347 1389 l 694 1389 l 694 868 l 347 868 z "},";":{"ha":1389,"x_min":174,"x_max":694,"o":"m 347 868 l 347 1215 l 694 1215 l 694 868 l 347 868 m 174 174 l 174 347 l 347 347 l 347 694 l 694 694 l 694 347 l 521 347 l 521 174 l 174 174 z "},"/":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"_":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 0 l 0 174 l 1215 174 l 1215 0 l 0 0 z "},"{":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 694 174 l 694 347 l 521 347 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 868 l 694 868 l 694 694 l 868 694 l 868 347 l 1042 347 l 1042 174 l 694 174 z "},"}":{"ha":1389,"x_min":174,"x_max":868,"o":"m 174 174 l 174 347 l 347 347 l 347 694 l 521 694 l 521 868 l 347 868 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 868 l 868 868 l 868 694 l 694 694 l 694 347 l 521 347 l 521 174 l 174 174 z "},"[":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 347 174 l 347 1389 l 1042 1389 l 1042 1215 l 694 1215 l 694 347 l 1042 347 l 1042 174 l 347 174 z "},"]":{"ha":1389,"x_min":174,"x_max":868,"o":"m 174 174 l 174 347 l 521 347 l 521 1215 l 174 1215 l 174 1389 l 868 1389 l 868 174 l 174 174 z "},"(":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 694 1042 l 694 521 l 868 521 l 868 347 l 1042 347 l 1042 174 l 694 174 z "},")":{"ha":1389,"x_min":174,"x_max":868,"o":"m 174 174 l 174 347 l 347 347 l 347 521 l 521 521 l 521 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 174 174 z "},"—":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 0 694 l 0 868 l 1389 868 l 1389 694 l 0 694 z "},"–":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 694 l 0 868 l 1215 868 l 1215 694 l 0 694 z "},"―":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 694 l 0 868 l 1215 868 l 1215 694 l 0 694 z "},"-":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 694 l 174 868 l 1215 868 l 1215 694 l 174 694 z "},"­":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 694 l 174 868 l 1215 868 l 1215 694 l 174 694 z "},"«":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 694 1215 l 694 1042 l 868 1042 l 868 1215 l 1215 1215 l 1215 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 1215 521 l 1215 347 l 868 347 l 868 521 l 694 521 l 694 347 l 347 347 m 521 521 l 694 521 l 694 694 l 521 694 l 521 868 l 694 868 l 694 1042 l 521 1042 l 521 868 l 347 868 l 347 694 l 521 694 l 521 521 z "},"»":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 347 l 0 521 l 174 521 l 174 694 l 347 694 l 347 868 l 174 868 l 174 1042 l 0 1042 l 0 1215 l 347 1215 l 347 1042 l 521 1042 l 521 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 347 l 521 347 l 521 521 l 347 521 l 347 347 l 0 347 m 521 521 l 694 521 l 694 694 l 868 694 l 868 868 l 694 868 l 694 1042 l 521 1042 l 521 868 l 694 868 l 694 694 l 521 694 l 521 521 z "},"‹":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 694 347 l 694 521 l 521 521 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1042 l 694 1042 l 694 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 694 868 l 694 694 l 868 694 l 868 521 l 1042 521 l 1042 347 l 694 347 z "},"›":{"ha":1389,"x_min":174,"x_max":868,"o":"m 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 694 694 l 694 521 l 521 521 l 521 347 l 174 347 z "},"„":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 521 694 l 521 347 l 347 347 l 347 174 l 0 174 l 0 347 l 174 347 l 174 694 l 521 694 m 1042 694 l 1042 347 l 868 347 l 868 174 l 521 174 l 521 347 l 694 347 l 694 694 l 1042 694 z "},"“":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 1389 l 694 1215 l 521 1215 l 521 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 694 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 868 l 694 868 l 694 1215 l 868 1215 l 868 1389 l 1215 1389 z "},"”":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 1389 l 694 1042 l 521 1042 l 521 868 l 174 868 l 174 1042 l 347 1042 l 347 1389 l 694 1389 m 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 694 868 l 694 1042 l 868 1042 l 868 1389 l 1215 1389 z "},"‘":{"ha":1389,"x_min":347,"x_max":868,"o":"m 347 868 l 347 1215 l 521 1215 l 521 1389 l 868 1389 l 868 1215 l 694 1215 l 694 868 l 347 868 z "},"’":{"ha":1389,"x_min":347,"x_max":868,"o":"m 347 868 l 347 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 694 1042 l 694 868 l 347 868 z "},"‚":{"ha":1389,"x_min":347,"x_max":868,"o":"m 347 174 l 347 347 l 521 347 l 521 694 l 868 694 l 868 347 l 694 347 l 694 174 l 347 174 z "},"·":{"ha":1389,"x_min":347,"x_max":694,"o":"m 347 521 l 347 868 l 694 868 l 694 521 l 347 521 z "},";":{"ha":1389,"x_min":174,"x_max":694,"o":"m 347 868 l 347 1215 l 694 1215 l 694 868 l 347 868 m 174 174 l 174 347 l 347 347 l 347 694 l 694 694 l 694 347 l 521 347 l 521 174 l 174 174 z "}," ":{"ha":1389,"x_min":0,"x_max":0,"o":""},"":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 174 l 174 521 l 521 521 l 521 174 l 174 174 m 694 174 l 694 521 l 1042 521 l 1042 174 l 694 174 z "},"¢":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 868 868 l 868 1042 l 694 1042 l 694 521 l 868 521 l 868 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 694 347 l 694 174 l 521 174 m 347 521 l 521 521 l 521 1042 l 347 1042 l 347 521 z "},"¤":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 1215 l 347 1042 l 174 1042 l 174 1215 l 347 1215 m 868 1042 l 521 1042 l 521 1215 l 868 1215 l 868 1042 m 1215 1215 l 1215 1042 l 1042 1042 l 1042 1215 l 1215 1215 m 521 1042 l 521 521 l 347 521 l 347 1042 l 521 1042 m 868 1042 l 1042 1042 l 1042 521 l 868 521 l 868 1042 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 521 521 l 868 521 l 868 347 l 521 347 l 521 521 m 1042 347 l 1042 521 l 1215 521 l 1215 347 l 1042 347 z "},"$":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 0 347 l 0 521 l 521 521 l 521 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 174 1042 l 174 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 868 l 1042 868 l 1042 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 694 347 l 694 174 l 521 174 m 347 868 l 521 868 l 521 1042 l 347 1042 l 347 868 m 694 521 l 868 521 l 868 694 l 694 694 l 694 521 z "},"₯":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 m 174 347 l 521 347 l 521 174 l 0 174 l 0 1215 l 174 1215 l 174 347 m 868 347 l 1042 347 l 1042 174 l 868 174 l 868 0 l 694 0 l 694 347 l 521 347 l 521 1215 l 694 1215 l 694 868 l 868 868 l 868 347 m 1042 868 l 868 868 l 868 1042 l 1042 1042 l 1042 868 m 1215 868 l 1215 347 l 1042 347 l 1042 868 l 1215 868 z "},"€":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 694 1215 l 694 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 868 694 l 868 521 l 694 521 l 694 347 l 868 347 l 868 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 521 174 l 521 347 l 347 347 l 347 521 l 0 521 l 0 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 1042 1389 l 1042 1215 l 1215 1215 z "},"ƒ":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 347 l 521 347 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 347 l 694 347 l 694 174 l 174 174 z "},"₴":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 1042 l 1215 1042 l 1215 868 l 0 868 l 0 1042 l 694 1042 l 694 1215 l 174 1215 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 m 1215 694 l 1215 521 l 521 521 l 521 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 1215 694 z "},"₽":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1389 1215 l 1389 868 l 1215 868 l 1215 694 l 521 694 l 521 521 l 868 521 l 868 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1389 l 1215 1389 l 1215 1215 l 1389 1215 m 1042 1215 l 521 1215 l 521 868 l 1042 868 l 1042 1215 z "},"£":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 868 l 1042 868 l 1042 694 l 521 694 l 521 347 l 1215 347 l 1215 174 l 0 174 z "},"₸":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1215 l 174 1389 l 1215 1389 l 1215 1215 l 174 1215 m 521 174 l 521 868 l 174 868 l 174 1042 l 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 z "},"₮":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 868 521 l 868 174 l 521 174 l 521 347 l 347 347 l 347 521 l 521 521 l 521 694 l 347 694 l 347 868 l 521 868 l 521 1215 l 174 1215 l 174 1389 l 1215 1389 z "},"¥":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 347 l 174 347 l 174 521 l 521 521 l 521 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 174 1042 l 174 1389 l 521 1389 l 521 1042 l 868 1042 l 868 1389 l 1215 1389 l 1215 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 521 l 1215 521 l 1215 347 l 868 347 l 868 174 l 521 174 z "},"∕":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"+":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 347 l 521 694 l 174 694 l 174 868 l 521 868 l 521 1215 l 868 1215 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 347 l 521 347 z "},"×":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 1215 l 347 1042 l 174 1042 l 174 1215 l 347 1215 m 1042 1215 l 1042 1042 l 868 1042 l 868 1215 l 1042 1215 m 521 1042 l 521 868 l 347 868 l 347 1042 l 521 1042 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 694 521 l 694 694 l 868 694 l 868 521 l 694 521 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 868 347 l 868 521 l 1042 521 l 1042 347 l 868 347 z "},"÷":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 1042 l 521 1215 l 868 1215 l 868 1042 l 521 1042 m 174 694 l 174 868 l 1215 868 l 1215 694 l 174 694 m 521 347 l 521 521 l 868 521 l 868 347 l 521 347 z "},"=":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 868 l 0 1042 l 1215 1042 l 1215 868 l 0 868 m 0 521 l 0 694 l 1215 694 l 1215 521 l 0 521 z "},"≠":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 694 868 l 694 694 l 1215 694 l 1215 521 l 347 521 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 521 694 l 521 868 l 0 868 l 0 1042 l 868 1042 l 868 1215 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},">":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 174 l 174 347 l 347 347 l 347 521 l 521 521 l 521 694 l 694 694 l 694 868 l 521 868 l 521 1042 l 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1042 l 868 1042 l 868 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 694 521 l 694 347 l 521 347 l 521 174 l 174 174 z "},"<":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 694 174 l 694 347 l 521 347 l 521 521 l 347 521 l 347 694 l 174 694 l 174 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 694 1042 l 694 868 l 521 868 l 521 694 l 694 694 l 694 521 l 868 521 l 868 347 l 1042 347 l 1042 174 l 694 174 z "},"≥":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 347 521 l 347 694 l 521 694 l 521 868 l 694 868 l 694 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 868 868 l 868 694 l 694 694 l 694 521 l 347 521 m 347 174 l 347 347 l 1042 347 l 1042 174 l 347 174 z "},"≤":{"ha":1389,"x_min":347,"x_max":1042,"o":"m 694 521 l 694 694 l 521 694 l 521 868 l 347 868 l 347 1042 l 521 1042 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 694 1042 l 694 868 l 868 868 l 868 694 l 1042 694 l 1042 521 l 694 521 m 347 174 l 347 347 l 1042 347 l 1042 174 l 347 174 z "},"±":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 521 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 521 l 521 521 m 174 174 l 174 347 l 1215 347 l 1215 174 l 174 174 z "},"≈":{"ha":1389,"x_min":0,"x_max":1042,"o":"m 521 1215 l 521 1042 l 174 1042 l 174 1215 l 521 1215 m 1042 1215 l 1042 1042 l 868 1042 l 868 1215 l 1042 1215 m 0 1042 l 174 1042 l 174 868 l 0 868 l 0 1042 m 521 1042 l 868 1042 l 868 868 l 521 868 l 521 1042 m 521 694 l 521 521 l 174 521 l 174 694 l 521 694 m 868 694 l 1042 694 l 1042 521 l 868 521 l 868 694 m 0 521 l 174 521 l 174 347 l 0 347 l 0 521 m 521 521 l 868 521 l 868 347 l 521 347 l 521 521 z "},"~":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 694 l 1042 694 l 1042 521 l 521 521 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1042 l 694 1042 l 694 868 l 868 868 l 868 694 m 0 868 l 174 868 l 174 694 l 0 694 l 0 868 m 1215 868 l 1215 694 l 1042 694 l 1042 868 l 1215 868 z "},"¬":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 521 l 868 868 l 174 868 l 174 1042 l 1215 1042 l 1215 521 l 868 521 z "},"∞":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 868 l 174 868 l 174 1042 l 521 1042 l 521 868 m 1042 868 l 694 868 l 694 1042 l 1042 1042 l 1042 868 m 174 868 l 174 521 l 0 521 l 0 868 l 174 868 m 694 868 l 694 521 l 521 521 l 521 868 l 694 868 m 1215 868 l 1215 521 l 1042 521 l 1042 868 l 1215 868 m 174 521 l 521 521 l 521 347 l 174 347 l 174 521 m 694 521 l 1042 521 l 1042 347 l 694 347 l 694 521 z "},"∫":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1042 1389 l 1042 1215 l 868 1215 l 868 174 l 694 174 l 694 0 l 347 0 l 347 174 l 521 174 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 m 1215 1215 l 1215 1042 l 1042 1042 l 1042 1215 l 1215 1215 m 347 347 l 347 174 l 174 174 l 174 347 l 347 347 z "},"∆":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 174 l 0 174 m 347 347 l 868 347 l 868 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 347 z "},"∏":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 1215 1389 l 1215 174 l 868 174 l 868 1215 l 347 1215 l 347 174 l 0 174 z "},"∑":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 521 l 347 521 l 347 694 l 521 694 l 521 868 l 347 868 l 347 1042 l 174 1042 l 174 1215 l 0 1215 l 0 1389 l 1215 1389 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 694 1042 l 694 868 l 1042 868 l 1042 694 l 694 694 l 694 521 l 521 521 l 521 347 l 868 347 l 868 521 l 1215 521 l 1215 174 l 0 174 z "},"√":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 347 694 l 347 521 l 521 521 l 521 1389 l 1215 1389 l 1215 1215 l 868 1215 l 868 174 l 347 174 z "},"µ":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 347 l 694 347 l 694 174 l 347 174 l 347 0 l 0 0 l 0 1042 l 347 1042 l 347 347 m 1215 347 l 1215 174 l 868 174 l 868 347 l 694 347 l 694 1042 l 1042 1042 l 1042 347 l 1215 347 z "},"∂":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 868 868 l 868 1042 l 694 1042 l 694 1215 l 347 1215 l 347 1042 l 0 1042 l 0 1215 l 174 1215 l 174 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 347 l 1042 347 l 1042 174 l 174 174 m 347 347 l 868 347 l 868 694 l 347 694 l 347 347 z "},"%":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1042 l 347 1042 l 347 1215 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 347 868 l 0 868 l 0 1215 l 174 1215 l 174 1042 l 347 1042 l 347 868 m 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 1215 m 694 1042 l 868 1042 l 868 868 l 694 868 l 694 1042 m 521 868 l 694 868 l 694 694 l 521 694 l 521 868 m 347 694 l 521 694 l 521 521 l 347 521 l 347 694 m 868 694 l 1215 694 l 1215 347 l 1042 347 l 1042 521 l 868 521 l 868 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 868 347 l 1042 347 l 1042 174 l 694 174 l 694 521 l 868 521 l 868 347 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"‰":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1042 l 347 1042 l 347 1215 m 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 l 1215 1215 m 347 868 l 0 868 l 0 1215 l 174 1215 l 174 1042 l 347 1042 l 347 868 m 1042 1042 l 868 1042 l 868 1215 l 1042 1215 l 1042 1042 m 868 868 l 694 868 l 694 1042 l 868 1042 l 868 868 m 694 694 l 521 694 l 521 868 l 694 868 l 694 694 m 521 694 l 521 521 l 347 521 l 347 694 l 521 694 m 1389 694 l 1389 347 l 1215 347 l 1215 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 521 174 l 521 521 l 694 521 l 694 347 l 868 347 l 868 521 l 694 521 l 694 694 l 1389 694 m 174 521 l 347 521 l 347 347 l 174 347 l 174 521 m 0 347 l 174 347 l 174 174 l 0 174 l 0 347 z "},"↑":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 0 l 347 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 868 694 l 868 0 l 347 0 z "},"→":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 694 174 l 694 521 l 0 521 l 0 1042 l 694 1042 l 694 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 1215 1042 l 1215 868 l 1389 868 l 1389 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 694 174 z "},"↓":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 0 l 521 174 l 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 694 l 347 694 l 347 1389 l 868 1389 l 868 694 l 1215 694 l 1215 521 l 1042 521 l 1042 347 l 868 347 l 868 174 l 694 174 l 694 0 l 521 0 z "},"←":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1042 l 1389 1042 l 1389 521 l 694 521 l 694 174 l 521 174 z "},"◊":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 521 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1042 m 694 1042 l 694 1215 l 868 1215 l 868 1042 l 694 1042 m 347 868 l 174 868 l 174 1042 l 347 1042 l 347 868 m 868 868 l 868 1042 l 1042 1042 l 1042 868 l 868 868 m 174 868 l 174 694 l 0 694 l 0 868 l 174 868 m 1215 868 l 1215 694 l 1042 694 l 1042 868 l 1215 868 m 347 694 l 347 521 l 174 521 l 174 694 l 347 694 m 868 694 l 1042 694 l 1042 521 l 868 521 l 868 694 m 521 521 l 521 347 l 347 347 l 347 521 l 521 521 m 694 521 l 868 521 l 868 347 l 694 347 l 694 521 m 521 347 l 694 347 l 694 174 l 521 174 l 521 347 z "},"▲":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 347 l 174 347 l 174 694 l 347 694 l 347 1042 l 521 1042 l 521 1389 l 694 1389 l 694 1042 l 868 1042 l 868 694 l 1042 694 l 1042 347 l 1215 347 l 1215 174 l 0 174 z "},"▶":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 0 174 l 0 1389 l 174 1389 l 174 1215 l 521 1215 l 521 1042 l 868 1042 l 868 868 l 1215 868 l 1215 694 l 868 694 l 868 521 l 521 521 l 521 347 l 174 347 l 174 174 l 0 174 z "},"▼":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 521 l 347 521 l 347 868 l 174 868 l 174 1215 l 0 1215 l 0 1389 l 1215 1389 l 1215 1215 l 1042 1215 l 1042 868 l 868 868 l 868 521 l 694 521 l 694 174 l 521 174 z "},"◀":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 174 l 1042 347 l 694 347 l 694 521 l 347 521 l 347 694 l 0 694 l 0 868 l 347 868 l 347 1042 l 694 1042 l 694 1215 l 1042 1215 l 1042 1389 l 1215 1389 l 1215 174 l 1042 174 z "},"★":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 521 l 347 521 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 521 1042 l 521 1389 l 694 1389 l 694 1042 l 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 174 l 868 174 l 868 347 l 694 347 l 694 521 l 521 521 l 521 347 l 347 347 l 347 174 l 174 174 z "},"☆":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 694 1042 l 521 1042 l 521 1389 l 694 1389 l 694 1042 m 347 868 l 347 694 l 174 694 l 174 868 l 0 868 l 0 1042 l 521 1042 l 521 868 l 347 868 m 1215 1042 l 1215 868 l 1042 868 l 1042 694 l 868 694 l 868 868 l 694 868 l 694 1042 l 1215 1042 m 694 694 l 868 694 l 868 521 l 1042 521 l 1042 174 l 868 174 l 868 347 l 347 347 l 347 174 l 174 174 l 174 521 l 347 521 l 347 694 l 521 694 l 521 521 l 694 521 l 694 694 z "},"♠":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 174 174 l 174 347 l 347 347 l 347 521 l 0 521 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 521 l 868 521 l 868 347 l 1042 347 l 1042 174 l 174 174 z "},"♣":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 868 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 m 521 1042 l 521 694 l 174 694 l 174 1042 l 521 1042 m 1215 1042 l 1215 694 l 868 694 l 868 1042 l 1215 1042 m 521 694 l 868 694 l 868 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 521 347 l 521 694 z "},"♥":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 1215 1215 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 347 l 694 347 l 694 174 l 521 174 z "},"♦":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 521 174 l 521 347 l 347 347 l 347 521 l 174 521 l 174 694 l 0 694 l 0 868 l 174 868 l 174 1042 l 347 1042 l 347 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 l 868 1215 l 868 1042 l 1042 1042 l 1042 868 l 1215 868 l 1215 694 l 1042 694 l 1042 521 l 868 521 l 868 347 l 694 347 l 694 174 l 521 174 z "},"♪":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 1215 l 868 1042 l 694 1042 l 694 347 l 521 347 l 521 174 l 174 174 l 174 347 l 0 347 l 0 521 l 174 521 l 174 694 l 521 694 l 521 1389 l 694 1389 l 694 1215 l 868 1215 m 1042 1042 l 1042 868 l 868 868 l 868 1042 l 1042 1042 m 1215 868 l 1215 694 l 1042 694 l 1042 868 l 1215 868 m 868 694 l 1042 694 l 1042 521 l 868 521 l 868 694 z "},"":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 868 1215 l 694 1215 l 694 1389 l 868 1389 l 868 1215 m 1389 1042 l 1389 521 l 1215 521 l 1215 347 l 1042 347 l 1042 174 l 694 174 l 694 347 l 521 347 l 521 174 l 347 174 l 347 347 l 174 347 l 174 521 l 0 521 l 0 1042 l 174 1042 l 174 1215 l 694 1215 l 694 1042 l 868 1042 l 868 1215 l 1215 1215 l 1215 1042 l 1042 1042 l 1042 694 l 868 694 l 868 521 l 1042 521 l 1042 694 l 1215 694 l 1215 1042 l 1389 1042 z "},"@":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 1042 1389 l 1042 1215 l 174 1215 l 174 1389 l 1042 1389 m 0 1215 l 174 1215 l 174 347 l 0 347 l 0 1215 m 1215 1215 l 1215 521 l 347 521 l 347 1042 l 868 1042 l 868 694 l 1042 694 l 1042 1215 l 1215 1215 m 694 868 l 521 868 l 521 694 l 694 694 l 694 868 m 174 174 l 174 347 l 1042 347 l 1042 174 l 174 174 z "},"&":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 868 521 l 1042 521 l 1042 347 l 1215 347 l 1215 174 l 174 174 l 174 347 l 0 347 l 0 694 l 174 694 l 174 868 l 0 868 l 0 1215 l 174 1215 l 174 1389 l 694 1389 l 694 1215 l 868 1215 l 868 868 l 694 868 l 694 694 l 868 694 l 868 521 m 347 868 l 521 868 l 521 1215 l 347 1215 l 347 868 m 694 521 l 521 521 l 521 694 l 347 694 l 347 347 l 694 347 l 694 521 m 1215 694 l 1215 521 l 1042 521 l 1042 694 l 1215 694 z "},"¶":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 694 174 l 694 521 l 347 521 l 347 694 l 174 694 l 174 1215 l 347 1215 l 347 1389 l 1215 1389 l 1215 174 l 1042 174 l 1042 521 l 868 521 l 868 174 l 694 174 m 521 694 l 694 694 l 694 1215 l 521 1215 l 521 1042 l 347 1042 l 347 868 l 521 868 l 521 694 m 868 694 l 1042 694 l 1042 1215 l 868 1215 l 868 694 z "},"§":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 1215 1215 l 1215 1042 l 868 1042 l 868 1215 l 521 1215 l 521 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 347 694 l 347 868 l 174 868 l 174 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 l 1215 1215 m 868 694 l 868 868 l 1042 868 l 1042 694 l 1215 694 l 1215 347 l 1042 347 l 1042 174 l 347 174 l 347 347 l 174 347 l 174 521 l 521 521 l 521 347 l 868 347 l 868 521 l 521 521 l 521 694 l 868 694 z "},"©":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1042 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 m 347 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1042 m 1042 1042 l 1042 1215 l 1215 1215 l 1215 1042 l 1042 1042 m 174 1042 l 174 347 l 0 347 l 0 1042 l 174 1042 m 521 1042 l 868 1042 l 868 868 l 521 868 l 521 1042 m 1389 1042 l 1389 347 l 1215 347 l 1215 1042 l 1389 1042 m 347 868 l 521 868 l 521 521 l 347 521 l 347 868 m 521 347 l 521 521 l 868 521 l 868 347 l 521 347 m 347 347 l 347 174 l 174 174 l 174 347 l 347 347 m 1042 347 l 1215 347 l 1215 174 l 1042 174 l 1042 347 m 347 174 l 1042 174 l 1042 0 l 347 0 l 347 174 z "},"®":{"ha":1389,"x_min":0,"x_max":1389,"o":"m 1042 1215 l 347 1215 l 347 1389 l 1042 1389 l 1042 1215 m 347 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1042 m 1042 1042 l 1042 1215 l 1215 1215 l 1215 1042 l 1042 1042 m 174 1042 l 174 347 l 0 347 l 0 1042 l 174 1042 m 347 347 l 347 1042 l 868 1042 l 868 868 l 521 868 l 521 694 l 868 694 l 868 521 l 521 521 l 521 347 l 347 347 m 1389 1042 l 1389 347 l 1215 347 l 1215 1042 l 1389 1042 m 868 694 l 868 868 l 1042 868 l 1042 694 l 868 694 m 868 347 l 868 521 l 1042 521 l 1042 347 l 868 347 m 347 347 l 347 174 l 174 174 l 174 347 l 347 347 m 1042 347 l 1215 347 l 1215 174 l 1042 174 l 1042 347 m 347 174 l 1042 174 l 1042 0 l 347 0 l 347 174 z "},"™":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 347 694 l 347 1215 l 174 1215 l 174 1389 l 1215 1389 l 1215 694 l 1042 694 l 1042 1042 l 868 1042 l 868 694 l 694 694 l 694 1215 l 521 1215 l 521 694 l 347 694 z "},"°":{"ha":1389,"x_min":347,"x_max":868,"o":"m 694 1215 l 521 1215 l 521 1389 l 694 1389 l 694 1215 m 521 1215 l 521 1042 l 347 1042 l 347 1215 l 521 1215 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 m 521 1042 l 694 1042 l 694 868 l 521 868 l 521 1042 z "},"|":{"ha":1389,"x_min":521,"x_max":868,"o":"m 521 174 l 521 1389 l 868 1389 l 868 174 l 521 174 z "},"¦":{"ha":1389,"x_min":521,"x_max":868,"o":"m 521 868 l 521 1389 l 868 1389 l 868 868 l 521 868 m 521 174 l 521 694 l 868 694 l 868 174 l 521 174 z "},"†":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 174 l 521 174 z "},"‡":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 521 174 l 521 521 l 174 521 l 174 694 l 521 694 l 521 868 l 174 868 l 174 1042 l 521 1042 l 521 1389 l 868 1389 l 868 1042 l 1215 1042 l 1215 868 l 868 868 l 868 694 l 1215 694 l 1215 521 l 868 521 l 868 174 l 521 174 z "},"№":{"ha":1389,"x_min":0,"x_max":1215,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 174 l 0 174 l 0 1389 l 347 1389 m 1042 1215 l 868 1215 l 868 1389 l 1042 1389 l 1042 1215 m 347 1215 l 521 1215 l 521 174 l 347 174 l 347 1215 m 868 1215 l 868 694 l 694 694 l 694 1215 l 868 1215 m 1215 1215 l 1215 694 l 1042 694 l 1042 1215 l 1215 1215 m 868 694 l 1042 694 l 1042 521 l 868 521 l 868 694 m 694 347 l 1215 347 l 1215 174 l 694 174 l 694 347 z "},"^":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 z "},"˗":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 694 l 174 868 l 1042 868 l 1042 694 l 174 694 z "},"̀":{"ha":0,"x_min":-986,"x_max":-639,"o":"m -812 1389 l -812 1215 l -986 1215 l -986 1389 l -812 1389 m -639 1215 l -639 1042 l -812 1042 l -812 1215 l -639 1215 z "},"́":{"ha":0,"x_min":-847,"x_max":-500,"o":"m -500 1389 l -500 1215 l -674 1215 l -674 1389 l -500 1389 m -847 1215 l -674 1215 l -674 1042 l -847 1042 l -847 1215 z "},"̦":{"ha":0,"x_min":-1042,"x_max":-521,"o":"m -1042 -519 l -1042 -346 l -868 -346 l -868 1 l -521 1 l -521 -346 l -694 -346 l -694 -519 l -1042 -519 z "},"̵":{"ha":0,"x_min":-1028,"x_max":-356,"o":"m -1028 499 l -1028 672 l -356 672 l -356 499 l -1028 499 z "},"ʼ":{"ha":1389,"x_min":0,"x_max":347,"o":"m 0 868 l 0 1389 l 347 1389 l 347 1042 l 174 1042 l 174 868 l 0 868 z "},"ˉ":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 z "},"ˋ":{"ha":1389,"x_min":521,"x_max":868,"o":"m 694 1389 l 694 1215 l 521 1215 l 521 1389 l 694 1389 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"ˊ":{"ha":1389,"x_min":521,"x_max":868,"o":"m 868 1389 l 868 1215 l 694 1215 l 694 1389 l 868 1389 m 521 1215 l 694 1215 l 694 1042 l 521 1042 l 521 1215 z "},"´":{"ha":1389,"x_min":521,"x_max":868,"o":"m 868 1389 l 868 1215 l 694 1215 l 694 1389 l 868 1389 m 521 1215 l 694 1215 l 694 1042 l 521 1042 l 521 1215 z "},"˘":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 1389 l 347 1215 l 174 1215 l 174 1389 l 347 1389 m 1042 1389 l 1042 1215 l 868 1215 l 868 1389 l 1042 1389 m 347 1215 l 868 1215 l 868 1042 l 347 1042 l 347 1215 z "},"ˇ":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 1042 l 347 1215 l 174 1215 l 174 1389 l 521 1389 l 521 1215 l 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 868 1215 l 868 1042 l 347 1042 z "},"¸":{"ha":1389,"x_min":347,"x_max":868,"o":"m 868 347 l 868 174 l 694 174 l 694 347 l 868 347 m 347 174 l 694 174 l 694 0 l 347 0 l 347 174 z "},"ˆ":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 l 174 1042 z "},"¨":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 1215 l 174 1389 l 521 1389 l 521 1215 l 174 1215 m 694 1215 l 694 1389 l 1042 1389 l 1042 1215 l 694 1215 z "},"˙":{"ha":1389,"x_min":521,"x_max":868,"o":"m 521 1215 l 521 1389 l 868 1389 l 868 1215 l 521 1215 z "},"`":{"ha":1389,"x_min":521,"x_max":868,"o":"m 694 1389 l 694 1215 l 521 1215 l 521 1389 l 694 1389 m 868 1215 l 868 1042 l 694 1042 l 694 1215 l 868 1215 z "},"˝":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 1389 l 521 1389 l 521 1215 l 347 1215 l 347 1389 m 1042 1389 l 1042 1215 l 868 1215 l 868 1389 l 1042 1389 m 174 1215 l 347 1215 l 347 1042 l 174 1042 l 174 1215 m 694 1215 l 868 1215 l 868 1042 l 694 1042 l 694 1215 z "},"¯":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 1215 l 174 1389 l 1042 1389 l 1042 1215 l 174 1215 z "},"˛":{"ha":1389,"x_min":347,"x_max":868,"o":"m 694 347 l 521 347 l 521 521 l 694 521 l 694 347 m 521 347 l 521 174 l 347 174 l 347 347 l 521 347 m 868 174 l 868 0 l 521 0 l 521 174 l 868 174 z "},"˚":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 347 868 l 347 1042 l 174 1042 l 174 1215 l 347 1215 l 347 1389 l 868 1389 l 868 1215 l 1042 1215 l 1042 1042 l 868 1042 l 868 868 l 347 868 m 521 1042 l 694 1042 l 694 1215 l 521 1215 l 521 1042 z "},"˜":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 694 1215 l 868 1215 l 868 1042 l 521 1042 l 521 1215 l 347 1215 l 347 1389 l 694 1389 l 694 1215 m 1042 1389 l 1042 1215 l 868 1215 l 868 1389 l 1042 1389 m 174 1215 l 347 1215 l 347 1042 l 174 1042 l 174 1215 z "},"΄":{"ha":1389,"x_min":521,"x_max":868,"o":"m 868 1389 l 868 1215 l 694 1215 l 694 1389 l 868 1389 m 521 1215 l 694 1215 l 694 1042 l 521 1042 l 521 1215 z "},"΅":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 1389 l 347 1389 l 347 1215 l 174 1215 l 174 1389 m 694 1389 l 868 1389 l 868 1215 l 694 1215 l 694 1389 m 1215 1389 l 1215 1215 l 1042 1215 l 1042 1389 l 1215 1389 m 521 1215 l 694 1215 l 694 1042 l 521 1042 l 521 1215 z "},"":{"ha":1389,"x_min":174,"x_max":1215,"o":"m 174 174 l 174 1389 l 1215 1389 l 1215 174 l 174 174 m 521 694 l 1042 694 l 1042 1215 l 347 1215 l 347 1042 l 868 1042 l 868 868 l 521 868 l 521 694 m 521 347 l 694 347 l 694 521 l 521 521 l 521 347 z "},"":{"ha":1389,"x_min":174,"x_max":1042,"o":"m 174 174 l 174 347 l 521 347 l 521 521 l 1042 521 l 1042 174 l 174 174 z "}},"familyName":"Press Start 2P","ascender":1389,"descender":0,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-519,"xMin":-1125,"yMax":1389,"xMax":1389},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2012 The Press Start 2P Project Authors (cody@zone38.net), with Reserved Font Name \\"Press Start 2P\\"","fontFamily":"Press Start 2P","fontSubfamily":"Regular","uniqueID":"3.000;CYRE;PressStart2P-Regular","fullName":"Press Start 2P Regular","version":"Version 3.000","postScriptName":"PressStart2P-Regular","manufacturer":"CodeMan38","designer":"CodeMan38","manufacturerURL":"http://www.zone38.net/","designerURL":"http://www.zone38.net/","licence":"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL","licenceURL":"http://scripts.sil.org/OFL"},"cssFontWeight":"normal","cssFontStyle":"normal"}'),Es=[];class Ts extends vs{constructor(l={}){const t=l.components&&l.components.characterobject;switch(t&&(l.components.positionalobject=l.components.positionalobject||{},l.components.positionalobject=gs.extend(l.components.positionalobject,l.components.characterobject)),super(gs.extend(l,{type:"characterobject"})),this.fontName="helvetiker",this.letter="@",this.centered=!0,t&&(this.fontName=l.components.characterobject.fontName||"helvetiker",this.letter=l.components.characterobject.letter||"@",void 0!==l.components.characterobject.centered&&(this.centered=l.components.characterobject.centered)),this.fontName){case"mplus":this.font=Ms;break;case"jetbrains":this.font=zs;break;case"helvetiker":this.font=ws;break;case"pressStart":default:this.font=Ss}}save(){return gs.deep(super.save(),{characterobject:{fontName:this.fontName,letter:this.letter,centered:this.centered}})}createObject(){this.meshes=[];const l=this.scale*this.depth,t=new vo(this.font);let e=!1;for(const n of Es)if(n.parameters.options.font.data.familyName===t.data.familyName&&n.parameters.options.height===l&&n.letter===this.letter){this.geometry=n,e=!0;break}e||(this.geometry=new sr(this.letter,{font:t,size:.82*this.depth*this.size,height:l,curveSegments:24,bevelEnabled:!0,bevelThickness:.05,bevelSize:.05,bevelOffset:0,bevelSegments:1}),this.geometry.letter=this.letter,Es.push(this.geometry)),this.object=new oe(this.geometry,new hr({color:this.color})),this.object.originalColor=this.color,this.meshes.push(this.object),this.centered&&this.geometry.center(),this.updateObjectPosition(),this.object.parentEntity=this.parentEntity}updateObjectPosition(){this.hasObject()&&(this.object.position.set((this.x+this.xOffset)*this.width,(this.y+this.yOffset)*this.height,(this.z+this.zOffset)*this.depth-(this.depth-this.scale*this.depth)/2),this.object.rotation.set(Math.PI*this.xRot,Math.PI*this.yRot,Math.PI*this.zRot))}}class As extends _s{constructor(l={}){super(gs.extend(l,{baseType:"blocksMovement"}));const t=l.components&&void 0!==l.components.blocksMovement;if(this.blocksMovement=!1,t){const t=typeof l.components.blocksMovement;"boolean"===t?this.blocksMovement=l.components.blocksMovement:"object"===t&&l.components.blocksMovement&&(this.blocksMovement=l.components.blocksMovement.blocksMovement)}}save(){return{blocksMovement:this.blocksMovement}}}class Ls extends _s{constructor(l={}){super(gs.extend(l,{baseType:"walkable"}));const t=l.components&&void 0!==l.components.walkable;if(this.walkable=!1,t){const t=typeof l.components.walkable;"boolean"===t?this.walkable=l.components.walkable:"object"===t&&l.components.walkable&&(this.walkable=l.components.walkable.walkable)}}save(){return{walkable:this.walkable}}}class Cs extends _s{constructor(l={}){super(gs.extend(l,{baseType:"fov"}));const t=l.components&&l.components.fov;this.explored=!1,this.visible=!1,t&&(this.explored=l.components.fov.explored||!1,this.visible=l.components.fov.visible||!1)}save(){return{fov:{explored:this.explored}}}}class Rs extends _s{constructor(l={}){super(gs.extend(l,{baseType:"blocksFov"}));const t=l.components&&void 0!==l.components.blocksFov;if(this.blocksFov=!1,t){const t=typeof l.components.blocksFov;"boolean"===t?this.blocksFov=l.components.blocksFov:"object"===t&&l.components.blocksFov&&(this.blocksFov=l.components.blocksFov.blocksFov)}}save(){return{blocksFov:this.blocksFov}}}const Ps=Object.freeze({Floor:0,Wall:1,DecorativeBG:2,Decorative:2.05});class Is extends _s{constructor(l={}){super(gs.extend(l,{baseType:"openable"}));const t=l.components&&l.components.openable;this.isOpen=!1,this.openEntity=null,this.closedEntity=null,t&&(this.isOpen=l.components.openable.isOpen||!1,this.openEntity=l.components.openable.openEntity,this.closedEntity=l.components.openable.closedEntity)}save(){return{openable:{isOpen:this.isOpen,openEntity:this.openEntity,closedEntity:this.closedEntity}}}open(){if(!this.isOpen){this.isOpen=!0;const l=this.parentEntity.getComponent("positionalobject");return l&&(l.teardown(),this.parentEntity=Mm.createFromTemplate(this.openEntity,{components:{positionalobject:{x:l.x,y:l.y,z:l.z}}}),Bm.gameMap.tiles.get(Ps.Wall)[l.x][l.y]=this.parentEntity),!0}return!1}close(){if(this.isOpen){this.isOpen=!1;const l=this.parent.getComponent("positionalobject");return l&&(l.teardown(),this.parentEntity=Mm.create(this.closedEntity,{components:{positionalobject:{x:l.x,y:l.y,z:l.z}}}),Bm.gameMap.tiles.get(Ps.Wall)[l.x][l.y]=this.parent),!0}return!1}}class Ds extends _s{constructor(l={}){super(gs.extend(l,{baseType:"visibilityModifier"}));const t=l.components&&void 0!==l.components.visibilityModifier;if(this.modifier="+",this.amount=0,t){const t=l.components.visibilityModifier;t.modifier&&(this.modifier=t.modifier),this.amount=t.amount}}save(){return{visibilityModifier:{modifier:this.modifier,amount:this.amount}}}getVisibility(l){switch(this.modifier){case"+":default:return l+this.amount;case"-":return l-this.amount;case"*":return l*this.amount;case"/":return l/this.amount}}}class Ns extends _s{constructor(l={}){super(gs.extend(l,{baseType:"ai"}))}save(){return null}perform(){console.err("Not Implemented")}}class Os extends Ns{constructor(l={}){super(gs.extend(l,{type:"aiDead"})),this.previousAI="";const t=l.components.aiDead;t&&t.previousAI&&(this.previousAI=t.previousAI)}save(){return{aiDead:{previousAI:this.previousAI}}}perform(){}}var Bs=function(){this._tweens={},this._tweensAddedDuringUpdate={}};Bs.prototype={getAll:function(){return Object.keys(this._tweens).map(function(l){return this._tweens[l]}.bind(this))},removeAll:function(){this._tweens={}},add:function(l){this._tweens[l.getId()]=l,this._tweensAddedDuringUpdate[l.getId()]=l},remove:function(l){delete this._tweens[l.getId()],delete this._tweensAddedDuringUpdate[l.getId()]},update:function(l,t){var e=Object.keys(this._tweens);if(0===e.length)return!1;for(l=void 0!==l?l:ks.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var n=0;n<e.length;n++){var i=this._tweens[e[n]];i&&!1===i.update(l)&&(i._isPlaying=!1,t||delete this._tweens[e[n]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var Fs,ks=new Bs;ks.Group=Bs,ks._nextId=0,ks.nextId=function(){return ks._nextId++},"undefined"==typeof self&&"undefined"!=typeof process&&process.hrtime?ks.now=function(){var l=process.hrtime();return 1e3*l[0]+l[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?ks.now=self.performance.now.bind(self.performance):void 0!==Date.now?ks.now=Date.now:ks.now=function(){return(new Date).getTime()},ks.Tween=function(l,t){this._object=l,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=null,this._easingFunction=ks.Easing.Linear.None,this._interpolationFunction=ks.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=t||ks,this._id=ks.nextId()},ks.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(l,t){return this._valuesEnd=Object.create(l),void 0!==t&&(this._duration=t),this},duration:function(l){return this._duration=l,this},start:function(l){for(var t in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==l?"string"==typeof l?ks.now()+parseFloat(l):l:ks.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[t]instanceof Array){if(0===this._valuesEnd[t].length)continue;this._valuesEnd[t]=[this._object[t]].concat(this._valuesEnd[t])}void 0!==this._object[t]&&(this._valuesStart[t]=this._object[t],this._valuesStart[t]instanceof Array==0&&(this._valuesStart[t]*=1),this._valuesStartRepeat[t]=this._valuesStart[t]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(1/0),this},stopChainedTweens:function(){for(var l=0,t=this._chainedTweens.length;l<t;l++)this._chainedTweens[l].stop()},group:function(l){return this._group=l,this},delay:function(l){return this._delayTime=l,this},repeat:function(l){return this._repeat=l,this},repeatDelay:function(l){return this._repeatDelayTime=l,this},yoyo:function(l){return this._yoyo=l,this},easing:function(l){return this._easingFunction=l,this},interpolation:function(l){return this._interpolationFunction=l,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(l){return this._onStartCallback=l,this},onUpdate:function(l){return this._onUpdateCallback=l,this},onComplete:function(l){return this._onCompleteCallback=l,this},onStop:function(l){return this._onStopCallback=l,this},update:function(l){var t,e,n;if(l<this._startTime)return!0;for(t in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(l-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,n=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[t]){var i=this._valuesStart[t]||0,a=this._valuesEnd[t];a instanceof Array?this._object[t]=this._interpolationFunction(a,n):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?i+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[t]=i+(a-i)*n))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;if(0<this._repeat){for(t in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[t]&&(this._valuesStartRepeat[t]=this._valuesStartRepeat[t]+parseFloat(this._valuesEnd[t])),this._yoyo){var r=this._valuesStartRepeat[t];this._valuesStartRepeat[t]=this._valuesEnd[t],this._valuesEnd[t]=r}this._valuesStart[t]=this._valuesStartRepeat[t]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=l+this._repeatDelayTime:this._startTime=l+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,s=this._chainedTweens.length;o<s;o++)this._chainedTweens[o].start(this._startTime+this._duration);return!1}},ks.Easing={Linear:{None:function(l){return l}},Quadratic:{In:function(l){return l*l},Out:function(l){return l*(2-l)},InOut:function(l){return(l*=2)<1?.5*l*l:-.5*(--l*(l-2)-1)}},Cubic:{In:function(l){return l*l*l},Out:function(l){return--l*l*l+1},InOut:function(l){return(l*=2)<1?.5*l*l*l:.5*((l-=2)*l*l+2)}},Quartic:{In:function(l){return l*l*l*l},Out:function(l){return 1- --l*l*l*l},InOut:function(l){return(l*=2)<1?.5*l*l*l*l:-.5*((l-=2)*l*l*l-2)}},Quintic:{In:function(l){return l*l*l*l*l},Out:function(l){return--l*l*l*l*l+1},InOut:function(l){return(l*=2)<1?.5*l*l*l*l*l:.5*((l-=2)*l*l*l*l+2)}},Sinusoidal:{In:function(l){return 1-Math.cos(l*Math.PI/2)},Out:function(l){return Math.sin(l*Math.PI/2)},InOut:function(l){return.5*(1-Math.cos(Math.PI*l))}},Exponential:{In:function(l){return 0===l?0:Math.pow(1024,l-1)},Out:function(l){return 1===l?1:1-Math.pow(2,-10*l)},InOut:function(l){return 0===l?0:1===l?1:(l*=2)<1?.5*Math.pow(1024,l-1):.5*(2-Math.pow(2,-10*(l-1)))}},Circular:{In:function(l){return 1-Math.sqrt(1-l*l)},Out:function(l){return Math.sqrt(1- --l*l)},InOut:function(l){return(l*=2)<1?-.5*(Math.sqrt(1-l*l)-1):.5*(Math.sqrt(1-(l-=2)*l)+1)}},Elastic:{In:function(l){return 0===l?0:1===l?1:-Math.pow(2,10*(l-1))*Math.sin(5*(l-1.1)*Math.PI)},Out:function(l){return 0===l?0:1===l?1:Math.pow(2,-10*l)*Math.sin(5*(l-.1)*Math.PI)+1},InOut:function(l){return 0===l?0:1===l?1:(l*=2)<1?-.5*Math.pow(2,10*(l-1))*Math.sin(5*(l-1.1)*Math.PI):.5*Math.pow(2,-10*(l-1))*Math.sin(5*(l-1.1)*Math.PI)+1}},Back:{In:function(l){return l*l*(2.70158*l-1.70158)},Out:function(l){return--l*l*(2.70158*l+1.70158)+1},InOut:function(l){var t=2.5949095;return(l*=2)<1?l*l*((1+t)*l-t)*.5:.5*((l-=2)*l*((1+t)*l+t)+2)}},Bounce:{In:function(l){return 1-ks.Easing.Bounce.Out(1-l)},Out:function(l){return l<1/2.75?7.5625*l*l:l<2/2.75?7.5625*(l-=1.5/2.75)*l+.75:l<2.5/2.75?7.5625*(l-=2.25/2.75)*l+.9375:7.5625*(l-=2.625/2.75)*l+.984375},InOut:function(l){return l<.5?.5*ks.Easing.Bounce.In(2*l):.5*ks.Easing.Bounce.Out(2*l-1)+.5}}},ks.Interpolation={Linear:function(l,t){var e=l.length-1,n=e*t,i=Math.floor(n),a=ks.Interpolation.Utils.Linear;return t<0?a(l[0],l[1],n):1<t?a(l[e],l[e-1],e-n):a(l[i],l[e<i+1?e:i+1],n-i)},Bezier:function(l,t){for(var e=0,n=l.length-1,i=Math.pow,a=ks.Interpolation.Utils.Bernstein,r=0;r<=n;r++)e+=i(1-t,n-r)*i(t,r)*l[r]*a(n,r);return e},CatmullRom:function(l,t){var e=l.length-1,n=e*t,i=Math.floor(n),a=ks.Interpolation.Utils.CatmullRom;return l[0]===l[e]?(t<0&&(i=Math.floor(n=e*(1+t))),a(l[(i-1+e)%e],l[i],l[(i+1)%e],l[(i+2)%e],n-i)):t<0?l[0]-(a(l[0],l[0],l[1],l[1],-n)-l[0]):1<t?l[e]-(a(l[e],l[e],l[e-1],l[e-1],n-e)-l[e]):a(l[i?i-1:0],l[i],l[e<i+1?e:i+1],l[e<i+2?e:i+2],n-i)},Utils:{Linear:function(l,t,e){return(t-l)*e+l},Bernstein:function(l,t){var e=ks.Interpolation.Utils.Factorial;return e(l)/e(t)/e(l-t)},Factorial:(Fs=[1],function(l){var t=1;if(Fs[l])return Fs[l];for(var e=l;1<e;e--)t*=e;return Fs[l]=t}),CatmullRom:function(l,t,e,n,i){var a=.5*(e-l),r=.5*(n-t),o=i*i;return(2*t-2*e+a+r)*(i*o)+(-3*t+3*e-2*a-r)*o+a*i+t}}},"function"==typeof define&&define.amd?define([],(function(){return ks})):"undefined"!=typeof module&&"object"==typeof exports&&(module.exports=ks);class Hs{constructor(){this.raycaster=new Oo,this.mouse=new W,this.mouseDown=!1,window.addEventListener("mousemove",this),window.addEventListener("mousedown",this),window.addEventListener("mouseup",this),window.addEventListener("click",this),window.addEventListener("contextmenu",this)}teardown(){window.removeEventListener("mousemove",this),window.removeEventListener("mousedown",this),window.removeEventListener("mouseup",this),window.removeEventListener("click",this),window.removeEventListener("contextmenu",this)}handleEvent(l){switch(l.type){case"mousemove":this.onMouseMove(l);break;case"mousedown":this.onMouseDown(l);break;case"mouseup":this.onMouseUp(l);break;case"click":this.onLeftClick(l);break;case"contextmenu":this.onRightClick(l)}}handleInput(){}onMouseMove(l){}onMouseDown(l){this.mouseDown=!0}onMouseUp(l){this.mouseDown=!1}onLeftClick(l){}onRightClick(l){}getMouseIntersectingObjects(l){return this.mouse.x=l.clientX/Fm.canvasDom.offsetWidth*2-1,this.mouse.y=-l.clientY/Fm.canvasDom.offsetHeight*2+1,this.raycaster.setFromCamera(this.mouse,Fm.camera),this.raycaster.intersectObject(Fm.scene,!0)}}class Us extends Hs{constructor(){super()}}class Gs{constructor(l,t,e){this.text=l,this.color=t||"#333",this.bold=!1,this.italics=!1,e&&(this.bold=e.bold||!1,this.italics=e.italics||!1)}isEqual(l){return this.text===l.text&&this.color===l.color&&this.bold===l.bold&&this.italics===l.italics}}class Vs{constructor(l=[]){this.subMessages=l,this.count=1}isEqual(l){if(this.subMessages.length!==l.length)return!1;for(let t=0;t<this.subMessages.length;t++){const e=this.subMessages[t],n=l[t];if(!e.isEqual(n))return!1}return!0}getHtml(){const l=document.createElement("div");l.classList.add("message");for(const t of this.subMessages){const e=document.createElement("span");e.classList.add("message__text"),t.bold&&e.classList.add("message__bold"),t.italics&&e.classList.add("message__italics"),e.innerText=t.text,e.style.color=t.color,l.appendChild(e)}return this.count>1&&l.appendChild(this.getCountHtml()),l}getCountHtml(){const l=document.createElement("span");return l.classList.add("message__amount"),l.innerText="x"+this.count,l}}const Ws=new class{constructor(){this.messages=[],this.builder=[],this.consoleDom=document.createElement("div"),this.consoleDom.classList.add("console"),this.messagesDom=document.createElement("div"),this.messagesDom.classList.add("messages"),this.messagesInnerDom=document.createElement("div"),this.messagesInnerDom.classList.add("messages__inn"),this.messagesDom.appendChild(this.messagesInnerDom),this.consoleDom.appendChild(this.messagesDom)}text(l,t,e){return this.builder.push(new Gs(l,t,e)),this}build(l=!0){this.addMessage(this.builder.slice(0),l),this.builder=[]}addMessage(l,t=!0){if(t&&this.messages.length>0){const t=this.messages[this.messages.length-1];t.isEqual(l)?(t.count+=1,this.updateLastMessageCount(t)):(this.messages.push(new Vs(l)),this.addNewMessage())}else this.messages.push(new Vs(l)),this.addNewMessage()}updateLastMessageCount(l){const t=document.querySelectorAll(".message:last-child")[0],e=t.querySelectorAll(".message__amount")[0];e?e.innerText="x"+l.count:t.appendChild(l.getCountHtml())}addNewMessage(){const l=this.messages[this.messages.length-1];this.messagesInnerDom.appendChild(l.getHtml())}},js=new class{constructor(){this.dom=document.createElement("div"),this.dom.id="character-info",this.healthDom=document.createElement("div"),this.healthDom.classList.add("character-info__health"),this.healthBGDom=document.createElement("div"),this.healthBGDom.classList.add("character-info__healthbg"),this.healthBGDom.innerText="@",this.healthFGDom=document.createElement("div"),this.healthFGDom.classList.add("character-info__healthfg"),this.healthFGDom.innerText="@",this.healthTextDom=document.createElement("div"),this.healthTextDom.classList.add("character-info__healthtext"),this.healthDom.appendChild(this.healthBGDom),this.healthDom.appendChild(this.healthFGDom),this.healthDom.appendChild(this.healthTextDom),this.dom.appendChild(this.healthDom)}updateHealth(l,t){const e=l/t*80;this.healthFGDom.style.height=e+"%",this.healthTextDom.innerText=l+" / "+t}};class Xs extends _s{constructor(l={}){super(gs.extend(l,{baseType:"fighter"}));const t=l.components&&void 0!==l.components.fighter;if(this.hp=30,this.maxHp=30,this.defense=0,this.power=2,t){const t=l.components.fighter;void 0!==t.hp&&(this.hp=t.hp),void 0!==t.maxHp&&(this.maxHp=t.maxHp),void 0!==t.defense&&(this.defense=t.defense),void 0!==t.power&&(this.power=t.power)}}save(){return{fighter:{hp:this.hp,maxHp:this.maxHp,defense:this.defense,power:this.power}}}takeDamage(l){this.hp-=l,this.parentEntity===Bm.player&&js.updateHealth(this.hp,this.maxHp),this.hp<=0&&this.die()}die(){const l=this.parentEntity;l===Bm.player?(Ws.text("You died!","#f00"),Bm.setEventHandler(new Us)):Ws.text(l.name+" dies!","#ffa030");const t=l.getComponent("positionalobject");if(t){t.color="#BF0000",t.letter="%";const l={xRot:t.xRot,yRot:t.yRot,zRot:t.zRot,zOffset:t.zOffset},e={xRot:0,yRot:0,zRot:2*Math.random(),zOffset:0},n=new ks.Tween(l).to(e,200);n.start(),n.onUpdate((function(){t.xRot=l.xRot,t.yRot=l.yRot,t.zRot=l.zRot,t.zOffset=l.zOffset,t.updateObjectPosition(),Bm.needsMapUpdate=!0}))}const e=l.getComponent("blocksMovement");e&&(e.blocksMovement=!1);const n=l.getComponent("ai");if(n){const t=n.type,e=new Os({components:{aiDead:{previousAI:t}}});l.setComponent(e)}l.name="Remains of "+l.name,Ws.build()}}class Ys{constructor(){this.previousVisibleObjects=[],this.visibleObjects=[],this.visibleActors=[],this.oldObjects=[],this.newObjects=[],this.left=0,this.right=0,this.top=0,this.bottom=0}teardown(){this.previousVisibleObjects=[],this.visibleObjects=[],this.visibleActors=[],this.oldObjects=[],this.newObjects=[]}compute(l,t,e,n){this.previousVisibleObjects=this.visibleObjects,this.visibleObjects=[],this.visibleActors=[],this.oldObjects=[],this.newObjects=[],this.left=Math.max(0,l-n),this.right=Math.min(Bm.gameMap.width,l+n+1),this.top=Math.max(0,t-n),this.bottom=Math.min(Bm.gameMap.height,t+n+1)}addVisibleObject(l){-1===this.visibleObjects.indexOf(l)&&this.visibleObjects.push(l),-1===this.previousVisibleObjects.indexOf(l)&&this.newObjects.push(l)}addVisibleActor(l){-1===this.visibleActors.indexOf(l)&&this.visibleActors.push(l)}exploreTile(l,t,e,n,i=!1){const a=Bm.gameMap.tiles.entries();for(const i of a)if(i[0]>=e&&i[0]<=n){const e=i[1][l];if(e){const l=e[t];l&&this.addVisibleObject(l)}}if(!i){for(let e of Bm.gameMap.actors){const n=e.getComponent("positionalobject");n&&n.x===l&&n.y===t&&(this.addVisibleObject(e),this.addVisibleActor(e))}for(let e of Bm.gameMap.items){const n=e.getComponent("positionalobject");n&&n.x===l&&n.y===t&&this.addVisibleObject(e)}}}}class Js{constructor(l,t){this.y=l,this.x=t}greater(l,t){return this.y*t>this.x*l}greaterOrEqual(l,t){return this.y*t>=this.x*l}less(l,t){return this.y*t<this.x*l}lessOrEqual(l,t){return this.y*t<=this.x*l}}class Zs extends Ys{constructor(){super()}compute(l,t,e,n,i,a){super.compute(l,t,e,n),this.exploreTile(l,t,i,a);for(let r=0;r<8;r++)this.computeOctant(r,l,t,e,n,1,new Js(1,1),new Js(0,1),i,a)}computeOctant(l,t,e,n,i,a,r,o,s,m){for(;a<=i;a++){let h,c;if(1===r.x)h=a;else if(h=Math.round(((2*a-1)*r.y+r.x)/(2*r.x)),this.blocksLight(l,t,e,n,a,h,s,m))r.greaterOrEqual(2*h+1,2*a)&&!this.blocksLight(l,t,e,n,a,h+1,s,m)&&h++;else{let i=2*a;this.blocksLight(l,t,e,n,a+1,h+1,s,m)&&i++,r.greater(2*h+1,i)&&h++}0===o.y?c=0:(c=((2*a-1)*o.y+o.x)/(2*o.x),o.greaterOrEqual(2*c+1,2*a)&&this.blocksLight(l,t,e,n,a,c,s,m)&&!this.blocksLight(l,t,e,n,a,c+1,s,m)&&c++);let q=-1;for(let u=h;u>=c;u--){const d=this.blocksLight(l,t,e,n,a,u,s,m);if((d||(u!==h||r.greaterOrEqual(u,a))&&(u!==c||o.lessOrEqual(u,a)))&&this.setVisible(l,t,e,a,u,s,m),a!==i)if(d){if(0===q){const h=2*a,q=2*u+1;if(r.greater(q,h)){if(u===c){o=new Js(q,h);break}this.computeOctant(l,t,e,n,i,a+1,r,new Js(q,h),s,m)}else if(u===c)return}q=1}else{if(q>0){const l=2*a,t=2*u+1;if(o.greaterOrEqual(t,l))return;r=new Js(t,l)}q=0}}if(0!==q)break}}blocksLight(l,t,e,n,i,a,r,o){switch(l){case 0:t+=i,e-=a;break;case 1:t+=a,e-=i;break;case 2:t-=a,e-=i;break;case 3:t-=i,e-=a;break;case 4:t-=i,e+=a;break;case 5:t-=a,e+=i;break;case 6:t+=a,e+=i;break;case 7:t+=i,e+=a}let s=!1;if(Bm.gameMap.tiles.has(n)){const l=Bm.gameMap.tiles.get(n);if(l[t]){const n=l[t][e];if(n){const l=n.getComponent("blocksFov");l&&(s=l.blocksFov)}}}return s}setVisible(l,t,e,n,i,a,r){switch(l){case 0:t+=n,e-=i;break;case 1:t+=i,e-=n;break;case 2:t-=i,e-=n;break;case 3:t-=n,e-=i;break;case 4:t-=n,e+=i;break;case 5:t-=i,e+=n;break;case 6:t+=i,e+=n;break;case 7:t+=n,e+=i}this.exploreTile(t,e,a,r)}}class Qs extends es{constructor(l=0,t=0,e=0){super(),this.dx=l,this.dy=t,this.dz=e}perform(l){console.err("Not Implemented")}}class Ks extends Qs{constructor(l,t,e){super(l,t,e)}perform(l){const t=l.getComponent("positionalobject");if(!t)return new ns("Entity doesn't have a position.");const e=t.x+this.dx,n=t.y+this.dy,i=t.z+this.dz,a=Bm.gameMap;if(!a.isInBounds(e,n))return new ns("Location is outside the map!");const r=this.tryMoveTo(a,e,n,i);if(!(r instanceof ns))return t.move(this.dx,this.dy,this.dz),r;const o=this.tryMoveTo(a,e,n,i-1);if(!(o instanceof ns))return t.move(this.dx,this.dy,this.dz-1),o;const s=this.tryMoveTo(a,e,n,i+1);return s instanceof ns?r:(t.move(this.dx,this.dy,this.dz+1),s)}tryMoveTo(l,t,e,n){if(l.getBlockingActorAtLocation(t,e,n))return new ns("There's something in the way!");if(l.tiles.has(n)){const i=l.tiles.get(n)[t][e];if(i){const l=i.getComponent("blocksMovement");if(l&&l.blocksMovement)return new ns("There's a wall in the way!")}}if(!l.tiles.has(n-1))return new ns("No level to walk on!");const i=l.tiles.get(n-1)[t][e];if(!i)return new ns("No floor to walk on.");const a=i.getComponent("walkable");return a&&a.walkable?this:new ns("There's nothing to walk on.")}}class $s extends Qs{constructor(){super(0,0,0)}perform(l){if(Math.random()<.4)return new Ks(this.dx,this.dy,this.dz).perform(l);{const t=V.randInt(-1,1),e=V.randInt(-1,1);return new Ks(this.dx+t,this.dy+e,this.dz).perform(l)}}}class lm extends Qs{constructor(l,t,e){super(l,t,e)}perform(l){const t=l.getComponent("positionalobject");if(!t)return new ns("Entity doesn't have a position.");const e=t.x+this.dx,n=t.y+this.dy,i=t.z+this.dz,a=Bm.gameMap.getBlockingActorAtLocation(e,n,i);if(!a)return new ns("There's nothing to attack there!");{const e=l.getComponent("fighter"),n=a.getComponent("fighter");if(e&&n){const i=e.power-n.defense;let r,o,s,m;l===Bm.player?(r="You",o=""):(r=l.name,o="s"),a===Bm.player?(s="You",m="#C00"):(s=a.name,m="#999");let h=r+" attack"+o+" "+s;i>0?(Ws.text(h+" for "+i+" hit points.",m).build(),n.takeDamage(i)):Ws.text(h+", but does no damage.",m).build(),this.tweenAttack&&this.tweenAttack.stop(),this.tweenReturn&&this.tweenReturn.stop(),t.updateObjectPosition();const c=a.getComponent("positionalobject"),q=new tl(t.object.position.x,t.object.position.y,t.object.position.z),u=new tl(c.object.position.x,c.object.position.y,c.object.position.z),d=q.clone();this.tweenAttack=new ks.Tween(d).to(u,100),this.tweenAttack.onUpdate((function(){t.object.position.x=d.x,t.object.position.y=d.y,t.object.position.z=d.z,Bm.needsMapUpdate=!0})),this.tweenReturn=new ks.Tween(d).to(q,100),this.tweenReturn.onUpdate((function(){t.object.position.x=d.x,t.object.position.y=d.y,t.object.position.z=d.z,Bm.needsMapUpdate=!0})),this.tweenAttack.chain(this.tweenReturn),this.tweenAttack.start()}}}}class tm{constructor(l){this.content=[],this.scoreFunction=l}push(l){this.content.push(l),this.sinkDown(this.content.length-1)}pop(){const l=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.bubbleUp(0)),l}remove(l){const t=this.content.indexOf(l),e=this.content.pop();t!==this.content.length-1&&(this.content[t]=e,this.scoreFunction(e)<this.scoreFunction(l)?this.sinkDown(t):this.bubbleUp(t))}size(){return this.content.length}rescoreElement(l){this.sinkDown(this.content.indexOf(l))}sinkDown(l){const t=this.content[l];for(;l>0;){const e=(l+1>>1)-1,n=this.content[e];if(!(this.scoreFunction(t)<this.scoreFunction(n)))break;this.content[e]=t,this.content[l]=n,l=e}}bubbleUp(l){const t=this.content.length,e=this.content[l],n=this.scoreFunction(e);for(;;){const i=l+1<<1,a=i-1;let r,o=null;if(a<t){const l=this.content[a];r=this.scoreFunction(l),r<n&&(o=a)}if(i<t){const l=this.content[i];this.scoreFunction(l)<(null===o?n:r)&&(o=i)}if(null===o)break;this.content[l]=this.content[o],this.content[o]=e,l=o}}}class em{constructor(){}static pathTo(l){let t=l;const e=[];for(;t.parent;)e.unshift(t),t=t.parent;return e}static getHeap(){return new tm((function(l){return l.f}))}static search(l,t,e,n){l.cleanDirty(),n=n||{},this.heuristicType=n.heuristic||"manhattan";const i=n.closest||!1,a=this.getHeap();let r=t;for("manhattan"===this.heuristicType?t.h=this.heuristicManhattan(t,e):"diagonal"===this.heuristicType&&this.heuristicDiagonal(t,e),l.markDirty(t),a.push(t);a.size()>0;){const t=a.pop();if(t===e)return this.pathTo(t);t.closed=!0;const n=l.neighbors(t);for(var o=0,s=n.length;o<s;++o){let s=n[o];if(s.closed||s.isWall())continue;const m=t.g+s.getCost(t),h=s.visited;(!h||m<s.g)&&(s.visited=!0,s.parent=t,"manhattan"===this.heuristicType?s.h=s.h||this.heuristicManhattan(s,e):"diagonal"===this.heuristicType&&(s.h=s.h||this.heuristicDiagonal(s,e)),s.g=m,s.f=s.g+s.h,l.markDirty(s),i&&(s.h<r.h||s.h===r.h&&s.g<r.g)&&(r=s),h?a.rescoreElement(s):a.push(s))}}return i?this.pathTo(r):[]}static heuristicManhattan(l,t){return Math.abs(t.x-l.x)+Math.abs(t.y-l.y)}static heuristicDiagonal(l,t){const e=Math.sqrt(2),n=Math.abs(t.x-l.x),i=Math.abs(t.y-l.y);return 1*(n+i)+(e-2)*Math.min(n,i)}static cleanNode(l){l.f=0,l.g=0,l.h=0,l.visited=!1,l.closed=!1,l.parent=null}}class nm{constructor(l,t,e){this.x=l,this.y=t,this.weight=e}toString(){return"["+this.x+" "+this.y+"]"}getCost(l){return l&&l.x!==this.x&&l.y!==this.y?1.41421*this.weight:this.weight}isWall(){return 0===this.weight}}class im{constructor(l,t){t=t||{},this.nodes=[],this.diagonal=!!t.diagonal,this.grid=[];for(let t=0;t<l.length;t++){this.grid[t]=[];for(let e=0,n=l[t];e<n.length;e++){const l=new nm(t,e,n[e]);this.grid[t][e]=l,this.nodes.push(l)}}this.init()}init(){this.dirtyNodes=[];for(let l=0;l<this.nodes.length;l++)em.cleanNode(this.nodes[l])}cleanDirty(){for(let l=0;l<this.dirtyNodes.length;l++)em.cleanNode(this.dirtyNodes[l]);this.dirtyNodes=[]}markDirty(l){this.dirtyNodes.push(l)}neighbors(l){const t=[],e=l.x,n=l.y,i=this.grid;return i[e-1]&&i[e-1][n]&&t.push(i[e-1][n]),i[e+1]&&i[e+1][n]&&t.push(i[e+1][n]),i[e]&&i[e][n-1]&&t.push(i[e][n-1]),i[e]&&i[e][n+1]&&t.push(i[e][n+1]),this.diagonal&&(i[e-1]&&i[e-1][n-1]&&t.push(i[e-1][n-1]),i[e+1]&&i[e+1][n-1]&&t.push(i[e+1][n-1]),i[e-1]&&i[e-1][n+1]&&t.push(i[e-1][n+1]),i[e+1]&&i[e+1][n+1]&&t.push(i[e+1][n+1])),t}toString(){const l=[],t=this.grid;for(let e=0;e<t.length;e++){const n=[],i=t[e];for(let l=0;l<i.length;l++)n.push(i[l].weight);l.push(n.join(" "))}return l.join("\n")}}class am extends es{constructor(){super()}perform(l){}}class rm extends Qs{constructor(l,t,e){super(l,t,e)}perform(l){const t=l.getComponent("positionalobject");if(!t)return new ns("Entity doesn't have a position.");const e=t.x+this.dx,n=t.y+this.dy,i=Bm.gameMap;if(!i.isInBounds(e,n))return new ns("Location is outside the map!");const a=i.tiles.get(Ps.Wall)[e][n];if(a){const l=a.getComponent("openable");if(l)return l.open()?this:new ns("That cannot be opened.")}return new ns("There's nothing to open there!")}}class om extends Qs{constructor(l,t,e){super(l,t,e)}perform(l){const t=l.getComponent("positionalobject");if(!t)return new ns("Entity doesn't have a position.");const e=t.x+this.dx,n=t.y+this.dy,i=t.z+this.dz;if(Bm.gameMap.getBlockingActorAtLocation(e,n,i))return new lm(this.dx,this.dy,this.dz).perform(l);{const t=Bm.gameMap.tiles.get(Ps.Wall)[e];if(t){const e=t[n];if(e){const t=e.getComponent("openable");if(t&&!t.isOpen)return new rm(this.dx,this.dy,this.dz).perform(l)}return new Ks(this.dx,this.dy,this.dz).perform(l)}return new ns("Nowhere to move.")}}}class sm extends Ns{constructor(l={}){super(gs.extend(l,{type:"aiMeleeChase"})),this.fov=new Zs,this.chaseLocation=null}save(){return{aiMeleeChase:{}}}perform(){const l=this.parentEntity,t=l.getComponent("positionalobject");if(t){this.fov.compute(t.x,t.y,t.z,5,t.z-10,t.z+10);let e=[],n=null;const i=l.getComponent("faction");if(i){const l=i.enemies;for(const i of this.fov.visibleActors)if(i.isAlive()){const a=i.getComponent("positionalobject"),r=i.getComponent("faction");if(a&&r)for(const o of r.factions)if(l.indexOf(o)>-1){const l=Math.abs(a.x-t.x),r=Math.abs(a.y-t.y),o=Math.max(l,r);null===n||o<n?(e=[],e.push(i),n=o):o===n&&e.push(i);break}}}let a;if(1===e.length?a=e[0]:e.length>1&&(a=e[V.randInt(0,e.length-1)]),a){const e=a.getComponent("positionalobject");if(this.chaseLocation=new tl(e.x,e.y,e.z),n<=1)return new lm(e.x-t.x,e.y-t.y,e.z-t.z).perform(l)}else if(null!==this.chaseLocation&&this.chaseLocation.x===t.x&&this.chaseLocation.y===t.y&&this.chaseLocation.z===t.z&&(this.chaseLocation=null),null===this.chaseLocation)return(new $s).perform(l);const r=Bm.gameMap,o=Array(r.width).fill().map((()=>Array(r.height).fill(0)));for(let l=this.fov.left;l<this.fov.right;l++)for(let e=this.fov.top;e<this.fov.bottom;e++){const n=r.tiles.get(t.z)[l][e];if(n){const l=n.getComponent("blocksMovement");if(l&&l.blocksMovement)continue}if(!r.tiles.has(t.z-1))continue;const i=r.tiles.get(t.z-1)[l][e];if(i){const t=i.getComponent("walkable");t&&t.walkable&&(o[l][e]+=10)}}for(const l of this.fov.visibleActors)if(l.isAlive()){const t=l.getComponent("positionalobject");t&&(o[t.x][t.y]+=100)}const s=new im(o,{diagonal:!0}),m=s.grid[t.x][t.y],h=s.grid[this.chaseLocation.x][this.chaseLocation.y],c=em.search(s,m,h);if(c&&c.length>0){const e=c.shift();return new om(e.x-t.x,e.y-t.y,t.z).perform(l)}return(new am).perform(l)}}}class mm extends _s{constructor(l={}){super(gs.extend(l,{baseType:"faction"}));const t=l.components&&void 0!==l.components.faction;if(this.factions=[],this.enemies=[],t){const t=l.components.faction;t.factions&&this.setFactions(t.factions.split(",")),t.enemies&&this.setEnemies(t.enemies.split(","))}}setFactions(l){for(const t of l)this.factions.push(t.trim())}setEnemies(l){for(const t of l)this.enemies.push(t.trim())}save(){return{faction:{factions:this.factions.toString(),enemies:this.enemies.toString()}}}}const hm=new class{constructor(){this.types=new Map,this.load(new sm),this.load(new Rs),this.load(new As),this.load(new Ts),this.load(new mm),this.load(new Xs),this.load(new Cs),this.load(new Is),this.load(new bs),this.load(new Ds),this.load(new Ls)}load(l){this.types.set(l.type,l)}create(l,t,e){return new(0,this.types.get(t).constructor)(e)}};class cm{constructor(l){this.type=l.type||"entity",this.name=l.name,this.componentArray=[],this.components={},l.components&&this.loadComponents(l,l.components)}loadComponents(l,t){const e=this;Object.keys(t).forEach((function(t){const n=hm.types.get(t);if(n){const i=n.baseType;e.getComponent(i)||e.setComponent(hm.create(this,t,l))}}))}setComponent(l){l instanceof _s||console.error("Invalid component: ",l),l.parentEntity=this,this.components[l.baseType]=l,this.componentArray.push(l)}getComponent(l){return this.components[l]}removeComponent(l){if(this.components[l]){this.components[l]=void 0;for(const t of this.componentArray)if(t.type===l){const l=this.componentArray.indexOf(t);this.componentArray.splice(l,1);break}}}save(){let l={type:this.type,name:this.name,components:{}};for(const t of this.componentArray){const e=t.save();null!==e&&gs.deep(l.components,e)}return l}}class qm extends cm{constructor(l){super(l)}}class um extends qm{constructor(l={}){super(gs.deep(um.getDefaultTemplate(),l))}static getDefaultTemplate(){return{type:"solidtile",components:{solidobject:{},walkable:!0,blocksMovement:!0,blocksFov:!0}}}}class dm extends qm{constructor(l={}){super(gs.deep(dm.getDefaultTemplate(),l))}static getDefaultTemplate(){return{type:"charactertile",components:{characterobject:{fontName:"pressStart"},walkable:!1,blocksMovement:!0,blocksFov:!0}}}}class pm extends cm{constructor(l={}){super(gs.deep(pm.getDefaultTemplate(),l))}static getDefaultTemplate(){return{type:"actor",components:{characterobject:{scale:.1,fontName:"helvetiker",xRot:.5,yRot:.25,zOffset:.5},blocksMovement:!0,fighter:{}}}}isAlive(){const l=this.getComponent("fighter");return l&&l.hp>0}}class xm extends cm{constructor(l={}){super(gs.deep(xm.getDefaultTemplate(),l))}static getDefaultTemplate(){return{type:"item",components:{characterobject:{scale:.1,font:"helvetiker"}}}}}const fm=JSON.parse('[{"type":"actor","name":"Player","components":{"characterobject":{"letter":"@","color":"#ffffff"},"faction":{"factions":"player","enemies":"monsters"},"fighter":{"hp":30,"defense":2,"power":5}}}]'),_m=JSON.parse('[{"type":"actor","name":"Orc","components":{"characterobject":{"letter":"o","color":"#3f7f3f"},"faction":{"factions":"monsters","enemies":"player"},"aiMeleeChase":{},"fighter":{"hp":10,"defense":1,"power":4}}},{"type":"actor","name":"Troll","components":{"characterobject":{"letter":"T","color":"#007f00"},"faction":{"factions":"monsters","enemies":"player"},"aiMeleeChase":{},"fighter":{"hp":16,"defense":1,"power":4}}},{"type":"actor","name":"Ant","components":{"characterobject":{"letter":"a","color":"#000000"},"faction":{"factions":"monsters","enemies":"player"},"aiMeleeChase":{}}},{"type":"actor","name":"Red Dragon","components":{"characterobject":{"letter":"D","color":"#ff0000"},"faction":{"factions":"monsters","enemies":"player"},"aiMeleeChase":{}}},{"type":"actor","name":"Goblin","components":{"characterobject":{"letter":"g","color":"#3f7f3f"},"faction":{"factions":"monsters","enemies":"player"},"aiMeleeChase":{}}}]'),gm=JSON.parse('[{"type":"actor","name":"Shop Owner","components":{"characterobject":{"letter":"$","color":"#ffff00"},"faction":{"factions":"npc"},"aiMeleeChase":{}}}]'),vm=JSON.parse('[{"type":"solidtile","name":"Floor","components":{"solidobject":{"color":"#333333"}}},{"type":"solidtile","name":"Grass Floor","components":{"solidobject":{"color":"#567d46"}}},{"type":"charactertile","name":"Grass","components":{"characterobject":{"fontName":"mplus","letter":"░","color":"#567d46","scale":"0.1, 0.75","size":0.85},"blocksMovement":false,"blocksFov":false}},{"type":"charactertile","name":"Wall","components":{"characterobject":{"letter":"#","color":"#666666"}}},{"type":"charactertile","name":"Door","components":{"characterobject":{"letter":"+","color":"#964b00"},"blocksMovement":true,"blocksFov":true,"openable":{"isOpen":false,"openEntity":"Open Door","closedEntity":"Door"}}},{"type":"charactertile","name":"Open Door","components":{"characterobject":{"letter":"/","color":"#964b00"},"blocksMovement":false,"blocksFov":false,"openable":{"isOpen":true,"openEntity":"Open Door","closedEntity":"Door"}}},{"type":"charactertile","name":"Stairs Up","components":{"characterobject":{"letter":">","color":"#ffffff","scale":".75"},"blocksMovement":false}},{"type":"charactertile","name":"Water","components":{"characterobject":{"letter":"≈","color":"#3333cc","scale":".7"},"blocksMovement":false,"blocksFov":false,"visibilityModifier":{"modifier":"*","amount":0.5}}},{"type":"charactertile","name":"Tree Trunk","components":{"characterobject":{"fontName":"mplus","letter":"⚫","color":"#964b00","size":0.85}}},{"type":"charactertile","name":"Tree Leaves","components":{"characterobject":{"fontName":"mplus","letter":"░","color":"#618a3d","size":0.85}}},{"type":"charactertile","name":"Bench","components":{"characterobject":{"fontName":"mplus","letter":"厂","color":"#964b00","size":0.85,"xRot":1.5,"yRot":0.5,"zRot":0,"zOffset":0.47},"walkable":true,"blocksFov":false}},{"type":"charactertile","name":"Stone Bench","components":{"characterobject":{"letter":"п","color":"#bbb","xRot":0.5,"yRot":0.5},"walkable":true,"blocksFov":false}},{"type":"charactertile","name":"Bench Armrest Right","components":{"characterobject":{"fontName":"mplus","letter":"巳","color":"#964b00","size":0.85,"scale":0.1,"zOffset":0.5,"xOffset":-0.51,"xRot":0.5,"yRot":0.5,"zRot":0},"blocksFov":false,"blocksMovement":false}},{"type":"charactertile","name":"Bench Armrest Left","components":{"characterobject":{"fontName":"mplus","letter":"巳","color":"#964b00","size":0.85,"scale":0.1,"zOffset":0.5,"xOffset":0.51,"xRot":0.5,"yRot":0.5,"zRot":0},"blocksFov":false,"blocksMovement":false}},{"type":"solidtile","name":"Backing","components":{"solidobject":{"scale":0.05,"color":"#000000"}}},{"type":"charactertile","name":"Art","components":{"characterobject":{"scale":0.1,"xOffset":-0.5,"yOffset":-0.65,"zOffset":-0.05,"centered":false},"blocksFov":false,"blocksMovement":false}},{"type":"charactertile","name":"Stone","components":{"characterobject":{"fontName":"mplus","letter":"▪","scale":0.05,"color":"#666","xOffset":"-0.25, 0.25","yOffset":"-0.25, 0.25","zRot":"0, 2"},"blocksFov":false,"blocksMovement":false}}]'),ym=JSON.parse('[{"type":"item","name":"Tower Shield","components":{"characterobject":{"letter":"]","color":"#ccc"}}}]'),bm=JSON.parse('[{"type":"item","name":"^","components":{"characterobject":{"letter":"^","color":"#ffffff"}}}]'),wm=JSON.parse('[{"type":"item","name":"Healing Potion","components":{"characterobject":{"letter":"!","color":"#990f02"}}}]'),Mm=new class{constructor(){this.types=new Map,this.templates=new Map,this.load(new um),this.load(new dm),this.load(new pm),this.load(new xm),this.loadTemplates()}load(l){this.types.set(l.type,l)}create(l,t={}){const e=JSON.parse(l);return new(this.types.get(e.type).constructor)(gs.deep(e,t))}loadTemplates(){this.loadTemplate(fm),this.loadTemplate(_m),this.loadTemplate(gm),this.loadTemplate(vm),this.loadTemplate(ym),this.loadTemplate(bm),this.loadTemplate(wm)}loadTemplate(l){for(const t of l){const l=t.name;this.templates.has(l)?console.error("Template for entity '"+l+"' already exists."):this.templates.set(l,JSON.stringify(t))}}createFromTemplate(l,t={}){if(this.templates.has(l)){const e=this.templates.get(l);return this.create(e,t)}return null}},zm=new class{constructor(){this.dom=document.createElement("div"),this.dom.classList.add("details")}updatePlayerDetails(){this.updatePositionDetails(Bm.player,!0)}updatePositionDetails(l,t=!1){const e=l.getComponent("positionalobject"),n=e.x,i=e.y,a=e.z;let r="Looking at: X:"+n+" - Y:"+i+"\n";const o=Bm.gameMap.tiles;for(let l=a-1;l<=a;l++)if(o.get(l)&&o.get(l)[n]){const t=o.get(l)[n][i];t&&(r+=t.name+"\n")}for(const l of Bm.gameMap.actors){if(t&&l===Bm.player)continue;const e=l.getComponent("positionalobject");e&&n===e.x&&i===e.y&&Math.abs(a-e.z)<2&&(r+=e.letter+": "+l.name+"\n")}for(const l of Bm.gameMap.items){const t=l.getComponent("positionalobject");t&&n===t.x&&i===t.y&&Math.abs(a-t.z)<2&&(r+=t.letter+": "+l.name+"\n")}let s=new Map;for(const l of Bm.fov.visibleActors){if(l===Bm.player||!l.isAlive())continue;const t=l.getComponent("positionalobject");if(t){const e=t.letter+": "+l.name;if(s.has(e)){const l=s.get(e);s.set(e,l+1)}else s.set(e,1)}}s.size>0&&(r+="\nNearby:\n");for(const l of s.entries()){const t=l[0],e=l[1];r+=t,e>1&&(r+=" x"+e),r+="\n"}this.dom.innerText=r}};class Sm{constructor(l,t){this.width=l,this.height=t,this.init()}init(){this.tiles=new Map;for(let l=-1;l<=2;l++)this.tiles.set(l,fs.create2dArray(this.width));this.actors=[],this.items=[]}create(){}teardown(){Bm.fov.teardown(),Bm.airFov.teardown();const l=this.tiles.entries();for(const t of l){const l=t[1];for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++){const n=l[t][e];if(n){const l=n.getComponent("positionalobject");l&&l.teardown()}}}for(const l of this.actors){const t=l.getComponent("positionalobject");t&&t.teardown()}for(const l of this.items){const t=l.getComponent("positionalobject");t&&t.teardown()}}save(l){let t={width:this.width,height:this.height,tiles:{}};const e=this.tiles.entries();for(const l of e){const e=new Map;let n="",i=65;for(let t=0;t<this.width;t++)for(let a=0;a<this.height;a++){const r=l[1][t][a];if(r){const l=JSON.stringify(r.save());e.has(l)||e.set(l,i),n+=String.fromCharCode(e.get(l)),i++," "===String.fromCharCode(i)&&i++}else n+=" "}const a=l[0];t.tiles[a]={},t.tiles[a].key=n,t.tiles[a].map={};const r=e.entries();for(const l of r)t.tiles[a].map[String.fromCharCode(l[1])]=l[0]}let n=[];for(const l of this.actors)n.push(JSON.stringify(l.save()));t.actors=n;let i=[];for(const l of this.items)i.push(JSON.stringify(l.save()));t.items=i,localStorage.setItem(l,JSON.stringify(t))}load(l){this.teardown();const t=localStorage.getItem(l);if(t){const l=JSON.parse(t);this.width=l.width,this.height=l.height,this.init();const e=l.tiles,n=this.tiles.entries();for(const l of n){const t=l[1],n=e[l[0]];if(n){const e=n.key,i=n.map;for(let n=0;n<this.width;n++)for(let a=0;a<this.height;a++){const r=i[e[n*this.height+a]];r&&(t[n][a]=Mm.create(r,{components:{positionalobject:{x:n,y:a,z:l[0]}}}))}}}const i=l.actors;for(const l of i){const t=Mm.create(l);"Player"===t.name&&(Bm.player=t),this.actors.push(t)}const a=l.items;for(const l of a){const t=Mm.create(l);this.items.push(t)}Bm.player.getComponent("positionalobject").setVisible(),Fm.updateCameraPosition(Bm.player)}}isInBounds(l,t){return 0<=l&&l<this.width&&0<=t&&t<this.height}reveal(){const l=this.tiles.entries();for(const t of l)for(let l=0;l<this.width;l++)for(let e=0;e<this.height;e++){const n=t[1][l][e];if(n){const l=n.getComponent("positionalobject");l&&l.setVisible()}}}updateFOV(l,t,e,n){Bm.fov.compute(l,t,e,n,e-2,e+1),Bm.airFov.compute(l,t,e,2*n,e+2,e+8)}draw(l,t,e){this.drawItemsInFov(Bm.fov,l,t,e),this.drawItemsInFov(Bm.airFov,l,t,e)}drawItemsInFov(l,t,e,n){const i=l.newObjects;for(const l of i)if(l instanceof qm){const t=l.getComponent("fov");t?(t.explored=!0,t.visible=!0):l.setComponent(new Cs({components:{fov:{explored:!0,visible:!0}}}))}for(const t of l.previousVisibleObjects)if(-1===l.visibleObjects.indexOf(t)){const e=t.getComponent("fov");e&&(e.visible=!1),l.oldObjects.push(t)}for(const l of i){const t=l.getComponent("positionalobject");t&&(t.isVisible()?t.resetColor():(t.setVisible(),Fm.scene.add(t.object)))}const a=l.visibleObjects;for(const l of a)if(l instanceof qm){const i=l.getComponent("positionalobject");i&&this.setTransparency(i,t,e,n)}const r=l.oldObjects;for(const l of r){const i=l.getComponent("positionalobject");i&&(this.setTransparency(i,t,e,n),i.hasObject()&&i.shiftColor(.5))}}setTransparency(l,t,e,n){if(l.z>=n){const i=Math.abs(t-l.x),a=Math.abs(e-l.y);l.z>n?l.x>=t&&l.y<=e&&Math.max(i,a)<l.z+3?l.z>n+1?l.setTransparency(0):l.setTransparency(.1):l.setTransparency(1):l.z<=n+1&&i<=1&&a<=1?l.setTransparency(.5):l.setTransparency(1)}else l.setTransparency(1)}getBlockingActorAtLocation(l,t,e){let n=null;for(const i of this.actors){const a=i.getComponent("positionalobject");if(a&&l===a.x&&t===a.y&&e===a.z){const l=i.getComponent("blocksMovement");if(l&&l.blocksMovement){n=i;break}}}return n}addPlayer(l,t,e=1){const n={components:{positionalobject:{x:l,y:t,z:e}}};Bm.player=Mm.createFromTemplate("Player",n),Bm.gameMap.actors.push(Bm.player),Bm.player.getComponent("positionalobject").setVisible(),Fm.updateCameraPosition(Bm.player);const i=Bm.player.getComponent("fighter");js.updateHealth(i.hp,i.maxHp),zm.updatePlayerDetails()}}class Em extends Sm{constructor(){super(35,15),this.floor=["###################################","###################################","###################################","#####≈≈############################","#####≈≈############################","###################################","###################################","###################################","###################################","###################################","###################################","###################################","###################################","###################################","###################################"],this.wallthis.overlay=["###################################","########## RoguelikeDev ######v5_0#","###################################","############ does the ####2021#6-8#","###################################","### Complete Roguelike Tutorial ###","#####..############################","#####..############################","###....##########################.#","###....###################....###.#","###....###########.....###....###.#","###....................#.#........#","###.......####.###.....###....#####","##############.###########....#####","##############.####################"]}init(){super.init(),this.tiles.set(Ps.Decorative,fs.create2dArray(this.width))}create(){super.create();const l=[16738009,16738047,14247679,11691775,9201407,6711039,6730495,6740479,6750169,6750130,6750054,11730790,14286694,16777062,16767334,16757350,16747622,16737932,16737970,16738009,16738047,14247679,11691775,9201407,6711039,65471,65408,65280,8453888,16776960,16760576,16744448,3355443,3355443,3355443,3355443,3355443,3355443,3355443,41945,55769,55715,55660,55552,7133440,10737920,14276864,14263040,14248960,14235136,14221312,3355443,3355443,3355443,3355443];let t=0;for(let e=0;e<this.height;e++)for(let n=0;n<this.width;n++){switch(this.floor[this.height-e-1].charAt(n)){case"#":this.tiles.get(-1)[n][e]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:n,y:e,z:-1}}}),this.tiles.get(Ps.Floor)[n][e]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:n,y:e,z:0}}});break;case"≈":this.tiles.get(-1)[n][e]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:n,y:e,z:-1}}}),this.tiles.get(Ps.Floor)[n][e]=Mm.createFromTemplate("Water",{components:{positionalobject:{x:n,y:e,z:0}}})}switch(this.wall[this.height-e-1].charAt(n)){case"#":case"=":this.tiles.get(Ps.Wall)[n][e]=Mm.createFromTemplate("Wall",{components:{positionalobject:{x:n,y:e,z:1}}});break;case"+":this.tiles.get(Ps.Wall)[n][e]=Mm.createFromTemplate("Door",{components:{positionalobject:{x:n,y:e,z:1}}});break;case">":this.tiles.get(Ps.Wall)[n][e]=Mm.createFromTemplate("Stairs Up",{components:{positionalobject:{x:n,y:e,z:1}}})}let i=this.overlay[this.height-e-1].charAt(n);"#"!==i&&("."!==i&&(this.tiles.get(Ps.DecorativeBG)[n][e]=Mm.createFromTemplate("Backing",{components:{positionalobject:{x:n,y:e,z:2}}}))," "!==i&&"."!==i&&("_"===i&&(i="."),this.tiles.get(Ps.Decorative)[n][e]=Mm.createFromTemplate("Art",{components:{characterobject:{x:n,y:e,z:2.05,letter:i,color:l[t]}}}),t++))}this.addPlayer(21,3),Bm.gameMap.actors.push(Mm.createFromTemplate("Ant",{components:{positionalobject:{x:27,y:4,z:1}}})),Bm.gameMap.actors.push(Mm.createFromTemplate("Red Dragon",{components:{positionalobject:{x:18,y:4,z:1}}})),Bm.gameMap.actors.push(Mm.createFromTemplate("Goblin",{components:{positionalobject:{x:5,y:2,z:1}}})),Bm.gameMap.items.push(Mm.createFromTemplate("Healing Potion",{components:{positionalobject:{x:3,y:5,z:1}}})),Bm.gameMap.items.push(Mm.createFromTemplate("^",{components:{positionalobject:{x:6,y:5,z:1}}})),Bm.gameMap.items.push(Mm.createFromTemplate("Tower Shield",{components:{positionalobject:{x:28,y:1,z:1}}}))}}class Tm{constructor(l,t,e,n){this.x1=l,this.y1=t,this.x2=l+e,this.y2=t+n}getCenterX(){return Math.round((this.x1+this.x2)/2)}getCenterY(){return Math.round((this.y1+this.y2)/2)}intersects(l){return this.x1<=l.x2&&this.x2>=l.x1&&this.y1<=l.y2&&this.y2>=l.y1}createRoom(l){const t=Math.max(0,this.x1),e=Math.min(l.width,this.x2+1),n=Math.max(0,this.y1),i=Math.min(l.height,this.y2+1);for(let a=t;a<e;a++)for(let t=n;t<i;t++){const e=l.tiles.get(Ps.Floor)[a][t];e||(l.tiles.get(Ps.Floor)[a][t]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:a,y:t,z:0}}}));const n=(a===this.x1||a===this.x2)&&t>=this.y1&&t<=this.y2,i=(t===this.y1||t===this.y2)&&a>=this.x1&&a<=this.x2,r=l.tiles.get(Ps.Wall)[a][t];i||n?e||r||(l.tiles.get(Ps.Wall)[a][t]=Mm.createFromTemplate("Wall",{components:{positionalobject:{x:a,y:t,z:1}}})):r&&(l.tiles.get(Ps.Wall)[a][t]=null)}}placeEntities(l){const t=V.randInt(0,l);for(let l=0;l<t;l++){const l=V.randInt(this.x1+1,this.x2-1),t=V.randInt(this.y1+1,this.y2-1);if(!Bm.gameMap.getBlockingActorAtLocation(l,t,1)){const e={components:{positionalobject:{x:l,y:t,z:1}}};let n;n=Math.random()<.8?Mm.createFromTemplate("Orc",e):Mm.createFromTemplate("Troll",e),Bm.gameMap.actors.push(n)}}}}class Am{constructor(){}static tunnelBetween(l,t,e,n,i){let a,r;Math.random()<.5?(a=n,r=e):(a=t,r=i),this.bresenham(l,t,e,a,r),this.bresenham(l,a,r,n,i)}static bresenham(l,t,e,n,i){if(t===n){if(e===i)return;let n=e,a=i;e>i&&(n=i,a=e);for(let e=t-1;e<=t+1;e++)for(let i=n;i<=a;i++)this.bresenhamCreateTiles(l,e===t,e,i)}else{let i=t,a=n;t>n&&(i=n,a=t);for(let t=e-1;t<=e+1;t++)for(let n=i;n<=a;n++)this.bresenhamCreateTiles(l,t===e,n,t)}}static bresenhamCreateTiles(l,t,e,n){t?l.tiles.get(Ps.Wall)[e][n]&&(l.tiles.get(Ps.Wall)[e][n]=null):l.tiles.get(Ps.Floor)[e][n]||(l.tiles.get(Ps.Wall)[e][n]=Mm.createFromTemplate("Wall",{components:{positionalobject:{x:e,y:n,z:1}}})),l.tiles.get(Ps.Floor)[e][n]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:e,y:n,z:0}}})}}class Lm extends Sm{constructor(l,t,e={}){super(l,t),this.maxRooms=e.maxRooms||30,this.roomMinSize=e.roomMinSize||6,this.roomMaxSize=e.roomMaxSize||10,this.maxMonstersPerRoom=e.maxMonstersPerRoom||2}create(){super.create();for(let l=0;l<this.height;l++)for(let t=0;t<this.width;t++)this.tiles.get(Ps.Floor)[t][l]=Mm.createFromTemplate("Floor",{components:{positionalobject:{x:t,y:l,z:0}}}),this.tiles.get(Ps.Wall)[t][l]=Mm.createFromTemplate("Wall",{components:{positionalobject:{x:t,y:l,z:1}}});const l=[];for(let t=0;t<this.maxRooms;t++){const t=V.randInt(this.roomMinSize,this.roomMaxSize),e=V.randInt(this.roomMinSize,this.roomMaxSize),n=V.randInt(0,this.width-t-1),i=V.randInt(0,this.height-e-1),a=new Tm(n,i,t,e);let r=!1;for(const t of l)if(a.intersects(t)){r=!0;break}if(!r){if(a.createRoom(this),0===l.length)this.addPlayer(a.getCenterX(),a.getCenterY());else{const t=l[l.length-1];Am.tunnelBetween(this,t.getCenterX(),t.getCenterY(),a.getCenterX(),a.getCenterY())}a.placeEntities(this.maxMonstersPerRoom),l.push(a)}}}}class Cm{constructor(l){this.domElement=document.createElement("div"),this.domElement.id=l,this.domElement.classList.add("editor-ui")}getElement(){return document.getElementById(this.domElement.id)}show(){const l=this.getElement();l?l.classList.add("active"):(document.body.appendChild(this.domElement),this.domElement.classList.add("active"))}hide(){const l=this.getElement();l&&l.classList.remove("active")}}const Rm=new class extends Cm{constructor(){super("editor-controls"),this.addAction("select","👆",!0),this.addAction("paint","🖌"),this.addAction("delete","⌫"),this.activeAction="select",this.domElement.addEventListener("click",this)}handleEvent(l){switch(l.type){case"click":this.setControl(l)}}addAction(l,t,e){const n=document.createElement("button");n.id="editor-controls-"+l,n.setAttribute("data-action",l),n.classList.add("editor-controls__action"),e&&n.classList.add("active"),n.innerHTML=t,this.domElement.appendChild(n)}setControl(l){const t=l.target;if("submit"===t.type&&!t.classList.contains("active")){const l=t.parentNode.childNodes;for(const t of l)t.classList.remove("active");this.activeAction=t.getAttribute("data-action"),t.classList.add("active")}}},Pm=new class extends Cm{constructor(){super("editor-info"),this.dataMap=new Map;const l=document.createElement("div");l.classList.add("editor-info__component"),l.classList.add("active"),this.addData("entity",l),this.addData("name",l),this.domElement.appendChild(l),this.positionalObject=document.createElement("div"),this.positionalObject.classList.add("editor-info__component"),this.addData("baseType",this.positionalObject),this.addData("x",this.positionalObject),this.addData("y",this.positionalObject),this.addData("z",this.positionalObject),this.addData("color",this.positionalObject),this.addDataInput("scale",this.positionalObject),this.addData("xRot",this.positionalObject),this.addData("yRot",this.positionalObject),this.addData("zRot",this.positionalObject),this.addData("xOffset",this.positionalObject),this.addData("yOffset",this.positionalObject),this.addData("zOffset",this.positionalObject),this.domElement.appendChild(this.positionalObject),this.walkable=document.createElement("div"),this.walkable.classList.add("editor-info__component"),this.addData("walkable",this.walkable),this.domElement.appendChild(this.walkable),this.blocksMovement=document.createElement("div"),this.blocksMovement.classList.add("editor-info__component"),this.addData("blocksMovement",this.blocksMovement),this.domElement.appendChild(this.blocksMovement)}addDataInput(l,t){this.addData(l,t,"input")}addData(l,t,e="text"){const n=this,i=document.createElement("div");i.classList.add("editor-info__data");const a=document.createElement("span");let r;a.classList.add("editor-info__label"),a.innerHTML=l+": ",i.appendChild(a),"text"===e?r=document.createElement("span"):"input"===e&&(r=document.createElement("input"),r.setAttribute("tabindex","-1"),r.onchange=function(l){n.updateScale(n,l)},r.onblur=function(l){n.updateScale(n,l)}),r.classList.add("editor-info__"+e),r.id="editor-info-"+l,i.appendChild(r),t.appendChild(i),this.dataMap.set(l,r)}updateScale(l,t){let e=t.target.value;if(e<.1?(e=.1,t.target.value=e):e>1&&(e=1,t.target.value=e),l.entity){const t=l.entity.getComponent("positionalobject");t&&(t.scale=e,t.teardown(),t.setVisible(),Bm.needsMapUpdate=!0)}}setData(l,t){const e=this.dataMap.get(l);"INPUT"===e.tagName?e.value=t:e.innerHTML=t}setDataForEntity(l){this.entity=l,this.setData("entity",l.type),this.setData("name",l.name);const t=l.getComponent("positionalobject");t?(this.positionalObject.classList.add("active"),this.setData("x",t.x),this.setData("y",t.y),this.setData("z",t.z),this.setData("baseType",t.type),this.setData("color",t.color),this.setData("scale",t.scale),this.setData("xRot",t.xRot),this.setData("yRot",t.yRot),this.setData("zRot",t.zRot),this.setData("xOffset",t.xOffset),this.setData("yOffset",t.yOffset),this.setData("zOffset",t.zOffset)):this.positionalObject.classList.remove("active");const e=l.getComponent("walkable");e?(this.walkable.classList.add("active"),this.setData("walkable",e.walkable)):this.walkable.classList.remove("active");const n=l.getComponent("blocksMovement");n?(this.blocksMovement.classList.add("active"),this.setData("blocksMovement",n.blocksMovement)):this.blocksMovement.classList.remove("active")}};class Im extends Hs{constructor(){super(),this.highlightedTile=null,this.selectedEntity=null}teardown(){super.teardown(),this.clearHighlight(),this.clearSelected()}clearHighlight(){if(null!==this.highlightedTile){if(this.highlightedTile===this.selectedEntity)return;const l=this.highlightedTile.getComponent("positionalobject");l&&l.removeHighlight()}}clearSelected(){if(null!==this.selectedEntity){const l=this.selectedEntity.getComponent("positionalobject");l&&l.removeHighlight()}}handleInput(){let l=null;return xs.testPressed("editor-up")?l=new om(0,1):xs.testPressed("editor-down")?l=new om(0,-1):xs.testPressed("editor-left")?l=new om(-1):xs.testPressed("editor-right")?l=new om(1):xs.testPressed("save",1e3)?Bm.gameMap.save("debug1"):xs.testPressed("load",1e3)?Bm.gameMap.load("debug1"):xs.testPressed("debug")?(Bm.gameMap.reveal(),Bm.needsMapUpdate=!0,Bm.setEventHandler(new Dm),Rm.hide(),Pm.hide()):xs.testPressed("debug2")&&(Bm.gameMap.teardown(),Bm.gameMap=new Em,Bm.gameMap.create(),Bm.needsMapUpdate=!0),l}onLeftClick(l){if("CANVAS"===l.target.tagName)if("select"===Rm.activeAction){const t=this.getMouseIntersectingObjects(l);let e=!1;for(let l=0;l<t.length;l++){const n=t[l].object.parentEntity;if(n){const l=n.getComponent("positionalobject");if(l){if(0===l.transparency)continue;this.clearSelected(),this.selectedEntity=n,Pm.setDataForEntity(this.selectedEntity),l.highlight()}e=!0;break}}e||this.clearSelected()}else"delete"===Rm.activeAction&&this.removeEntityFromMouseEvent(l);Bm.needsMapUpdate=!0}onMouseMove(l){const t=this.getMouseIntersectingObjects(l);let e=!1;for(let l=0;l<t.length;l++){const n=t[l].object.parentEntity;if(n){const l=n.getComponent("positionalobject");if(l&&!l.highlighted){if(0===l.transparency)continue;this.clearHighlight(),this.highlightedTile=n,l.highlight()}e=!0;break}}e||this.clearHighlight(),this.mouseDown&&"delete"===Rm.activeAction&&this.removeEntityFromMouseEvent(l),Bm.needsMapUpdate=!0}removeEntityFromMouseEvent(l){const t=this.getMouseIntersectingObjects(l);for(let l=0;l<t.length;l++){const e=t[l].object.parentEntity;if(e){const l=e.getComponent("positionalobject");if(e instanceof qm)Bm.gameMap.tiles.get(l.z)[l.x][l.y]=null;else if(e instanceof pm){const l=Bm.gameMap.actors.indexOf(e);l>-1&&Bm.gameMap.actors.splice(l,1)}else if(e instanceof xm){const l=Bm.gameMap.items.indexOf(e);l>-1&&Bm.gameMap.items.splice(l,1)}l.teardown();break}}}}class Dm extends Hs{constructor(){super(),this.highlightedTile=null}teardown(){super.teardown(),this.clearHighlight()}clearHighlight(){if(null!==this.highlightedTile){const l=this.highlightedTile.getComponent("positionalobject");l&&l.removeHighlight()}}handleInput(){let l=null;return xs.testPressed("up")?l=new om(0,1):xs.testPressed("down")?l=new om(0,-1):xs.testPressed("left")?l=new om(-1):xs.testPressed("right")?l=new om(1):xs.testPressed("nw")?l=new om(-1,1):xs.testPressed("ne")?l=new om(1,1):xs.testPressed("sw")?l=new om(-1,-1):xs.testPressed("se")?l=new om(1,-1):xs.testPressed("wait")?l=new am:xs.testPressed("save",1e3)?Bm.gameMap.save("save1"):xs.testPressed("load",1e3)?Bm.gameMap.load("save1"):xs.testPressed("debug")?(Bm.gameMap.reveal(),Bm.needsMapUpdate=!0,Bm.setEventHandler(new Im),Rm.show(),Pm.show()):xs.testPressed("debug2")?(Bm.gameMap.teardown(),Bm.gameMap=new Em,Bm.gameMap.create(),Bm.needsMapUpdate=!0):xs.testPressed("reset")&&(Bm.gameMap.teardown(),Bm.gameMap=new Lm(100,100),Bm.gameMap.create(),Bm.needsMapUpdate=!0),l}onMouseMove(l){this.mouse.x=l.clientX/Fm.canvasDom.offsetWidth*2-1,this.mouse.y=-l.clientY/Fm.canvasDom.offsetHeight*2+1,this.raycaster.setFromCamera(this.mouse,Fm.camera);const t=this.raycaster.intersectObject(Fm.scene,!0);let e=!1;for(let l=0;l<t.length;l++){const n=t[l].object.parentEntity;if(n&&n instanceof qm){const l=n.getComponent("positionalobject");if(l){if(0===l.transparency)continue;this.highlightedTile!==n&&(this.clearHighlight(),this.highlightedTile=n,l.highlight(),zm.updatePositionDetails(n))}e=!0;break}}e||null===this.highlightedTile||(this.clearHighlight(),zm.updatePlayerDetails()),Bm.needsMapUpdate=!0}}class Nm extends Ys{constructor(){super()}compute(l,t,e,n,i,a){super.compute(l,t,e,n,i,a);const r=Math.max(0,l-n),o=Math.min(Bm.gameMap.width,l+n),s=Math.max(0,t-n),m=Math.min(Bm.gameMap.height,t+n);for(let l=r;l<o;l++)for(let t=s;t<m;t++)this.exploreTile(l,t,i,a,!0)}}const Om=new class{constructor(){this.eventHandler=new Dm,this.player=null,this.gameMap=null,this.needsMapUpdate=!1,this.fov=new Zs,this.airFov=new Nm}setEventHandler(l){this.eventHandler&&this.eventHandler.teardown(),this.eventHandler=l}handleEvents(){const l=this.eventHandler.handleInput();null!=l&&(l.perform(this.player)instanceof ns||(Fm.updateCameraPosition(Om.player),Om.needsMapUpdate=!0,zm.updatePlayerDetails(),this.handleEnemyTurns()))}handleEnemyTurns(){for(const l of this.gameMap.actors)if(l!==this.player){const t=l.getComponent("ai");t&&t.perform()}}},Bm=Om,Fm=new class{constructor(){this.scene=new Hi,this.setupGameHtml(),this.setupLights(),this.updateCamera(),window.addEventListener("resize",this)}setupGameHtml(){const l=document.createElement("div");l.classList.add("game"),this.canvasDom=document.createElement("div"),this.canvasDom.classList.add("view"),l.appendChild(this.canvasDom),l.appendChild(zm.dom),l.appendChild(Ws.consoleDom),l.appendChild(js.dom),this.renderer=new Bi({antialias:!0,alpha:!0}),this.renderer.setClearColor(11184810,1),this.canvasDom.appendChild(this.renderer.domElement),document.body.appendChild(l),this.stats=new(ts()),this.stats.showPanel(0),document.body.appendChild(this.stats.dom)}handleEvent(l){switch(l.type){case"resize":this.updateCamera(),this.player&&this.updateCameraPosition(this.player)}}setupLights(){const l=new xo(16777215,.5);this.scene.add(l);const t=new po(16777215,.5);t.position.set(100,-300,400),this.scene.add(t)}updateCamera(){const l=this.canvasDom.offsetWidth/this.canvasDom.offsetHeight,t=80*-l/2,e=80*l/2;this.camera=new qo(t,e,40,-40,-1e4,1e4),this.renderer.setSize(this.canvasDom.offsetWidth,this.canvasDom.offsetHeight)}updateCameraPosition(l){this.player=l,this.camera.up.set(0,0,1);const t=l.getComponent("positionalobject");this.camera.position.set(200+t.object.position.x,-200+t.object.position.y,300),this.camera.lookAt(t.object.position.x,t.object.position.y,0),Bm.needsMapUpdate=!0}};!function(){const l=function(){const l=Bm.player.getComponent("positionalobject");if(l){let t=5;const e=Bm.gameMap.tiles.get(l.z)[l.x][l.y];if(e){const l=e.getComponent("visibilityModifier");l&&(t=l.getVisibility(t))}const n=0===Bm.fov.newObjects.length;Bm.gameMap.updateFOV(l.x,l.y,l.z,t),Bm.gameMap.draw(l.x,l.y,l.z),n&&zm.updatePlayerDetails()}Fm.renderer.render(Fm.scene,Fm.camera)};Bm.gameMap=new Lm(100,100),Bm.gameMap.create(),Fm.updateCameraPosition(Bm.player),Fm.renderer.setAnimationLoop((function(t){Fm.stats.begin(),Bm.handleEvents(),Bm.needsMapUpdate&&(l(),Bm.needsMapUpdate=!1),ks.update(),Fm.stats.end()})),Bm.needsMapUpdate=!0,Ws.text("Welcome adventurer!").build()}()}},t={};function e(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={id:n,exports:{}};return l[n].call(a.exports,a,a.exports,e),a.exports}e.n=l=>{var t=l&&l.__esModule?()=>l.default:()=>l;return e.d(t,{a:t}),t},e.d=(l,t)=>{for(var n in t)e.o(t,n)&&!e.o(l,n)&&Object.defineProperty(l,n,{enumerable:!0,get:t[n]})},e.o=(l,t)=>Object.prototype.hasOwnProperty.call(l,t),e(142)})();
//# sourceMappingURL=bundle.js.map